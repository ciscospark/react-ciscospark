import {fromJS, Record} from 'immutable';

export const STORE_TEAMS = 'teams/STORE_TEAMS';
export const UPDATE_TEAM = 'teams/UPDATE_TEAM';

const Team = Record({
  id: null,
  color: '',
  generalConversationId: null,
  displayName: '',
  description: '',
  status: {
    isArchived: false
  }
});

const Status = Record({
  isFetching: false,
  hasFetched: false
});

export const initialState = fromJS({
  byId: {},
  status: new Status()
});

export default function reducer(state = initialState, action) {
  switch (action.type) {
    case STORE_TEAMS: {
      const teams = {};

      action.payload.teams.forEach((t) => {
        teams[t.id] = new Team(t);
      });

      return state.mergeIn(['byId'], teams);
    }
    case UPDATE_TEAM: {
      const {team} = action.payload;

      return state.mergeDeepIn(['byId', team.id], team);
    }
    default:
      return state;
  }
}

