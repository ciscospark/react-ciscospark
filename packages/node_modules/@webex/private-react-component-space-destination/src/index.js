import React from 'react';
import classNames from 'classnames';
import {PropTypes} from 'prop-types';

import {RadioButtonGroup, RadioButton} from 'material-ui/RadioButton';
import Checkbox from 'material-ui/Checkbox';

import styles from './styles.css';

const MODE_ONE_ON_ONE_ID = 'userId';
const MODE_ONE_ON_ONE = 'email';
const MODE_SPACE = 'spaceId';
const MODE_SIP = 'sip';
const MODE_PSTN = 'pstn';

const DESTINATION_PROP_MODE_LEGACY = 'DESTINATION_PROP_MODE_LEGACY';
const DESTINATION_PROP_MODE_MAIN = 'DESTINATION_PROP_MODE_MAIN';

export const constants = {
  DESTINATION_PROP_MODE_LEGACY,
  DESTINATION_PROP_MODE_MAIN,
  MODE_ONE_ON_ONE,
  MODE_ONE_ON_ONE_ID,
  MODE_SPACE,
  MODE_SIP,
  MODE_PSTN
};

const propTypes = {
  activities: PropTypes.object.isRequired,
  destinationId: PropTypes.string.isRequired,
  destinationPropMode: PropTypes.string,
  initialActivity: PropTypes.string.isRequired,
  mode: PropTypes.string.isRequired,
  onActivitiesChange: PropTypes.func.isRequired,
  onDestinationChange: PropTypes.func.isRequired,
  onDestinationPropTypeChange: PropTypes.func,
  onInitialActivityChange: PropTypes.func.isRequired,
  onModeChange: PropTypes.func.isRequired
};

const defaultProps = {
  destinationPropMode: null,
  onDestinationPropTypeChange: () => {}
};

function SpaceDestination(props) {
  function getDestinationLabels() {
    let ariaLabel, placeholder;
    switch (props.mode) {
      case MODE_ONE_ON_ONE:
        ariaLabel = 'To User Email';
        placeholder = 'Webex Teams User Email (For 1:1)';
        break;
      case MODE_ONE_ON_ONE_ID:
        ariaLabel = 'To User Id';
        placeholder = 'Webex Teams User Id (For 1:1)';
        break;
      case MODE_SPACE:
        ariaLabel = 'To Space ID';
        placeholder = 'Webex Teams Space Id';
        break;
      case MODE_SIP:
        ariaLabel = 'To SIP URI';
        placeholder = 'SIP URI';
        break;
      case MODE_PSTN:
        ariaLabel = 'To Phone Number';
        placeholder = 'Phone Number';
        break;
      default: {
        ariaLabel = 'unknown mode';
        placeholder = 'Please pick a type';
      }
    }
    return {
      ariaLabel,
      placeholder
    };
  }

  const displayActivityWarning = !props.activities[props.initialActivity];
  const isMeetOnly = [MODE_SIP, MODE_PSTN].includes(props.mode);

  const {
    ariaLabel,
    placeholder
  } = getDestinationLabels();

  return (
    <div>
      <h3> Widget Destination Type </h3>
      <div className={classNames(styles.select)}>
        <RadioButtonGroup
          aria-label="Widget 'To' Type"
          name="toType"
          onChange={props.onModeChange}
          valueSelected={props.mode}
        >
          <RadioButton
            aria-label="To Space"
            label="To Space"
            value={MODE_SPACE}
          />
          <RadioButton
            aria-label="To Person Email"
            label="To Person"
            value={MODE_ONE_ON_ONE}
          />
          <RadioButton
            aria-label="To Person Id"
            label="To Person Id"
            value={MODE_ONE_ON_ONE_ID}
          />
          <RadioButton
            aria-label="To SIP URI"
            label="To SIP URI"
            value={MODE_SIP}
          />
          <RadioButton
            aria-label="To Phone Number (PSTN)"
            label="To Phone Number (PSTN)"
            value={MODE_PSTN}
          />
        </RadioButtonGroup>
      </div>

      <h3> Widget Initial Activity </h3>
      <div className={classNames(styles.select)}>
        <RadioButtonGroup
          aria-label="Initial Activity"
          name="initialActivity"
          onChange={props.onInitialActivityChange}
          valueSelected={isMeetOnly ? 'meet' : props.initialActivity}
        >
          <RadioButton
            aria-label="Message"
            label="Message"
            value="message"
            disabled={isMeetOnly}
          />
          <RadioButton
            aria-label="Meet"
            label="Meet"
            value="meet"
          />
        </RadioButtonGroup>
      </div>

      <div>
        <h3> Widget Activities </h3>
        {
          displayActivityWarning &&
          <div className={styles.warning}> Warning: The initial activity is not enabled </div>
        }
        <Checkbox
          checked={props.activities.files}
          label="Files"
          onCheck={props.onActivitiesChange}
          value="files"
          disabled={isMeetOnly}
        />
        <Checkbox
          checked={props.activities.meet}
          label="Meet"
          onCheck={props.onActivitiesChange}
          value="meet"
        />
        <Checkbox
          checked={props.activities.message}
          label="Message"
          onCheck={props.onActivitiesChange}
          value="message"
          disabled={isMeetOnly}
        />
        <Checkbox
          checked={props.activities.people}
          label="People"
          onCheck={props.onActivitiesChange}
          value="people"
        />
      </div>
      { props.destinationPropMode &&
        <div className={classNames(styles.select)}>
          <h3>Widget Destination Prop Type</h3>
          <RadioButtonGroup
            aria-label="Widget 'Destination Prop' Type"
            name="destinationType"
            onChange={props.onDestinationPropTypeChange}
            valueSelected={props.destinationPropMode}
          >
            <RadioButton
              aria-label="Destination ID & Type Mode"
              label="Destination ID & Type Mode"
              value={DESTINATION_PROP_MODE_MAIN}
            />
            <RadioButton
              aria-label="Destination Legacy Mode"
              label="Destination Legacy Mode"
              value={DESTINATION_PROP_MODE_LEGACY}
            />
          </RadioButtonGroup>
        </div>
      }
      <div>
        <h3> Widget Destination </h3>
        <input
          aria-label={ariaLabel}
          className={styles.textInput}
          id="destinationId"
          onChange={props.onDestinationChange}
          placeholder={placeholder}
          value={props.destinationId}
        />
      </div>
    </div>
  );
}

SpaceDestination.propTypes = propTypes;

SpaceDestination.defaultProps = defaultProps;

export default SpaceDestination;
