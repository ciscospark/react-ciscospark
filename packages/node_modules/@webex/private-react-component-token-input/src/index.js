import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {autobind} from 'core-decorators';
import {Button, Input, Radio, RadioGroup} from '@collab-ui/react';
import {Card, CardActions, CardTitle, CardText} from 'material-ui/Card';

import './collab.scss';

const propTypes = {
  onLogin: PropTypes.func.isRequired,
  token: PropTypes.string,
  tokenType: PropTypes.string
};

const defaultProps = {
  token: '',
  tokenType: ''
};


class TokenInput extends Component {
  constructor(props) {
    super(props);
    this.state = {
      tokenSaved: !!props.token,
      tokenType: props.tokenType,
      userAccessToken: props.token
    };
  }

  shouldComponentUpdate(nextProps, nextState) {
    return nextState !== this.state;
  }

  @autobind
  handleClearToken() {
    this.setState({userAccessToken: '', tokenSaved: false});
    this.props.onLogin();
  }

  @autobind
  handleSaveToken() {
    this.setState({tokenSaved: true});
    this.props.onLogin(this.state.userAccessToken, this.state.tokenType);
  }

  @autobind
  handleAccessTokenChange(e) {
    return this.setState({userAccessToken: e.target.value});
  }

  @autobind
  handleTypeChange(value) {
    return this.setState({tokenType: value});
  }


  render() {
    return (
      <div>
        <Card initiallyExpanded style={{margin: '10px'}}>
          <CardTitle
            actAsExpander
            showExpandableButton
            subtitle="Webex Teams Widgets require an access token to identify the current user."
            title="Webex Teams Access Token"
          />
          {!this.state.tokenSaved &&
            <CardText expandable>
              <div>
                <h3>Access Token Type</h3>
                <RadioGroup
                  ariaLabel="Choose Access Token Type"
                  name="tokenType"
                  onChange={this.handleTypeChange}
                  values={[this.state.tokenType]}
                >
                  <Radio
                    ariaLabel="Type Access Token"
                    htmlId="tokenTypeAccessToken"
                    label="Access Token"
                    value="token"
                  />
                  <Radio
                    ariaLabel="Type Guest Token"
                    htmlId="tokenTypeGuestToken"
                    label="Guest Token"
                    value="JWT"
                  />
                </RadioGroup>
              </div>
              <Input
                aria-label="Access Token"
                htmlId="accessTokenInput"
                inputSize="medium-12"
                label="Token"
                onChange={this.handleAccessTokenChange}
                placeholder={this.state.tokenType === 'JWT' ? 'JWT' : 'Access Token'}
                value={this.state.userAccessToken}
              />
              <p>You can get an access token from <a href="http://developer.ciscospark.com">developer.ciscospark.com</a></p>
            </CardText>
          }
          <CardActions expandable>
            {
              !this.state.tokenSaved &&
              <Button
                ariaLabel="Save Token"
                color="blue"
                disabled={!this.state.userAccessToken}
                id="accessTokenSaveButton"
                onClick={this.handleSaveToken}
              >
                Save Token
              </Button>
            }
            {
              this.state.tokenSaved &&
              <Button
                ariaLabel="Clear Token"
                color="blue"
                onClick={this.handleClearToken}
              >
                Token Saved, Clear?
              </Button>
            }
          </CardActions>
        </Card>
      </div>
    );
  }
}

TokenInput.propTypes = propTypes;
TokenInput.defaultProps = defaultProps;

export default TokenInput;
