import {Record} from 'immutable';

const Membership = Record({
  audioMuted: false,
  isInitiator: true,
  hydraId: '',
  id: '',
  state: '',
  videoMuted: false
});

/**
 * Constructs a call state with properties the widget uses
 *
 * @export
 * @param {any} call
 * @param {Error} rawError
 * @returns {object}
 */
function constructCallStatus(call) {
  let isConnected,
    isIncoming,
    isInitiated,
    isRinging;

  const {
    remoteAudioMuted,
    remoteVideoMuted
  } = call;

  try {
    // Ringing means we are calling out to 1:1 and the party hasn't answered
    isRinging = call.remoteMember && call.remoteMember.state === 'notified';

    // Connected means both parties are active on a 1:1 or joined in group
    // isCall is true when the call is 1:1
    if (typeof call.isCall === 'boolean') {
      if (call.isCall) {
        isInitiated = !!call.locus;
        isConnected = !!call.remoteMember &&
          call.remoteMember.state === 'connected' &&
          !!call.joinedOnThisDevice;
      }
      else {
        // Group calls are immediately initiated
        isInitiated = true;
        isConnected = !!call.joinedOnThisDevice;
      }
    }
    else {
      isInitiated = false;
      isConnected = false;
    }
    isIncoming = call.direction === 'in' && !call.hasJoinedOnThisDevice;
  }
  catch (e) {
    // Do nothing
  }

  return {
    isCall: call.isCall,
    isActive: call.isActive,
    hasJoinedOnThisDevice: call.joinedOnThisDevice,
    isReceivingAudio: call.receivingAudio,
    isReceivingVideo: call.receivingVideo,
    isSendingAudio: call.sendingAudio,
    isSendingVideo: call.sendingVideo,
    isDeclined: call.me && call.me.state === 'declined',
    isInitiated,
    isConnected,
    isRinging,
    isIncoming,
    remoteAudioMuted,
    remoteVideoMuted
  };
}

export function releaseCamera(mediaStream) {
  return mediaStream.getTracks().forEach((track) => track.stop());
}

export function constructCallObject(call) {
  let remoteAudioStream = null;
  let remoteVideoStream = null;
  let activeParticipantsCount = 0;
  let startTime;
  const memberships = [];

  try {
    if (call && call.remoteMediaStream && call.remoteMediaStream.getAudioTracks) {
      remoteAudioStream = new MediaStream(call.remoteMediaStream.getAudioTracks());
    }
    if (call && call.remoteMediaStream && call.remoteMediaStream.getVideoTracks) {
      remoteVideoStream = new MediaStream(call.remoteMediaStream.getVideoTracks());
    }
    call.memberships.forEach((m) => {
      // only count user as active participant if they are connected
      if (m.state === 'connected') {
        activeParticipantsCount += 1;
      }

      memberships.push(Membership({
        audioMuted: m.audioMuted,
        isInitiator: m.isInitiator,
        hydraId: m.personId,
        id: m.personUuid,
        state: m.state,
        videoMuted: m.videoMuted
      }));
    });

    if (call.locus && call.locus.fullState && call.locus.fullState.lastActive) {
      startTime = Date.parse(call.locus.fullState.lastActive);
    }
    else {
      startTime = Date.now();
    }
  }
  catch (e) {
    // Do nothing
  }

  return {
    instance: call,
    locusUrl: call.locusUrl,
    direction: call.direction,
    remoteMediaStream: call.remoteMediaStream,
    localMediaStream: call.localMediaStream,
    startTime,
    memberships,
    activeParticipantsCount,
    remoteAudioStream,
    remoteVideoStream,
    ...constructCallStatus(call)
  };
}
