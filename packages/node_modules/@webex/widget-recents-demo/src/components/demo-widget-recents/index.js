/* global webex */
import React, {Component} from 'react';
import {instanceOf} from 'prop-types';
import classNames from 'classnames';
import {Cookies, withCookies} from 'react-cookie';
import {autobind} from 'core-decorators';
import {Button, Topbar, Tabs, Tab, TabContent, TabPane, TabList} from '@momentum-ui/react';

import TokenInput from '@webex/private-react-component-token-input';
import ExampleCode from '@webex/private-react-component-example-code';

import './momentum.scss';
import styles from './styles.css';

const widgetElementId = 'my-webex-widget';

const propTypes = {
  cookies: instanceOf(Cookies).isRequired
};

class DemoWidgetRecents extends Component {
  componentWillMount() {
    const {cookies} = this.props;

    this.setState({
      accessToken: cookies.get('accessToken') || '',
      accessTokenType: cookies.get('accessTokenType') || '',
      running: false
    });
  }

  shouldComponentUpdate() {
    return true;
  }

  @autobind
  handleSubmit(e) {
    e.preventDefault();
    const {cookies} = this.props;

    cookies.set('accessToken', this.state.accessToken);
    cookies.set('accessTokenType', this.state.accessTokenType);
    const widgetOptions = {
      onEvent: (eventName, detail) => {
        window.ciscoSparkEvents.push({eventName, detail});
      }
    };

    if (this.state.accessTokenType === 'JWT') {
      widgetOptions.guestToken = this.state.accessToken;
    }
    else {
      widgetOptions.accessToken = this.state.accessToken;
    }
    const widgetEl = document.getElementById(widgetElementId);

    webex.widget(widgetEl).recentsWidget(widgetOptions);
    this.setState({running: true});
  }

  @autobind
  handleAccessTokenChange(accessToken, accessTokenType) {
    return this.setState({accessToken, accessTokenType});
  }

  generateExampleCode() {
    const {accessTokenType} = this.state;

    let globalToken, inlineToken;

    if (accessTokenType === 'JWT') {
      globalToken = "guestToken: 'XXXXXXXXXXXXXX'";
      inlineToken = 'data-guest-token="XXXXXXXXXXXXXX"';
    }
    else {
      globalToken = "accessToken: 'XXXXXXXXXXXXXX'";
      inlineToken = 'data-access-token="XXXXXXXXXXXXXX"';
    }
    const inlineCode = `<div
  data-toggle="webex-recents"
  ${inlineToken}
/>`;

    const globalCode = `<div id="my-webex-widget" />
<script>
  var widgetEl = document.getElementById('my-webex-widget');
  // Init a new widget
  webex.widget(widgetEl).recentsWidget({
    ${globalToken}
  });
</script>`;

    return {
      globalCode,
      inlineCode
    };
  }

  render() {
    const loadButtonEnabled = this.state.accessToken;
    const {globalCode, inlineCode} = this.generateExampleCode();
    const componentContainerClassNames = [
      'webex-widget-component-container',
      styles.widgetComponentContainer
    ];

    if (!this.state.running) {
      componentContainerClassNames.push(styles.hidden);
    }

    // eslint-disable-reason should not apply to jsx/html markup
    /* eslint-disable max-len */
    return (
      <div>
        <Topbar title="Webex Teams Recents Widget" />
        <div>
          <div className={styles.section}>
            <h1>Webex Teams Recents Widget Demo</h1>
            <p>
            The Webex Teams Recents widget allows developers to easily incorporate Webex Teams Recents list and events into an application.
            </p>
            <p>
            This widget handles coordination between your application and the Webex Teams APIs, and provides components of the Webex Teams recents list experience without having to build all of the front end UI yourself.
            </p>
            <p>
            Our widget is built using <a href="https://github.com/facebook/react">React</a>, <a href="https://github.com/reactjs/redux">Redux</a>, and the <a href="https://github.com/webex/webex-js-sdk">Webex Teams Javascript SDK </a>.
            </p>
            <Button
              ariaLabel="Open Recents Widget"
              color="blue"
              disabled={!loadButtonEnabled}
              onClick={this.handleSubmit}
            >
              Open Recents Widget
            </Button>
          </div>
          <TokenInput onLogin={this.handleAccessTokenChange} token={this.state.accessToken} />
          <div className={styles.section}>
            <h2>Widget Example Code</h2>
            <p>Webex Teams Recents Widget can be implemented multiple ways.</p>
            <div className={classNames(styles.example)}>
              <Tabs justified>
                <TabList>
                  <Tab
                    heading="Inline Mode"
                  />
                  <Tab
                    heading="Global Mode"
                  />
                </TabList>
                <TabContent>
                  <TabPane>
                    <ExampleCode code={inlineCode} />
                  </TabPane>
                  <TabPane>
                    <ExampleCode code={globalCode} />
                  </TabPane>
                </TabContent>
              </Tabs>
            </div>
          </div>
        </div>
        <div className={styles.runningDemosContainer}>
          <div className={classNames(componentContainerClassNames)}>
            <div id={widgetElementId} />
          </div>
        </div>
      </div>
    );
  }
}

DemoWidgetRecents.propTypes = propTypes;

DemoWidgetRecents.title = 'Widget Recents';
DemoWidgetRecents.path = '/widget-recents-demo';

export default withCookies(DemoWidgetRecents);
