/* eslint-disable react/no-set-state,react/forbid-component-props,react/jsx-no-literals */
/* global ciscospark */
import React, {Component} from 'react';
import {instanceOf} from 'prop-types';
import classNames from 'classnames';
import {Cookies, withCookies} from 'react-cookie';
import {autobind} from 'core-decorators';

import {Tabs, Tab} from 'material-ui/Tabs';
import RaisedButton from 'material-ui/RaisedButton';
import AppBar from 'material-ui/AppBar';
import Toggle from 'material-ui/Toggle';
import {Card, CardActions, CardTitle, CardText} from 'material-ui/Card';

import Highlight from 'react-highlight';
import 'highlight.js/styles/default.css';

import TokenInput from '../token-input';

import styles from './styles.css';

const widgetElementId = `my-ciscospark-widget`;

class DemoWidgetRecents extends Component {
  componentWillMount() {
    const {cookies} = this.props;
    const hasToken = !!cookies.get(`accessToken`);
    this.state = {
      authenticate: false,
      displayToken: false,
      hasToken,
      accessToken: cookies.get(`accessToken`) || ``,
      running: false
    };
  }

  shouldComponentUpdate() {
    return true;
  }

  @autobind
  handleSubmit(e) {
    e.preventDefault();
    const {cookies} = this.props;
    cookies.set(`accessToken`, this.state.accessToken);
    const widgetEl = document.getElementById(widgetElementId);
    ciscospark.widget(widgetEl).recentsWidget({
      accessToken: this.state.accessToken,
      onEvent: (eventName, detail) => {
        // eslint-disable-next-line object-shorthand
        window.ciscoSparkEvents.push({eventName: eventName, detail: detail});
      }
    });
    this.setState({running: true});
  }

  @autobind
  handleAccessTokenChange(accessToken) {
    return this.setState({accessToken, hasToken: !!accessToken});
  }

  @autobind
  handleDisplayAccessTokenChange(e, displayToken) {
    return this.setState({displayToken});
  }

  // eslint-disable-next-line complexity
  generateExampleCode(state) {
    const {accessToken, displayToken} = state;
    const displayedAccessToken = displayToken ? accessToken : `YOUR_ACCESS_TOKEN`;

    const inlineCode = `<div data-toggle="ciscospark-recents" data-access-token="${displayedAccessToken}" />`;
    const globalCode = `<div id="my-ciscospark-widget" />
<script>
  var widgetEl = document.getElementById('my-ciscospark-widget');
  // Init a new widget
  ciscospark.widget(widgetEl).recentsWidget({
    accessToken: '${displayedAccessToken}'
  });
</script>`;
    return {
      globalCode,
      inlineCode
    };
  }

  render() {
    const loadButtonEnabled = this.state.accessToken;
    const {globalCode, inlineCode} = this.generateExampleCode(this.state);
    const componentContainerClassNames = [
      `ciscospark-widget-component-container`,
      styles.widgetComponentContainer
    ];
    if (!this.state.running) {
      componentContainerClassNames.push(styles.hidden);
    }

    return (
      <div>
        <AppBar title="Cisco Spark Recents Widget" />
        <div className={classNames(componentContainerClassNames)}>
          <div id={widgetElementId} />
        </div>
        <div className={classNames(`ciscospark-demo-wrapper`, styles.demoWrapper)}>
          <Card initiallyExpanded style={{margin: `10px`}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              title="Cisco Spark Recents Widget Demo"
            />
            <CardText expandable>
              <p>
              The Spark Recents widget allows developers to easily incorporate Cisco Spark Recents list and events into an application.
              </p>
              <p>
              This widget handles coordination between your application and the Spark APIs, and provides components of the Spark recents list experience without having to build all of the front end UI yourself.
              </p>
              <p>
              Our widget is built using <a href="https://github.com/facebook/react">React</a>, <a href="https://github.com/reactjs/redux">Redux</a>, and the <a href="https://github.com/ciscospark/spark-js-sdk">Spark Javascript SDK </a>.
              </p>
            </CardText>
            <CardActions expandable>
              <RaisedButton
                aria-label="Open Widget"
                disabled={!loadButtonEnabled}
                label={`Open Embedded Widget`}
                onClick={this.handleSubmit}
                primary
              />
            </CardActions>
          </Card>
          <TokenInput onLogin={this.handleAccessTokenChange} token={this.state.accessToken} />
          <Card initiallyExpanded style={{margin: `10px`}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              subtitle="Cisco Spark Recents Widget can be implemented multiple ways."
              title="Widget Example Code"
            />
            <CardText expandable>
              <div className={classNames(styles.example)}>
                <Tabs>
                  <Tab label={`Inline Mode`}>
                    <div className={classNames(`ciscospark-example-code`, styles.exampleCode)}>
                      <Highlight>
                        {inlineCode}
                      </Highlight>
                    </div>
                  </Tab>
                  <Tab label={`Global Mode`}>
                    <div className={classNames(`ciscospark-example-code`, styles.exampleCode)}>
                      <Highlight>
                        {globalCode}
                      </Highlight>
                    </div>
                  </Tab>
                </Tabs>
                <div className={classNames(`ciscospark-toggle`, styles.toggle)}>
                  <div>
                    <Toggle
                      label="Display Access Token"
                      labelPosition="right"
                      onToggle={this.handleDisplayAccessTokenChange}
                    />
                  </div>
                </div>
              </div>
            </CardText>
          </Card>
        </div>
      </div>
    );
  }
}

DemoWidgetRecents.propTypes = {
  cookies: instanceOf(Cookies).isRequired
};

DemoWidgetRecents.title = `Widget Recents`;
DemoWidgetRecents.path = `/widget-recents-demo`;

export default withCookies(DemoWidgetRecents);
