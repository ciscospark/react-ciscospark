import {Map} from 'immutable';
import {base64} from '@ciscospark/common';
import {metrics} from '@ciscospark/react-component-utils';

export const initialState = new Map({
  currentUser: null,
  toUser: null,
  status: new Map({
    isFetchingCurrentUser: false,
    isFetchingToUser: false
  })
});

export const GET_CURRENT_USER = `GET_CURRENT_USER`;
export const GET_CURRENT_USER_BEGIN = `GET_CURRENT_USER_BEGIN`;
export const GET_TO_USER = `GET_TO_USER`;
export const GET_TO_USER_BEGIN = `GET_TO_USER_BEGIN`;
export default function reducer(state = initialState, action) {
  switch (action.type) {
  case GET_CURRENT_USER:
    return state.setIn([`status`, `isFetchingCurrentUser`], action.payload.isFetching)
      .set(`currentUser`, action.payload.user);
  case GET_TO_USER: {
    const user = action.payload.user || {};
    if (user && user.id) {
      user.id = base64.decode(action.payload.user.id).split(`/`).pop();
    }
    return state.setIn([`status`, `isFetchingToUser`], action.payload.isFetching)
      .set(`toUser`, user);
  }
  case GET_CURRENT_USER_BEGIN:
    return state.setIn([`status`, `isFetchingCurrentUser`], action.payload.isFetching);
  case GET_TO_USER_BEGIN:
    return state.setIn([`status`, `isFetchingToUser`], action.payload.isFetching);

  default:
    return state;
  }
}

export function getCurrentUser(user) {
  return {
    type: GET_CURRENT_USER,
    payload: {
      isFetching: false,
      user
    }
  };
}

export function getToUser(user) {
  return {
    type: GET_TO_USER,
    payload: {
      isFetching: false,
      user
    }
  };
}

export function getCurrentUserBegin() {
  return {
    type: GET_CURRENT_USER_BEGIN,
    payload: {
      isFetching: true
    }
  };
}

export function getToUserBegin() {
  return {
    type: GET_TO_USER_BEGIN,
    payload: {
      isFetching: true
    }
  };
}

export function fetchCurrentUser(spark) {
  return (dispatch) => {
    dispatch(getCurrentUserBegin());
    return spark.user.get()
      .then((user) => {
        dispatch(getCurrentUser(user));
      });
  };
}

const metricName = {
  FETCH_TO_USER_START: `fetchToUser:start`,
  FETCH_TO_USER_END: `fetchToUser:end`,
  FETCH_TO_USER_DURATION: `fetchToUser:duration`
};

export function fetchToUser({toPersonEmail, toPersonId}, spark) {
  return (dispatch) => {
    metrics.saveElapsedTime(metricName.FETCH_TO_USER_START);
    metrics.sendTempMetric(metricName.FETCH_TO_USER_START, spark);
    dispatch(getToUserBegin());
    let req;
    if (toPersonEmail) {
      req = {
        service: `hydra`,
        resource: `/people`,
        qs: {
          email: toPersonEmail
        }
      };
    }
    else if (toPersonId) {
      req = {
        service: `hydra`,
        resource: `/people/${toPersonId}`
      };
    }
    return spark.request(req).then((res) => {
      metrics.saveElapsedTime(metricName.FETCH_TO_USER_END);
      metrics.sendTempMetric(metricName.FETCH_TO_USER_END, spark);
      metrics.sendDurationMetric(
        metricName.FETCH_TO_USER_DURATION,
        metricName.FETCH_TO_USER_START,
        metricName.FETCH_TO_USER_END,
        spark
      );
      dispatch(getToUser(res.body.items[0]));
    });
  };
}
