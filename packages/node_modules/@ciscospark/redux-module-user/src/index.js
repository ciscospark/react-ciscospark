import {fromJS} from 'immutable';
import {base64} from '@ciscospark/common';

export const initialState = fromJS({
  currentUser: null,
  toUser: null,
  status: {
    isFetchingCurrentUser: false,
    isFetchingToUser: false
  }
});

export const GET_CURRENT_USER = `user/GET_CURRENT_USER`;
export const GET_CURRENT_USER_BEGIN = `user/GET_CURRENT_USER_BEGIN`;
export const GET_TO_USER = `user/GET_TO_USER`;
export const GET_TO_USER_BEGIN = `user/GET_TO_USER_BEGIN`;
export default function reducer(state = initialState, action) {
  switch (action.type) {
  case GET_CURRENT_USER:
    return state.setIn([`status`, `isFetchingCurrentUser`], action.payload.isFetching)
      .set(`currentUser`, action.payload.user);
  case GET_TO_USER: {
    const user = action.payload.user || {};
    if (user && user.id) {
      user.id = base64.decode(action.payload.user.id).split(`/`).pop();
    }
    return state.setIn([`status`, `isFetchingToUser`], action.payload.isFetching)
      .set(`toUser`, user);
  }
  case GET_CURRENT_USER_BEGIN:
    return state.setIn([`status`, `isFetchingCurrentUser`], action.payload.isFetching);
  case GET_TO_USER_BEGIN:
    return state.setIn([`status`, `isFetchingToUser`], action.payload.isFetching);

  default:
    return state;
  }
}

export function getCurrentUser(user) {
  return {
    type: GET_CURRENT_USER,
    payload: {
      isFetching: false,
      user
    }
  };
}

export function getToUser(user) {
  return {
    type: GET_TO_USER,
    payload: {
      isFetching: false,
      user
    }
  };
}

export function getCurrentUserBegin() {
  return {
    type: GET_CURRENT_USER_BEGIN,
    payload: {
      isFetching: true
    }
  };
}

export function getToUserBegin() {
  return {
    type: GET_TO_USER_BEGIN,
    payload: {
      isFetching: true
    }
  };
}

export function fetchCurrentUser(spark) {
  return (dispatch) => {
    dispatch(getCurrentUserBegin());
    return spark.internal.user.get()
      .then((user) => {
        dispatch(getCurrentUser(user));
      });
  };
}

export function fetchToUser({toPersonEmail, toPersonId}, spark) {
  return (dispatch) => {
    dispatch(getToUserBegin());
    const handleResponse = (person) => dispatch(getToUser(person));
    if (toPersonEmail) {
      return spark.people.list({email: toPersonEmail})
      .then((res) => res.items[0])
      .then(handleResponse);
    }
    else if (toPersonId) {
      return spark.people.get(toPersonId).then(handleResponse);
    }
    return Promise.reject(new Error(`toPersonEmail or toPersonId is required`));
  };
}
