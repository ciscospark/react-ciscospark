import React, {Component, PropTypes} from 'react';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import classNames from 'classnames';
import autobind from 'autobind-decorator';

import {events as metricEvents} from '@ciscospark/react-redux-spark-metrics';
import MessageWidget from '@ciscospark/widget-message';
import MeetWidget from '@ciscospark/widget-meet';
import TitleBar from '@ciscospark/react-component-title-bar';
import Button from '@ciscospark/react-component-button';
import LoadingScreen from '@ciscospark/react-component-loading-screen';
import Timer from '@ciscospark/react-component-timer';
import ErrorDisplay from '@ciscospark/react-component-error-display';

import {fetchCurrentUser} from '@ciscospark/redux-module-user';
import {connectToMercury} from '@ciscospark/redux-module-mercury';
import {
  ICON_TYPE_MESSAGE_OUTLINE,
  ICON_TYPE_VIDEO_OUTLINE,
  ICON_TYPE_WAFFLE
} from '@ciscospark/react-component-icon';

import ActivityMenu from './components/activity-menu';

import {
  getSpaceDetails,
  updateActivityType,
  storeActivityTypes,
  storeSpaceDetails,
  toggleActivityMenuVisible
} from './actions';
import messages from './messages';
import {getSpaceWidgetProps} from './selector';
import styles from './styles.css';
import {eventNames} from './events';

const DEFAULT_ACTIVITY_TYPES = [
  {
    displayName: `Message`,
    name: `message`,
    buttonClassName: styles.messageButton,
    iconClassName: ICON_TYPE_MESSAGE_OUTLINE,
    component: MessageWidget,
    spaceTypes: [`group`, `direct`]
  },
  {
    displayName: `Call`,
    name: `meet`,
    buttonClassName: styles.meetButton,
    iconClassName: ICON_TYPE_VIDEO_OUTLINE,
    component: MeetWidget,
    spaceTypes: [`direct`]
  }
];


export class SpaceWidget extends Component {

  constructor(props) {
    super(props);
    // Store activity types used in widget
    let activityTypes = DEFAULT_ACTIVITY_TYPES;
    if (typeof props.customActivityTypes === `object`) {
      activityTypes = activityTypes.concat(props.customActivityTypes);
    }
    props.storeActivityTypes(activityTypes);
    if (activityTypes.find((a) => a.name === props.initialActivity)) {
      props.updateActivityType(props.initialActivity);
    }
  }

  componentWillMount() {
    const props = this.props;
    this.setup(props);
  }

  componentWillReceiveProps(nextProps) {
    const {
      call
    } = nextProps;
    this.setup(nextProps);
    const prevCall = this.props.call;
    // Switch to Meet if ringing
    if (call && !prevCall) {
      nextProps.updateActivityType(`meet`);
    }

    // Reset back to message view after call ends
    if (prevCall && prevCall.getIn([`callState`, `connected`])
      && (!call || !call.getIn([`callState`, `connected`]))) {
      nextProps.updateActivityType(`message`);
    }
  }

  shouldComponentUpdate(nextProps) {
    return nextProps !== this.props;
  }

  componentWillUnmount() {
    this.props.sparkInstance.internal.mercury.disconnect().then(() => this.props.removeWidget());
  }

  @autobind
  setup(props) { // eslint-disable-line complexity
    const {
      conversation,
      spaceId,
      sparkInstance,
      sparkState,
      mercury,
      metrics,
      user,
      spaceDetails,
      toPersonEmail,
      toPersonId,
      widgetStatus
    } = props;

    if (sparkInstance && sparkState.get(`authenticated`) && sparkState.get(`registered`)) {
      // Get current user details
      if (!user.getIn([`status`, `isFetchingCurrentUser`]) && !user.get(`currentUser`)) {
        props.fetchCurrentUser(sparkInstance);
      }

      if (!widgetStatus.get(`isFetchingSpaceDetails`) && !widgetStatus.get(`hasError`) && !spaceDetails) {
        if (spaceId) {
          props.getSpaceDetails(sparkInstance, spaceId);
        }
        // Hack until we find a way to get a one-on-one space's details before loading conversation
        else if (toPersonEmail || toPersonId) {
          props.storeSpaceDetails({
            type: `direct`
          });
        }
      }

      // Setup Web Sockets
      if (!mercury.getIn([`status`, `hasConnected`])
        && !mercury.getIn([`status`, `isConnecting`])
        && !mercury.getIn([`status`, `isConnected`])
        && sparkInstance.internal.device.registered) {
        props.connectToMercury(sparkInstance);
      }

      if (conversation.get(`id`)) {
        metrics.sendEndMetric(metricEvents.WIDGET_LOAD);
      }

    }
  }

  @autobind
  handleActivityChange(activity) {
    this.props.updateActivityType(activity);
  }

  @autobind
  handleMenuClick() {
    this.props.toggleActivityMenuVisible();
  }

  /**
   * Builds widget elements from activityTypes list
   *
   * @param {List} activityTypes Immutable List of activity types
   * @param {String} activityType Active activity type
   * @returns Array of Widget elements
   */
  @autobind
  constructActivityWidgets(activityTypes, activityType) {
    return activityTypes.toJS().map((a) => {
      // Only allow widget if it's available for this space type
      const Widget = a.component;
      const isVisible = activityType === a.name ? `` : styles.hidden;
      return (
        <div
          className={classNames(`ciscospark-${a.name}-wrapper`, styles.activityComponentWrapper, isVisible)}
          key={a.name}
        >
          <Widget {...this.props} eventNames={eventNames} injectProvider={false} />
        </div>
      );
    });
  }

  render() {
    const props = this.props;
    const {
      activityTypes,
      media,
      sparkInstance,
      spaceDetails,
      widgetError,
      widgetSpace,
      widgetStatus
    } = props;

    const {formatMessage} = props.intl;
    if (widgetError.get(`hasError`)) {
      const errorTitle = widgetError.get(`errorTitle`);
      const errorSubtitle = widgetError.get(`errorSubtitle`);
      return (
        <div className={classNames(`ciscospark-space-widget`, styles.spaceWidget)}>
          <ErrorDisplay
            secondaryTitle={errorSubtitle}
            title={errorTitle}
          />
        </div>
      );
    }
    else if (sparkInstance && spaceDetails) {
      // Construct widgets
      const activityType = widgetSpace.get(`activityType`);
      const widgets = this.constructActivityWidgets(activityTypes, activityType);
      const spaceTitle = spaceDetails.get(`title`) || `Loading...`;
      const spaceAvatar = typeof spaceDetails.get(`avatar`) === `string` ? spaceDetails.get(`avatar`) : undefined;
      const callStartTime = media.get(`callStartTime`);
      return (
        <div className={classNames(`ciscospark-space-widget`, styles.spaceWidget)}>
          {
            widgetStatus.get(`activityMenuVisible`) &&
            <div className={classNames(`ciscospark-activity-menu-wrapper`, styles.activityMenuWrapper)}>
              <ActivityMenu
                activityTypes={activityTypes}
                onChange={this.handleActivityChange}
                onExit={this.handleMenuClick}
              />
            </div>
          }
          <div className={classNames(`ciscospark-title-bar-wrapper`, styles.titleBarWrapper)}>
            <TitleBar image={spaceAvatar} name={spaceTitle}>
              {
                callStartTime &&
                <div className={classNames(`ciscospark-title-bar-call-timer`, styles.callTimer)}>
                  <Timer startTime={callStartTime} />
                </div>
              }
              <div className={classNames(`ciscospark-activity-menu-button-wrapper`, styles.activityMenuButtonWrapper)}>
                <div className={classNames(`ciscospark-activity-menu-button`, styles.activityMenuButton)}>
                  <Button accessibilityLabel={`Main Menu`} iconType={ICON_TYPE_WAFFLE} onClick={this.handleMenuClick} />
                </div>
              </div>
            </TitleBar>
          </div>
          <div className={classNames(`ciscospark-widget-body`, styles.widgetBody)}>
            {widgets}
          </div>
        </div>
      );
    }

    return <LoadingScreen loadingMessage={formatMessage(messages.loadingMessage)} />;
  }
}

const injectedPropTypes = {
  activityTypes: PropTypes.object,
  conversation: PropTypes.object,
  media: PropTypes.object,
  mercury: PropTypes.object,
  sparkInstance: PropTypes.object,
  user: PropTypes.object,
  widgetError: PropTypes.object,
  widgetSpace: PropTypes.object,
  connectToMercury: PropTypes.func,
  getSpaceDetails: PropTypes.func,
  storeActivityTypes: PropTypes.func,
  storeSpaceDetails: PropTypes.func,
  toggleActivityMenuVisible: PropTypes.func,
  updateActivityType: PropTypes.func,
  call: PropTypes.object
};

export const ownPropTypes = {
  customActivityTypes: PropTypes.object,
  initialActivity: PropTypes.string,
  muteNotifications: PropTypes.bool,
  spaceId: PropTypes.string,
  startCall: PropTypes.bool,
  toPersonEmail: PropTypes.string,
  toPersonId: PropTypes.string
};

SpaceWidget.propTypes = {
  ...injectedPropTypes,
  ...ownPropTypes
};

SpaceWidget.defaultProps = {
  initialActivity: `message`
};

function mapStateToProps(state, props) {
  return getSpaceWidgetProps(state, props);
}

export default connect(
  mapStateToProps,
  (dispatch) => bindActionCreators({
    connectToMercury,
    getSpaceDetails,
    fetchCurrentUser,
    getSpaceWidgetProps,
    storeActivityTypes,
    storeSpaceDetails,
    toggleActivityMenuVisible,
    updateActivityType
  }, dispatch)
)(SpaceWidget);
