import {compose, lifecycle} from 'recompose';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';

import {events as metricEvents} from '@ciscospark/react-redux-spark-metrics';
import {fetchAvatar} from '@ciscospark/redux-module-avatar';

import {
  getSpaceDetails,
  storeDestination,
  storeSpaceDetails
} from '../actions';

import {getSpaceWidgetProps} from '../selector';

import {destinationTypes} from '../';

function setup(props) {
  const {
    conversation,
    destination,
    destinationId,
    destinationType,
    errors,
    spaceId,
    sparkInstance,
    sparkState,
    toPersonEmail,
    toPersonId,
    metrics,
    spaceDetails,
    widgetStatus
  } = props;

  if (sparkInstance
    && sparkState.get('authenticated')
    && sparkState.get('registered')
    && !sparkState.get('hasError')) {
    if (!widgetStatus.isFetchingSpaceDetails && !errors.get('hasError') && !spaceDetails) {
      // If the selector isn't returning a destination object and we have props for them, store
      if (destination) {
        // Use destination object from store to fetch space details
        // Instead of using props because of legacy prop support
        props.getSpaceDetails({
          sparkInstance,
          destinationId: destination.id,
          destinationType: destination.type,
          intl: props.intl
        });
      }
      else if (destinationType && destinationId) {
        props.storeDestination({type: destinationType, id: destinationId});
      }
      else if (spaceId) {
        sparkInstance.logger.warn('The Space ID property is deprecated. Please use Destination ID and Type instead.');
        props.storeDestination({type: destinationTypes.SPACEID, id: spaceId});
      }
      else if (toPersonEmail) {
        sparkInstance.logger.warn('The To Person Email property is deprecated. Please use Destination ID and Type instead.');
        props.storeDestination({type: destinationTypes.EMAIL, id: toPersonEmail});
      }
      else if (toPersonId) {
        sparkInstance.logger.warn('The To Person ID property is deprecated. Please use Destination ID and Type instead.');
        props.storeDestination({type: destinationTypes.USERID, id: toPersonId});
      }
    }

    if (conversation.get('id')) {
      metrics.sendEndMetric(metricEvents.WIDGET_LOAD);
      props.fetchAvatar({space: conversation.toJS()}, sparkInstance);
    }
  }
}

export default compose(
  connect(
    getSpaceWidgetProps,
    (dispatch) => bindActionCreators({
      getSpaceDetails,
      storeDestination,
      storeSpaceDetails,
      fetchAvatar
    }, dispatch)
  ),
  lifecycle({
    componentWillMount() {
      setup(this.props);
    },
    shouldComponentUpdate(nextProps) {
      return nextProps !== this.props;
    },
    componentWillReceiveProps(nextProps) {
      setup(nextProps);
    }
  })
);
