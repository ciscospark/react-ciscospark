import {validateAndDecodeId} from '@ciscospark/react-component-utils';

export const FETCH_SPACE_ERROR = `widget-space/FETCH_SPACE_ERROR`;
export const FETCHING_SPACE_DETAILS = `widget-space/FETCHING_SPACE_DETAILS`;
export const STORE_ACTIVITY_TYPES = `widget-space/STORE_ACTIVITY_TYPES`;
export const STORE_SPACE_DETAILS = `widget-space/STORE_SPACE_DETAILS`;
export const TOGGLE_ACTIVITY_MENU_VISIBLE = `widget-space/TOGGLE_ACTIVITY_MENU_VISIBLE`;
export const UPDATE_ACTIVITY_TYPE = `widget-space/UPDATE_ACTIVITY_TYPE`;
export const UPDATE_ACTIVITY_MENU_VISIBLE = `widget-space/UPDATE_ACTIVITY_MENU_VISIBLE`;

function fetchSpaceError(error) {
  return {
    type: FETCH_SPACE_ERROR,
    payload: {
      error
    }
  };
}

export function updateActivityType(type) {
  return {
    type: UPDATE_ACTIVITY_TYPE,
    payload: {
      type
    }
  };
}

export function updateActivityMenuVisible(isActivityMenuVisible) {
  return {
    type: UPDATE_ACTIVITY_MENU_VISIBLE,
    payload: {
      isActivityMenuVisible
    }
  };
}

export function toggleActivityMenuVisible() {
  return {
    type: TOGGLE_ACTIVITY_MENU_VISIBLE
  };
}

export function storeSpaceDetails(details) {
  return {
    type: STORE_SPACE_DETAILS,
    payload: {
      details
    }
  };
}

export function storeActivityTypes(activityTypes) {
  return {
    type: STORE_ACTIVITY_TYPES,
    payload: {
      activityTypes
    }
  };
}


function fetchingSpaceDetails() {
  return {
    type: FETCHING_SPACE_DETAILS
  };
}

/**
 * Gets details about the space
 * @param {Object} sparkInstance
 * @param {String} spaceId
 * @returns {Thunk}
 */
export function getSpaceDetails(sparkInstance, spaceId) {
  return (dispatch) => {
    const spaceIdUUID = validateAndDecodeId(spaceId);
    if (!spaceIdUUID) {
      const badSpaceId = `Bad Space Id`;
      const error = new Error(badSpaceId);
      error.name = badSpaceId;
      return dispatch(fetchSpaceError(error));
    }
    dispatch(fetchingSpaceDetails());
    return sparkInstance.request({
      service: `hydra`,
      resource: `/rooms/${spaceIdUUID}`
    })
    .then((res) => dispatch(storeSpaceDetails(res.body)))
    .catch((error) => dispatch(fetchSpaceError(error)));
  };
}
