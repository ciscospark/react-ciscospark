/* global ciscospark */
import React, {Component} from 'react';
import classNames from 'classnames';
import {Cookies, withCookies} from 'react-cookie';
import {instanceOf} from 'prop-types';
import {autobind} from 'core-decorators';

import RaisedButton from 'material-ui/RaisedButton';
import AppBar from 'material-ui/AppBar';
import {RadioButtonGroup, RadioButton} from 'material-ui/RadioButton';
import {Card, CardActions, CardTitle, CardText} from 'material-ui/Card';
import Checkbox from 'material-ui/Checkbox';

import TokenInput from '../token-input';

import styles from './styles.css';

const MODE_ONE_ON_ONE_ID = 'userId';
const MODE_ONE_ON_ONE = 'email';
const MODE_SPACE = 'spaceId';

const DESTINATION_PROP_MODE_LEGACY = 'DESTINATION_PROP_MODE_LEGACY';
const DESTINATION_PROP_MODE_MAIN = 'DESTINATION_PROP_MODE_MAIN';

const spaceWidgetElementId = 'my-ciscospark-space-widget';
const recentsWidgetElementId = 'my-ciscospark-recents-widget';

class DemoWidget extends Component {
  constructor(props) {
    super(props);
    const {cookies} = this.props;
    const mode = cookies.get('destinationMode') || MODE_SPACE;
    const destinationPropMode = cookies.get('destinationPropMode') || DESTINATION_PROP_MODE_MAIN;
    const destinationId = cookies.get('destinationId') || '';
    this.state = {
      activities: {
        files: true,
        meet: true,
        message: true,
        people: true
      },
      accessToken: cookies.get('accessToken') || '',
      accessTokenType: cookies.get('accessTokenType') || '',
      destinationId,
      destinationPropMode,
      mode,
      spaceRunning: false
    };
  }

  shouldComponentUpdate() {
    return true;
  }

  getDestinationLabels() {
    let ariaLabel, placeholder;
    switch (this.state.mode) {
      case MODE_ONE_ON_ONE:
        ariaLabel = 'To User Email';
        placeholder = 'Spark User Email (For 1:1)';
        break;
      case MODE_ONE_ON_ONE_ID:
        ariaLabel = 'To User Id';
        placeholder = 'Spark User Id (For 1:1)';
        break;
      case MODE_SPACE:
        ariaLabel = 'To Space ID';
        placeholder = 'Spark Space Id';
        break;
      default: {
        ariaLabel = 'unknown mode';
        placeholder = 'Please pick a type';
      }
    }
    return {
      ariaLabel,
      placeholder
    };
  }

  @autobind
  handleOpenSpaceWidget(e) {
    e.preventDefault();
    const {cookies} = this.props;
    cookies.set('accessToken', this.state.accessToken);
    cookies.set('accessTokenType', this.state.accessTokenType);
    cookies.set('destinationId', this.state.destinationId);
    cookies.set('destinationMode', this.state.mode);
    cookies.set('destinationPropMode', this.state.destinationPropMode);

    const toPerson = this.state.mode === MODE_ONE_ON_ONE ? this.state.destinationId : '';
    const toPersonId = this.state.mode === MODE_ONE_ON_ONE_ID ? this.state.destinationId : '';
    const toSpace = this.state.mode === MODE_SPACE ? this.state.destinationId : '';
    this.openSpaceWidget({
      toPerson,
      toPersonId,
      toSpace,
      destinationId: this.state.destinationId,
      destinationType: this.state.mode
    });
  }

  @autobind
  handleOpenRecentsWidget(e) {
    e.preventDefault();
    const {cookies} = this.props;
    cookies.set('accessToken', this.state.accessToken);
    cookies.set('accessTokenType', this.state.accessTokenType);
    const widgetEl = document.getElementById(recentsWidgetElementId);
    const widgetOptions = {
      onEvent: (eventName, detail) => {
        window.ciscoSparkEvents.push({eventName, detail});
        if (eventName === 'rooms:selected') {
          const spaceId = detail.data.id;
          if (this.state.spaceRunning) {
            this.handleRemove();
          }
          this.openSpaceWidget({toSpace: spaceId});
        }
      }
    };
    if (this.state.accessTokenType === 'JWT') {
      widgetOptions.guestToken = this.state.accessToken;
    }
    else {
      widgetOptions.accessToken = this.state.accessToken;
    }
    ciscospark.widget(widgetEl).recentsWidget(widgetOptions);
    this.setState({recentsRunning: true});
  }

  @autobind
  handleRemove() {
    const widgetEl = document.getElementById(spaceWidgetElementId);
    ciscospark.widget(widgetEl).remove();
    this.setState({spaceRunning: false});
  }

  @autobind
  handleRecentsRemove() {
    const widgetEl = document.getElementById(recentsWidgetElementId);
    ciscospark.widget(widgetEl).remove();
    this.setState({recentsRunning: false});
  }

  @autobind
  handleAccessTokenChange(accessToken, accessTokenType) {
    return this.setState({accessToken, accessTokenType});
  }

  @autobind
  handleModeChange(e, value) {
    return this.setState({mode: value, destinationId: ''});
  }

  @autobind
  handleActivitiesChange(event, isInputChecked) {
    const {activities} = this.state;
    activities[event.target.value] = isInputChecked;
    return this.setState({activities});
  }

  @autobind
  handleDestinationChange(e) {
    return this.setState({destinationId: e.target.value});
  }

  @autobind
  handleDestinationPropTypeChange(e, value) {
    return this.setState({destinationPropMode: value});
  }

  @autobind
  openSpaceWidget({
    destinationId, destinationType, toPerson, toPersonId, toSpace
  }) {
    const widgetEl = document.getElementById(spaceWidgetElementId);
    const widgetOptions = {
      initialActivity: 'message',
      onEvent: (eventName, detail) => {
        window.ciscoSparkEvents.push({eventName, detail});
      },
      spaceActivities: this.state.activities
    };
    if (this.state.accessTokenType === 'JWT') {
      widgetOptions.guestToken = this.state.accessToken;
    }
    else {
      widgetOptions.accessToken = this.state.accessToken;
    }
    if (this.state.destinationPropMode === DESTINATION_PROP_MODE_LEGACY) {
      if (toPersonId) {
        widgetOptions.toPersonId = toPersonId;
      }
      if (toPerson) {
        widgetOptions.toPersonEmail = toPerson;
      }
      if (toSpace) {
        widgetOptions.spaceId = toSpace;
      }
    }
    else {
      widgetOptions.destinationId = destinationId;
      widgetOptions.destinationType = destinationType;
    }
    ciscospark.widget(widgetEl).spaceWidget(widgetOptions);
    this.setState({spaceRunning: true});
  }

  render() {
    const loadButtonEnabled = this.state.accessToken && this.state.destinationId && !this.state.spaceRunning;
    const loadRecentsButtonEnabled = this.state.accessToken && !this.state.recentsRunning;
    const componentSpaceContainerClassNames = [
      styles.widgetSpaceComponentContainer
    ];
    if (!this.state.spaceRunning) {
      componentSpaceContainerClassNames.push(styles.hidden);
    }
    const componentRecentsContainerClassNames = [
      styles.widgetRecentsComponentContainer
    ];
    if (!this.state.recentsRunning) {
      componentRecentsContainerClassNames.push(styles.hidden);
    }
    const runningDemosContainerClassNames = [
      styles.runningDemosContainer
    ];
    if (!this.state.spaceRunning && !this.state.recentsRunning) {
      runningDemosContainerClassNames.push(styles.hidden);
    }

    const {
      ariaLabel,
      placeholder
    } = this.getDestinationLabels();

    // eslint-disable-reason should not apply to jsx/html markup
    /* eslint-disable max-len */
    return (
      <div>
        <AppBar title="Cisco Spark Widget" />
        <div className={classNames('ciscospark-demo-wrapper', styles.demoWrapper)}>
          <Card initiallyExpanded style={{margin: '10px'}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              subtitle="The Cisco Spark widgets allow developers to easily incorporate Cisco Spark Widgets into an application."
              title="Cisco Spark Widget Demo"
            />
            <CardText expandable>
              Our widgets are built using <a href="https://github.com/facebook/react">React</a>, <a href="https://github.com/reactjs/redux">Redux</a>, and the <a href="https://github.com/webex/spark-js-sdk">Spark Javascript SDK </a>.
            </CardText>
          </Card>
          <TokenInput onLogin={this.handleAccessTokenChange} token={this.state.accessToken} tokenType={this.state.accessTokenType} />
          <Card initiallyExpanded style={{margin: '10px'}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              subtitle="Cisco Spark Space Widget can open to a space or person."
              title="Cisco Spark Space Widget"
            />
            <CardText expandable>
              <h3> Widget Destination Type </h3>
              <div className={classNames(styles.select)}>
                <RadioButtonGroup
                  aria-label="Widget 'To' Type"
                  name="toType"
                  onChange={this.handleModeChange}
                  valueSelected={this.state.mode}
                >
                  <RadioButton
                    aria-label="To Space"
                    label="To Space"
                    value={MODE_SPACE}
                  />
                  <RadioButton
                    aria-label="To Person Email"
                    label="To Person"
                    value={MODE_ONE_ON_ONE}
                  />
                  <RadioButton
                    aria-label="To Person Id"
                    label="To Person Id"
                    value={MODE_ONE_ON_ONE_ID}
                  />
                </RadioButtonGroup>
              </div>

              <div>
                <h3> Widget Activities </h3>
                <Checkbox
                  checked={this.state.activities.files}
                  label="Files"
                  onCheck={this.handleActivitiesChange}
                  value="files"
                />
                <Checkbox
                  checked={this.state.activities.meet}
                  label="Meet"
                  onCheck={this.handleActivitiesChange}
                  value="meet"
                />
                <Checkbox
                  checked={this.state.activities.message}
                  label="Message"
                  onCheck={this.handleActivitiesChange}
                  value="message"
                />
                <Checkbox
                  checked={this.state.activities.people}
                  label="People"
                  onCheck={this.handleActivitiesChange}
                  value="people"
                />
              </div>

              <div className={classNames(styles.select)}>
                <h3>Widget Destination Prop Type</h3>
                <RadioButtonGroup
                  aria-label="Widget 'Destination Prop' Type"
                  name="destinationType"
                  onChange={this.handleDestinationPropTypeChange}
                  valueSelected={this.state.destinationPropMode}
                >
                  <RadioButton
                    aria-label="Destination ID & Type Mode"
                    label="Destination ID & Type Mode"
                    value={DESTINATION_PROP_MODE_MAIN}
                  />
                  <RadioButton
                    aria-label="Destination Legacy Mode"
                    label="Destination Legacy Mode"
                    value={DESTINATION_PROP_MODE_LEGACY}
                  />
                </RadioButtonGroup>
              </div>
              <div>
                <input
                  aria-label={ariaLabel}
                  className={styles.textInput}
                  id="destinationId"
                  onChange={this.handleDestinationChange}
                  placeholder={placeholder}
                  value={this.state.destinationId}
                />
              </div>
            </CardText>
            <CardActions expandable>
              <RaisedButton
                aria-label="Open Widget"
                disabled={!loadButtonEnabled}
                id="openWidgetButton"
                label="Open Space Widget"
                onClick={this.handleOpenSpaceWidget}
                primary
              />
              <RaisedButton
                aria-label="Remove Widget"
                disabled={!this.state.spaceRunning}
                id="removeWidgetButton"
                label="Remove Space Widget"
                onClick={this.handleRemove}
                primary
              />
            </CardActions>
          </Card>
          <Card initiallyExpanded style={{margin: '10px'}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              title="Cisco Spark Recents Widget Demo"
            />
            <CardActions expandable>
              <RaisedButton
                aria-label="Open Recents Widget"
                disabled={!loadRecentsButtonEnabled}
                label="Open Recents Widget"
                onClick={this.handleOpenRecentsWidget}
                primary
              />
              <RaisedButton
                aria-label="Remove Recents Widget"
                disabled={!this.state.recentsRunning}
                id="removeRecentsWidgetButton"
                label="Remove Recents Widget"
                onClick={this.handleRecentsRemove}
                primary
              />
            </CardActions>
          </Card>
          <div className={classNames(runningDemosContainerClassNames)}>
            <div className={classNames(componentSpaceContainerClassNames)}>
              <div id={spaceWidgetElementId} />
            </div>
            <div className={classNames(componentRecentsContainerClassNames)}>
              <div id={recentsWidgetElementId} />
            </div>
          </div>
        </div>
      </div>
    );
  }
}

DemoWidget.propTypes = {
  cookies: instanceOf(Cookies).isRequired
};

DemoWidget.title = 'Widget Demo';
DemoWidget.path = '/widget-demo';

export default withCookies(DemoWidget);
