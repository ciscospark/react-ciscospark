/* global ciscospark */
import React, {Component} from 'react';
import classNames from 'classnames';
import {Cookies, withCookies} from 'react-cookie';
import {instanceOf} from 'prop-types';
import {autobind} from 'core-decorators';

import RaisedButton from 'material-ui/RaisedButton';
import AppBar from 'material-ui/AppBar';
import {Card, CardActions, CardTitle, CardText} from 'material-ui/Card';

import SpaceWidget from '@ciscospark/widget-space';

import TokenInput from '@webex/private-react-component-token-input';
import SpaceDestination, {constants as destinationConstants} from '@webex/private-react-component-space-destination';

import styles from './styles.css';

const {
  DESTINATION_PROP_MODE_LEGACY,
  DESTINATION_PROP_MODE_MAIN,
  MODE_ONE_ON_ONE,
  MODE_ONE_ON_ONE_ID,
  MODE_SPACE,
  MODE_SIP,
  MODE_PSTN
} = destinationConstants;

const spaceWidgetElementId = 'my-ciscospark-space-widget';
const recentsWidgetElementId = 'my-ciscospark-recents-widget';

class DemoWidget extends Component {
  constructor(props) {
    super(props);
    const {cookies} = this.props;
    const mode = cookies.get('destinationMode') || MODE_SPACE;
    const destinationPropMode = cookies.get('destinationPropMode') || DESTINATION_PROP_MODE_MAIN;
    const destinationId = cookies.get('destinationId') || '';
    const isMeetOnly = [MODE_SIP, MODE_PSTN].includes(mode);
    const activities = cookies.get('activities') || {
      files: true,
      meet: true,
      message: true,
      people: true
    };
    this.state = {
      activities: {
        files: isMeetOnly ? false : activities.files,
        meet: activities.meet,
        message: isMeetOnly ? false : activities.message,
        people: activities.people
      },
      accessToken: cookies.get('accessToken') || '',
      accessTokenType: cookies.get('accessTokenType') || '',
      destinationId,
      destinationPropMode,
      initialActivity: isMeetOnly ? 'meet' : cookies.get('initialActivity') || 'message',
      mode,
      spaceRunning: false,
      spaceWidgetProps: {}
    };
  }

  shouldComponentUpdate() {
    return true;
  }

  @autobind
  handleOpenSpaceWidget(e) {
    e.preventDefault();
    const {cookies} = this.props;
    cookies.set('accessToken', this.state.accessToken);
    cookies.set('accessTokenType', this.state.accessTokenType);
    cookies.set('activities', this.state.activities);
    cookies.set('destinationId', this.state.destinationId);
    cookies.set('destinationMode', this.state.mode);
    cookies.set('destinationPropMode', this.state.destinationPropMode);
    cookies.set('initialActivity', this.state.initialActivity);

    const toPerson = this.state.mode === MODE_ONE_ON_ONE ? this.state.destinationId : '';
    const toPersonId = this.state.mode === MODE_ONE_ON_ONE_ID ? this.state.destinationId : '';
    const toSpace = this.state.mode === MODE_SPACE ? this.state.destinationId : '';
    this.openSpaceWidget({
      toPerson,
      toPersonId,
      toSpace,
      destinationId: this.state.destinationId,
      destinationType: this.state.mode
    });
  }

  @autobind
  handleOpenRecentsWidget(e) {
    e.preventDefault();
    const {cookies} = this.props;
    cookies.set('accessToken', this.state.accessToken);
    cookies.set('accessTokenType', this.state.accessTokenType);
    const widgetEl = document.getElementById(recentsWidgetElementId);
    const widgetOptions = {
      onEvent: (eventName, detail) => {
        window.ciscoSparkEvents.push({eventName, detail});
        if (eventName === 'rooms:selected') {
          const spaceId = detail.data.id;
          if (this.state.spaceRunning) {
            this.handleRemove();
          }
          this.openSpaceWidget({
            destinationType: 'spaceId',
            destinationId: spaceId,
            toSpace: spaceId
          });
        }
      }
    };
    if (this.state.accessTokenType === 'JWT') {
      widgetOptions.guestToken = this.state.accessToken;
    }
    else {
      widgetOptions.accessToken = this.state.accessToken;
    }
    ciscospark.widget(widgetEl).recentsWidget(widgetOptions);
    this.setState({recentsRunning: true});
  }

  @autobind
  handleRemove() {
    const widgetEl = document.getElementById(spaceWidgetElementId);
    ciscospark.widget(widgetEl).remove();
    this.setState({spaceRunning: false});
  }

  @autobind
  handleRecentsRemove() {
    const widgetEl = document.getElementById(recentsWidgetElementId);
    ciscospark.widget(widgetEl).remove();
    this.setState({recentsRunning: false});
  }

  @autobind
  handleAccessTokenChange(accessToken, accessTokenType) {
    return this.setState({accessToken, accessTokenType});
  }

  @autobind
  handleModeChange(e, value) {
    const newState = {destinationId: ''};
    newState.activities = this.state.activities;
    if ([MODE_SIP, MODE_PSTN].includes(value)) {
      newState.initialActivity = 'meet';
      newState.activities.files = false;
      newState.activities.message = false;
    }
    newState.mode = value;
    return this.setState(newState);
  }

  @autobind
  handleActivitiesChange(event, isInputChecked) {
    const {activities} = this.state;
    activities[event.target.value] = isInputChecked;
    return this.setState({activities});
  }

  @autobind
  handleDestinationChange(e) {
    return this.setState({destinationId: e.target.value});
  }

  @autobind
  handleDestinationPropTypeChange(e, value) {
    return this.setState({destinationPropMode: value});
  }

  @autobind
  handleInitialActivityChange(e, value) {
    return this.setState({initialActivity: value});
  }

  @autobind
  openSpaceWidget({
    destinationId, destinationType, toPerson, toPersonId, toSpace
  }) {
    const widgetOptions = {
      initialActivity: this.state.initialActivity,
      onEvent: (eventName, detail) => {
        window.ciscoSparkEvents.push({eventName, detail});
      },
      spaceActivities: this.state.activities
    };
    if (this.state.accessTokenType === 'JWT') {
      widgetOptions.guestToken = this.state.accessToken;
    }
    else {
      widgetOptions.accessToken = this.state.accessToken;
    }
    if (this.state.destinationPropMode === DESTINATION_PROP_MODE_LEGACY) {
      if (toPersonId) {
        widgetOptions.toPersonId = toPersonId;
      }
      if (toPerson) {
        widgetOptions.toPersonEmail = toPerson;
      }
      if (toSpace) {
        widgetOptions.spaceId = toSpace;
      }
    }
    else {
      widgetOptions.destinationId = destinationId;
      widgetOptions.destinationType = destinationType;
    }
    this.setState({spaceRunning: true, spaceWidgetProps: widgetOptions});
  }

  render() {
    const loadButtonEnabled = this.state.accessToken && this.state.destinationId;
    const loadRecentsButtonEnabled = this.state.accessToken && !this.state.recentsRunning;
    const componentSpaceContainerClassNames = [
      styles.widgetSpaceComponentContainer
    ];
    if (!this.state.spaceRunning) {
      componentSpaceContainerClassNames.push(styles.hidden);
    }
    const componentRecentsContainerClassNames = [
      styles.widgetRecentsComponentContainer
    ];
    if (!this.state.recentsRunning) {
      componentRecentsContainerClassNames.push(styles.hidden);
    }
    const runningDemosContainerClassNames = [
      styles.runningDemosContainer
    ];
    if (!this.state.spaceRunning && !this.state.recentsRunning) {
      runningDemosContainerClassNames.push(styles.hidden);
    }

    // eslint-disable-reason should not apply to jsx/html markup
    /* eslint-disable max-len */
    return (
      <div>
        <AppBar title="Webex Teams Widget" />
        <div className={classNames('ciscospark-demo-wrapper', styles.demoWrapper)}>
          <Card initiallyExpanded style={{margin: '10px'}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              subtitle="The Webex Teams widgets allow developers to easily incorporate Webex Teams Widgets into an application."
              title="Webex Teams Widget Demo"
            />
            <CardText expandable>
              Our widgets are built using <a href="https://github.com/facebook/react">React</a>, <a href="https://github.com/reactjs/redux">Redux</a>, and the <a href="https://github.com/webex/spark-js-sdk">Webex Teams Javascript SDK </a>.
            </CardText>
          </Card>
          <TokenInput onLogin={this.handleAccessTokenChange} token={this.state.accessToken} tokenType={this.state.accessTokenType} />
          <Card initiallyExpanded style={{margin: '10px'}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              subtitle="Webex Teams Space Widget can open to a space or person."
              title="Webex Teams Space Widget"
            />

            <CardText expandable>
              <SpaceDestination
                activities={this.state.activities}
                destinationId={this.state.destinationId}
                destinationPropMode={this.state.destinationPropMode}
                initialActivity={this.state.initialActivity}
                mode={this.state.mode}
                onActivitiesChange={this.handleActivitiesChange}
                onDestinationChange={this.handleDestinationChange}
                onDestinationPropTypeChange={this.handleDestinationPropTypeChange}
                onInitialActivityChange={this.handleInitialActivityChange}
                onModeChange={this.handleModeChange}
              />
            </CardText>

            <CardActions expandable>
              <RaisedButton
                aria-label={this.state.spaceRunning ? 'Update Space Widget' : 'Open Space Widget'}
                disabled={!loadButtonEnabled}
                id="openWidgetButton"
                label={this.state.spaceRunning ? 'Update Space Widget' : 'Open Space Widget'}
                onClick={this.handleOpenSpaceWidget}
                primary
              />
              <RaisedButton
                aria-label="Remove Widget"
                disabled={!this.state.spaceRunning}
                id="removeWidgetButton"
                label="Remove Space Widget"
                onClick={this.handleRemove}
                primary
              />
            </CardActions>
          </Card>
          <Card initiallyExpanded style={{margin: '10px'}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              title="Webex Teams Recents Widget Demo"
            />
            <CardActions expandable>
              <RaisedButton
                aria-label="Open Recents Widget"
                disabled={!loadRecentsButtonEnabled}
                label="Open Recents Widget"
                onClick={this.handleOpenRecentsWidget}
                primary
              />
              <RaisedButton
                aria-label="Remove Recents Widget"
                disabled={!this.state.recentsRunning}
                id="removeRecentsWidgetButton"
                label="Remove Recents Widget"
                onClick={this.handleRecentsRemove}
                primary
              />
            </CardActions>
          </Card>
          <div className={classNames(runningDemosContainerClassNames)}>
            <div className={classNames(componentSpaceContainerClassNames)}>
              <div id={spaceWidgetElementId}>
                { this.state.spaceRunning &&
                  <SpaceWidget {...this.state.spaceWidgetProps} />
                }
              </div>
            </div>
            <div className={classNames(componentRecentsContainerClassNames)}>
              <div id={recentsWidgetElementId} />
            </div>
          </div>
        </div>
      </div>
    );
  }
}

DemoWidget.propTypes = {
  cookies: instanceOf(Cookies).isRequired
};

DemoWidget.title = 'Widget Demo';
DemoWidget.path = '/widget-demo';

export default withCookies(DemoWidget);
