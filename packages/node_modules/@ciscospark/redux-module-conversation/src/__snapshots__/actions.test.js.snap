// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`redux-module-conversation actions #acknowledgeActivityOnServer can acknowledge an activity 1`] = `
Array [
  Object {
    "payload": Object {
      "activity": Object {
        "id": "activity-to-acknowledge",
      },
    },
    "type": "conversation/ACKNOWLEDGE_ACTIVITY",
  },
]
`;

exports[`redux-module-conversation actions #addParticipant can add a participant 1`] = `
Array [
  Object {
    "payload": Object {
      "participant": Object {
        "id": "add-me",
      },
    },
    "type": "conversation/ADD_PARTICIPANT",
  },
]
`;

exports[`redux-module-conversation actions #addParticipantToConversation can handle an error from adding a participant to a conversation 1`] = `
Array [
  Object {
    "payload": Object {
      "participant": Object {},
    },
    "type": "conversation/ADD_PARTICIPANT_INFLIGHT",
  },
  Object {
    "payload": Object {
      "conversationState": Object {
        "addParticipantError": [Error: Nope. Not going to happen.],
      },
    },
    "type": "conversation/UPDATE_CONVERSATION_STATE",
  },
]
`;

exports[`redux-module-conversation actions #addParticipantToConversation can start the request to add a participant to a conversation 1`] = `
Array [
  Object {
    "payload": Object {
      "participant": Object {},
    },
    "type": "conversation/ADD_PARTICIPANT_INFLIGHT",
  },
  Object {
    "payload": Object {
      "conversationState": Object {
        "addParticipantError": null,
      },
    },
    "type": "conversation/UPDATE_CONVERSATION_STATE",
  },
]
`;

exports[`redux-module-conversation actions #addParticipantToConversation can start the request to add a participant to a conversation via email 1`] = `
Array [
  Object {
    "payload": Object {
      "participant": Object {
        "displayName": "my@email.net",
        "emailAddress": "my@email.net",
        "id": "my@email.net",
        "name": "my@email.net",
      },
    },
    "type": "conversation/ADD_PARTICIPANT_INFLIGHT",
  },
  Object {
    "payload": Object {
      "conversationState": Object {
        "addParticipantError": null,
      },
    },
    "type": "conversation/UPDATE_CONVERSATION_STATE",
  },
]
`;

exports[`redux-module-conversation actions #addParticipantToConversation errors when sending a participant string that isn't an email 1`] = `
Array [
  Object {
    "payload": Object {
      "conversationState": Object {
        "addParticipantError": [Error: An email is required for string values of 'participant' parameter.],
      },
    },
    "type": "conversation/UPDATE_CONVERSATION_STATE",
  },
]
`;

exports[`redux-module-conversation actions #createConversation can create a conversation 1`] = `
Array [
  Object {
    "type": "conversation/CREATE_CONVERSATION_BEGIN",
  },
  Object {
    "payload": Object {
      "conversation": Object {
        "id": "created-conversation",
        "participants": Object {
          "items": Array [
            Object {
              "id": "this-user-id",
              "roomProperties": Object {
                "isModerator": false,
              },
            },
          ],
        },
        "status": Object {
          "isLocked": false,
          "isModerator": false,
          "isOneOnOne": false,
        },
        "tags": Array [],
      },
    },
    "type": "conversation/CREATE_CONVERSATION",
  },
]
`;

exports[`redux-module-conversation actions #createConversation can create a conversation with hydra ids 1`] = `
Array [
  Array [
    Object {
      "participants": Array [
        "a1bae992-11b5-49ab-8c0b-e8e8716e1eb0",
      ],
    },
    Object {
      "activitiesLimit": 40,
      "latestActivity": true,
      "participantAckFilter": "all",
    },
  ],
]
`;

exports[`redux-module-conversation actions #createConversation can create a conversation with hydra ids 2`] = `
Array [
  Object {
    "type": "conversation/CREATE_CONVERSATION_BEGIN",
  },
  Object {
    "payload": Object {
      "conversation": Object {
        "id": "created-conversation",
        "participants": Object {
          "items": Array [
            Object {
              "id": "this-user-id",
              "roomProperties": Object {
                "isModerator": false,
              },
            },
          ],
        },
        "status": Object {
          "isLocked": false,
          "isModerator": false,
          "isOneOnOne": false,
        },
        "tags": Array [],
      },
    },
    "type": "conversation/CREATE_CONVERSATION",
  },
]
`;

exports[`redux-module-conversation actions #createConversation handles errors during create a conversation 1`] = `
Array [
  Object {
    "type": "conversation/CREATE_CONVERSATION_BEGIN",
  },
  Object {
    "payload": Object {
      "conversationState": Object {
        "error": "failed. hard.",
      },
    },
    "type": "conversation/UPDATE_CONVERSATION_STATE",
  },
]
`;

exports[`redux-module-conversation actions #deleteActivity can delete an activity 1`] = `
Array [
  Object {
    "payload": Object {
      "activity": Object {},
      "conversation": Object {
        "toJS": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
      },
    },
    "type": "conversation/DELETE_ACTIVITY_FROM_CONVERSATION",
  },
]
`;

exports[`redux-module-conversation actions #getConversation can get a conversation by hydra id 1`] = `
Array [
  Array [
    Object {
      "id": "a1bae992-11b5-49ab-8c0b-e8e8716e1eb0",
    },
    Object {
      "activitiesLimit": 40,
      "includeParticipants": true,
      "latestActivity": true,
      "participantAckFilter": "all",
    },
  ],
]
`;

exports[`redux-module-conversation actions #getConversation can get a conversation by hydra id 2`] = `
Array [
  Object {
    "type": "conversation/CREATE_CONVERSATION_BEGIN",
  },
  Object {
    "payload": Object {
      "conversation": Object {
        "id": "got-conversation",
        "participants": Object {
          "items": Array [
            Object {
              "id": "this-user-id",
              "roomProperties": Object {
                "isModerator": false,
              },
            },
          ],
        },
        "status": Object {
          "isLocked": false,
          "isModerator": false,
          "isOneOnOne": false,
        },
        "tags": Array [],
      },
    },
    "type": "conversation/CREATE_CONVERSATION",
  },
]
`;

exports[`redux-module-conversation actions #getConversation can get a conversation by uuid 1`] = `
Array [
  Object {
    "type": "conversation/CREATE_CONVERSATION_BEGIN",
  },
  Object {
    "payload": Object {
      "conversation": Object {
        "id": "got-conversation",
        "participants": Object {
          "items": Array [
            Object {
              "id": "this-user-id",
              "roomProperties": Object {
                "isModerator": false,
              },
            },
          ],
        },
        "status": Object {
          "isLocked": false,
          "isModerator": false,
          "isOneOnOne": false,
        },
        "tags": Array [],
      },
    },
    "type": "conversation/CREATE_CONVERSATION",
  },
]
`;

exports[`redux-module-conversation actions #getConversation handles errors during get a conversation 1`] = `
Array [
  Object {
    "type": "conversation/CREATE_CONVERSATION_BEGIN",
  },
  Object {
    "payload": Object {
      "conversationState": Object {
        "error": "failed. hard.",
      },
    },
    "type": "conversation/UPDATE_CONVERSATION_STATE",
  },
]
`;

exports[`redux-module-conversation actions #getConversation sets the locked status of a room properly 1`] = `
Array [
  Object {
    "type": "conversation/CREATE_CONVERSATION_BEGIN",
  },
  Object {
    "payload": Object {
      "conversation": Object {
        "id": "got-conversation",
        "participants": Object {
          "items": Array [
            Object {
              "id": "this-user-id",
              "roomProperties": Object {
                "isModerator": false,
              },
            },
          ],
        },
        "status": Object {
          "isLocked": true,
          "isModerator": false,
          "isOneOnOne": false,
        },
        "tags": Array [
          "LOCKED",
        ],
      },
    },
    "type": "conversation/CREATE_CONVERSATION",
  },
]
`;

exports[`redux-module-conversation actions #getConversation sets the moderator status of a room properly 1`] = `
Array [
  Object {
    "type": "conversation/CREATE_CONVERSATION_BEGIN",
  },
  Object {
    "payload": Object {
      "conversation": Object {
        "id": "got-conversation",
        "participants": Object {
          "items": Array [
            Object {
              "id": "this-user-id",
              "roomProperties": Object {
                "isModerator": true,
              },
            },
          ],
        },
        "status": Object {
          "isLocked": true,
          "isModerator": true,
          "isOneOnOne": false,
        },
        "tags": Array [
          "LOCKED",
        ],
      },
    },
    "type": "conversation/CREATE_CONVERSATION",
  },
]
`;

exports[`redux-module-conversation actions #loadMissingActivities can load missing activities 1`] = `
Array [
  Object {
    "payload": Object {
      "conversationState": Object {
        "isLoadingMissing": true,
      },
    },
    "type": "conversation/UPDATE_CONVERSATION_STATE",
  },
  Object {
    "payload": Object {
      "activities": Array [
        Object {
          "mockActivity": "mockActivity",
        },
      ],
    },
    "type": "conversation/ADD_ACTIVITIES_TO_CONVERSATION",
  },
  Object {
    "payload": Object {
      "conversationState": Object {
        "isLoadingMissing": false,
      },
    },
    "type": "conversation/UPDATE_CONVERSATION_STATE",
  },
]
`;

exports[`redux-module-conversation actions #loadPreviousMessages can load previous messages 1`] = `
Array [
  Object {
    "payload": Object {
      "conversationState": Object {
        "isLoadingHistoryUp": true,
      },
    },
    "type": "conversation/UPDATE_CONVERSATION_STATE",
  },
  Object {
    "payload": Object {
      "activities": Array [
        Object {
          "mockActivity": "mockActivity",
        },
      ],
    },
    "type": "conversation/ADD_ACTIVITIES_TO_CONVERSATION",
  },
  Object {
    "payload": Object {
      "conversationState": Object {
        "isLoadingHistoryUp": false,
      },
    },
    "type": "conversation/UPDATE_CONVERSATION_STATE",
  },
]
`;

exports[`redux-module-conversation actions #removeParticipant can remove a participant 1`] = `
Array [
  Object {
    "payload": Object {
      "participant": Object {
        "id": "remove-me",
      },
    },
    "type": "conversation/REMOVE_PARTICIPANT",
  },
]
`;

exports[`redux-module-conversation actions #removeParticipantFromConversation can handle an error from adding a participant to a conversation 1`] = `
Array [
  Object {
    "payload": Object {
      "participant": Object {},
    },
    "type": "conversation/REMOVE_PARTICIPANT_INFLIGHT",
  },
  Object {
    "payload": Object {
      "conversationState": Object {
        "removeParticipantError": [Error: Nope. Not going to happen.],
      },
    },
    "type": "conversation/UPDATE_CONVERSATION_STATE",
  },
]
`;

exports[`redux-module-conversation actions #removeParticipantFromConversation can start the request to remove a participant to a conversation 1`] = `
Array [
  Object {
    "payload": Object {
      "participant": Object {},
    },
    "type": "conversation/REMOVE_PARTICIPANT_INFLIGHT",
  },
  Object {
    "payload": Object {
      "conversationState": Object {
        "removeParticipantError": null,
      },
    },
    "type": "conversation/UPDATE_CONVERSATION_STATE",
  },
]
`;

exports[`redux-module-conversation actions #updateConversationState can update state 1`] = `
Array [
  Object {
    "payload": Object {
      "conversationState": Object {
        "isLoaded": true,
      },
    },
    "type": "conversation/UPDATE_CONVERSATION_STATE",
  },
]
`;
