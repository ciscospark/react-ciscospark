/* eslint-disable max-nested-callbacks */
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

const mockSpark = {
  internal: {
    conversation: {
      acknowledge: jest.fn(() => Promise.resolve()),
      create: jest.fn(() => Promise.resolve({id: `created-conversation`})),
      delete: jest.fn(() => Promise.resolve()),
      get: jest.fn(() => Promise.resolve({id: `got-conversation`})),
      listActivities: jest.fn(() => Promise.resolve([{mockActivity: `mockActivity`}]))
    }
  }
};

import * as actions from './actions';

describe(`redux-module-conversation actions`, () => {
  it(`has exported actions`, () => {
    expect(actions.acknowledgeActivityOnServer).toBeDefined();
    expect(actions.createConversation).toBeDefined();
    expect(actions.deleteActivity).toBeDefined();
    expect(actions.getConversation).toBeDefined();
    expect(actions.loadMissingActivities).toBeDefined();
    expect(actions.loadPreviousMessages).toBeDefined();
  });

  it(`can acknowledge an activity`, () => {
    const store = mockStore({});
    const activity = {id: `activity-to-acknowledge`};
    return store.dispatch(actions.acknowledgeActivityOnServer({toJS: jest.fn()}, activity, mockSpark))
      .then(() => {
        expect(store.getActions()).toMatchSnapshot();
      });
  });

  it(`can create a conversation`, () => {
    const store = mockStore({});
    const participants = [`ricky.testerson@test.net`, `professor.xavier@school.edu`];
    return store.dispatch(actions.createConversation(participants, mockSpark))
      .then(() => {
        expect(store.getActions()).toMatchSnapshot();
      });
  });

  it(`can delete an activity`, () => {
    const store = mockStore({});
    return store.dispatch(actions.deleteActivity({toJS: jest.fn()}, {}, mockSpark))
      .then(() => {
        expect(store.getActions()).toMatchSnapshot();
      });
  });

  it(`can get a conversation by uuid`, () => {
    const uuid = `34abf792-10a7-4d5c-ae46-88f1bcaa07e4`;
    const store = mockStore({});
    return store.dispatch(actions.getConversation(uuid, mockSpark))
      .then(() => {
        expect(store.getActions()).toMatchSnapshot();
      });
  });

  it(`can load missing activities`, () => {
    const store = mockStore({});
    const conversationId = `abc123`;
    const sinceDate = `2017-02-22T17:11:56.952Z`;
    return store.dispatch(actions.loadMissingActivities(conversationId, sinceDate, mockSpark))
      .then(() => {
        expect(store.getActions()).toMatchSnapshot();
      });
  });

  it(`can load previous messages`, () => {
    const store = mockStore({});
    const conversationId = `abc123`;
    const maxDate = `2017-02-22T17:11:56.952Z`;
    return store.dispatch(actions.loadPreviousMessages(conversationId, maxDate, mockSpark))
      .then(() => {
        expect(store.getActions()).toMatchSnapshot();
      });
  });

});
