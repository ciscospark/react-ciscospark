import {metrics} from '@ciscospark/react-component-utils';

export const ACKNOWLEDGE_ACTIVITY = `ACKNOWLEDGE_ACTIVITY`;
export const ADD_ACTIVITIES_TO_CONVERSATION = `ADD_ACTIVITIES_TO_CONVERSATION`;
export const CREATE_CONVERSATION_BEGIN = `CREATE_CONVERSATION_BEGIN`;
export const CREATE_CONVERSATION = `CREATE_CONVERSATION`;
export const UPDATE_CONVERSATION_STATE = `UPDATE_CONVERSATION_STATE`;
export const DELETE_ACTIVITY_FROM_CONVERSATION = `DELETE_ACTIVITY_FROM_CONVERSATION`;
export const RECEIVE_MERCURY_COMMENT = `RECEIVE_MERCURY_COMMENT`;
export const RECEIVE_MERCURY_ACTIVITY = `RECEIVE_MERCURY_ACTIVITY`;
export const UPDATE_MERCURY_STATE = `UPDATE_MERCURY_STATE`;

function acknowledgeActivity(activity) {
  return {
    type: ACKNOWLEDGE_ACTIVITY,
    payload: {
      activity
    }
  };
}

export function addActivitiesToConversation(activities) {
  return {
    type: ADD_ACTIVITIES_TO_CONVERSATION,
    payload: {
      activities
    }
  };
}

export function createConversationBegin(userId) {
  return {
    type: CREATE_CONVERSATION_BEGIN,
    payload: {
      userId
    }
  };
}

export function createConversation(conversation) {
  return {
    type: CREATE_CONVERSATION,
    payload: {
      conversation
    }
  };
}

export function deleteActivityFromConversation(conversation, activity) {
  return {
    type: DELETE_ACTIVITY_FROM_CONVERSATION,
    payload: {
      conversation,
      activity
    }
  };
}

export function receiveMercuryComment(activity) {
  return {
    type: RECEIVE_MERCURY_COMMENT,
    payload: {
      activity
    }
  };
}

export function receiveMercuryActivity(activity) {
  return {
    type: RECEIVE_MERCURY_ACTIVITY,
    payload: {
      activity
    }
  };
}

export function updateMercuryState(mercuryState) {
  return {
    type: UPDATE_MERCURY_STATE,
    payload: {
      mercuryState
    }
  };
}

export function updateConversationState(conversationState) {
  return {
    type: UPDATE_CONVERSATION_STATE,
    payload: {
      conversationState
    }
  };
}


export function acknowledgeActivityOnServer(conversation, activity, spark) {
  return (dispatch) =>
    spark.conversation.acknowledge(conversation, activity).then(() => dispatch(acknowledgeActivity(activity)));
}

const metricName = {
  CREATE_CONVO_START: `createConversation:start`,
  CREATE_CONVO_END: `createConversation:end`,
  CREATE_CONVO_DURATION: `createConversation:duration`
};

/**
 * Creates/Opens a conversation with a user
 *
 * @param {String} userId Either UUID or email of user
 * @param {object} spark
 * @returns {function}
 */
export function createConversationWithUser(userId, spark) {
  return (dispatch) => {
    metrics.saveElapsedTime(metricName.CREATE_CONVO_START);
    metrics.sendTempMetric(metricName.CREATE_CONVO_START, spark);

    dispatch(createConversationBegin(userId));

    return spark.conversation.create({
      participants: [userId]
    }, {
      latestActivity: true,
      activitiesLimit: 40,
      participantAckFilter: `all`
    })
      .then((conversation) => {
        metrics.saveElapsedTime(metricName.CREATE_CONVO_END);
        metrics.sendTempMetric(metricName.CREATE_CONVO_END, spark);
        metrics.sendDurationMetric(
          metricName.CREATE_CONVO_DURATION,
          metricName.CREATE_CONVO_START,
          metricName.CREATE_CONVO_END,
          spark
        );
        return dispatch(createConversation(conversation));
      });
  };
}

export function deleteActivity(conversation, activity, spark) {
  return (dispatch) =>
    spark.conversation.delete(conversation, activity)
      .then(() => dispatch(deleteActivityFromConversation(conversation, activity)));
}

/**
 * Loads activities for a conversation previous to the maxDate
 *
 * @export
 * @param {string} conversationId
 * @param {string} maxDate
 * @param {object} spark
 * @returns {function}
 */
export function loadPreviousMessages(conversationId, maxDate, spark) {
  return (dispatch) => {
    dispatch(updateConversationState({isLoadingHistoryUp: true}));
    spark.conversation.listActivities({
      conversationId,
      lastActivityFirst: true,
      limit: 20,
      maxDate
    })
    .then((activities) => {
      dispatch(addActivitiesToConversation(activities));
      dispatch(updateConversationState({isLoadingHistoryUp: false}));
    });
  };
}
