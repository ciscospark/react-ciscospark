import React from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import classnames from 'classnames';
import {getAdaptiveCard, CARD_CONTAINS_IMAGE, replaceIndexWithBlobURL, API_ACTIVITY_VERB} from '@ciscospark/react-component-utils';

class AdaptiveCard extends React.Component {
  constructor(props) {
    super(props);
    this.nodeElement = React.createRef();
    this.state = {
      childNodes: [],
      hasReplacedImagesInJSON: false,
      hasReplacedCard: false,
      cards: this.props.cards,
      displayName: this.props.displayName
    };

    this.addChildNode = this.addChildNode.bind(this);
  }

  componentDidMount() {
    if (Object.prototype.hasOwnProperty.call(this, 'nodeElement') && Object.prototype.hasOwnProperty.call(this.nodeElement, 'current')) {
      this.nodeElement.current.appendChild(
        getAdaptiveCard(this.state.cards, this.state.displayName, this.props.sparkInstance, this.addChildNode)
      );
    }
  }

  static getDerivedStateFromProps(nextProps) {
    if (nextProps.verb === API_ACTIVITY_VERB.SHARE) {
      try {
        const decryptedURLs = nextProps.items
          .filter((file) => file.type === CARD_CONTAINS_IMAGE)
          .map((file) => {
            const thumbnail = file.mimeType === 'image/gif' ? nextProps.share.getIn(['files', file.url]) : nextProps.share.getIn(['files', file.image.url]);

            if (thumbnail) {
              const objectUrl = thumbnail.get('objectUrl');

              return objectUrl;
            }

            return undefined;
          });
        const cards = JSON.parse(nextProps.cards[0]);
        const undefinedUrls = decryptedURLs.filter((file) => file === undefined);

        if (undefinedUrls.length === 0) {
          const replacedImagesinCards = replaceIndexWithBlobURL('url', cards, decryptedURLs);

          cards[0] = JSON.stringify(replacedImagesinCards);

          return {hasReplacedImagesInJSON: true, cards};
        }
      }
      catch (error) {
        nextProps.sparkInstance.logger.error('Unable render Adaptive Card', error.message);
      }
    }

    return null;
  }

  componentWillUnmount() {
    this.state.childNodes.forEach((childNode) => {
      ReactDOM.unmountComponentAtNode(childNode);
    });
  }

  /**
   * set state to maintain a list of all the DOM nodes
   * @param {object} childNode
   * @returns {void}
   */
  addChildNode(childNode) {
    this.setState((prevState) => ({childNodes: [...prevState.childNodes, childNode]}));
  }

  render() {
    const activityItemMsgClass = classnames('activity-item--adaptive-card');

    if (this.state.hasReplacedImagesInJSON && !this.state.hasReplacedCard) {
      if (Object.prototype.hasOwnProperty.call(this, 'nodeElement') && Object.prototype.hasOwnProperty.call(this.nodeElement, 'current')) {
        this.nodeElement.current.replaceChild(
          getAdaptiveCard(this.state.cards, this.state.displayName, this.props.sparkInstance, this.addChildNode),
          this.nodeElement.current.firstChild
        );
        this.setState({hasReplacedCard: true});
      }
    }

    return (
      <div
        ref={this.nodeElement}
        className={activityItemMsgClass}
      />
    );
  }
}

AdaptiveCard.propTypes = {
  cards: PropTypes.array,
  displayName: PropTypes.string,
  sparkInstance: PropTypes.object
};

AdaptiveCard.defaultProps = {
  cards: [],
  displayName: '',
  sparkInstance: {}
};

export default AdaptiveCard;
