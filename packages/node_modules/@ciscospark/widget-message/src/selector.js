import {createSelector} from 'reselect';

const getWidget = (state) => state.widgetMessage;
const getSparkInstance = (state, props) => props.sparkInstance || state.spark.get(`spark`);
const getSparkState = (state) => state.spark.get(`status`);
const getConversation = (state) => state.conversation;
const getUsers = (state) => state.user;
const getAvatars = (state) => state.avatar;
const getActivity = (state) => state.activity;
const getFlags = (state) => state.flags;
const getMercury = (state) => state.mercury;

const getSpace = createSelector(
  [getConversation, getUsers],
  (conversation, users) => {
    const space = conversation;
    const currentUser = users.get(`currentUser`);
    if (space.get(`type`) === `direct`) {
      return constructOneOnOne(space, currentUser);
    }
    return constructGroup(space, currentUser);
  }
);

export const getMessageWidgetProps = createSelector(
  [
    getSparkInstance,
    getSparkState,
    getAvatars,
    getActivity,
    getConversation,
    getFlags,
    getMercury,
    getUsers,
    getWidget,
    getSpace
  ],
  (sparkInstance, sparkState, ...props) => {
    const propsObject = {};
    const propNames = [
      `avatar`,
      `activity`,
      `conversation`,
      `flags`,
      `mercury`,
      `user`,
      `widgetMessage`,
      `space`
    ];
    props.map((p, i) => {
      propsObject[propNames[i]] = p;
      return p;
    });
    propsObject.sparkInstance = sparkInstance;
    propsObject.sparkState = sparkState.toJS();

    return propsObject;
  }
);

function constructSpace(space) {
  const lastActivityTimestamp = space.get(`lastReadableActivityDate`);
  const tags = space.get(`tags`);
  const id = space.get(`id`);
  return {
    id,
    type: tags && tags.includes(`ONE_ON_ONE`) ? `direct` : `group`,
    lastActivityTimestamp,
    published: space.get(`published`),
    isLocked: tags && tags.includes(`LOCKED`)
  };
}

function constructOneOnOne(space, currentUser) {
  const thisSpace = constructSpace(space);
  const currentUserEmail = currentUser.email;
  const otherUsers = space.get(`participants`)
    .find((p) => p.get(`emailAddress`) !== currentUserEmail);
  if (otherUsers) {
    thisSpace.toUser = otherUsers;
    thisSpace.name = otherUsers.get(`displayName`);
  }
  return thisSpace;
}

function constructGroup(space) {
  const thisSpace = constructSpace(space);
  thisSpace.name = space.get(`displayName`);
  const team = space.get(`team`);
  if (team) {
    thisSpace.teamName = team.get(`displayName`);
    thisSpace.teamColor = team.get(`color`);
    thisSpace.teamId = team.get(`id`);
  }
  return thisSpace;
}
