import {createSelector} from 'reselect';
import moment from 'moment';
import {formatDate} from '@ciscospark/react-component-utils';

const getWidget = (state) => state.widgetRecents;
const getSpark = (state) => state.spark;
const getUsers = (state) => state.user;
const getAvatars = (state) => state.avatar;
const getSpaces = (state) => state.spaces;
const getMedia = (state) => state.media;


function constructSpace(space, avatars) {

  const lastSeenActivityDate = space.get(`lastSeenActivityDate`);
  const lastActivityTimestamp = space.get(`lastReadableActivityDate`);
  const isUnread = lastSeenActivityDate ? moment(lastSeenActivityDate).isBefore(lastActivityTimestamp) : true;

  const id = space.get(`id`);
  const avatarUrl = avatars.getIn([id, `url`]);
  const actorName = space.getIn([`latestActivity`, `actor`, `displayName`]);

  return {
    id,
    type: space.get(`type`),
    lastActivityTime: formatDate(lastActivityTimestamp),
    lastActivityTimestamp,
    latestActivity: {
      actorName: actorName ? actorName.split(` `)[0] : ``,
      type: space.getIn([`latestActivity`, `verb`]),
      object: space.getIn([`latestActivity`, `object`]).toJS(),
      text: space.getIn([`latestActivity`, `object`, `displayName`])
    },
    avatarUrl,
    participants: space.get(`participants`).toJS(),
    published: space.get(`published`),
    isLocked: space.get(`tags`) && space.get(`tags`).includes(`LOCKED`),
    isUnread
  };
}

function constructOneOnOne(space, currentUser, avatars) {
  const thisSpace = constructSpace(space, avatars);
  const currentUserEmail = currentUser.email;
  const otherUsers = space.get(`participants`)
    .find((p) => p.get(`emailAddress`) !== currentUserEmail);
  if (otherUsers) {
    thisSpace.name = otherUsers.get(`displayName`);
  }
  else if (space.get(`displayName`)) {
    thisSpace.name = space.get(`displayName`);
  }
  else {
    thisSpace.name = `Untitled`;
  }
  return thisSpace;
}

function constructGroup(space, avatars) {
  const thisSpace = constructSpace(space, avatars);
  if (space.get(`displayName`)) {
    thisSpace.name = space.get(`displayName`);
  }
  else {
    thisSpace.name = `Untitled`;
  }
  const team = space.get(`team`);
  if (team) {
    thisSpace.teamName = team.get(`displayName`);
    thisSpace.teamColor = team.get(`color`);
    thisSpace.teamId = team.get(`id`);
  }
  return thisSpace;
}

const getRecentSpaces = createSelector(
  [getSpaces, getUsers],
  (spaces, users) => {
    const currentUser = users.get(`currentUser`);
    const avatars = spaces.get(`avatars`);
    const recents = spaces.get(`items`)
      .map((space) => {
        if (space.get(`type`) === `direct`) {
          return constructOneOnOne(space, currentUser, avatars);
        }
        return constructGroup(space, avatars);
      });
    return recents;
  }
);

export const getRecentsWidgetProps = createSelector(
  [getWidget, getUsers, getAvatars, getSpaces, getRecentSpaces, getSpark, getMedia],
  (widget, user, avatar, spaces, spacesList, spark, media) => ({ // eslint-disable-line max-params
    widgetRecent: widget,
    sparkState: spark.get(`status`),
    sparkInstance: spark.get(`spark`),
    user,
    avatar,
    spaces,
    spacesList,
    media
  })
);
