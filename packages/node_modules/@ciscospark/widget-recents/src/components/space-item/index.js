import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

import {ICON_TYPE_VIDEO_OUTLINE} from '@ciscospark/react-component-icon';
import Avatar from '@ciscospark/react-component-avatar';
import Button from '@ciscospark/react-component-button';
import CallDataActivityMessage from '@ciscospark/react-component-call-data-activity';

import JoinCallButton from '../join-call-button';

import messages from '../../messages';

import styles from './styles.css';


const propTypes = {
  avatarUrl: PropTypes.string,
  call: PropTypes.object,
  currentUser: PropTypes.object.isRequired,
  formatMessage: PropTypes.func.isRequired,
  hasGroupCalling: PropTypes.bool,
  id: PropTypes.string,
  isDecrypting: PropTypes.bool,
  isUnread: PropTypes.bool,
  lastActivityTime: PropTypes.string,
  latestActivity: PropTypes.object,
  name: PropTypes.string,
  onCallClick: PropTypes.func,
  onClick: PropTypes.func,
  teamColor: PropTypes.string,
  teamName: PropTypes.string,
  type: PropTypes.string
};

const defaultProps = {
  avatarUrl: '',
  call: undefined,
  hasGroupCalling: false,
  id: '',
  isDecrypting: false,
  isUnread: false,
  latestActivity: {},
  lastActivityTime: '',
  name: '',
  onCallClick: () => {},
  onClick: () => {},
  teamColor: '',
  teamName: '',
  type: ''
};

function SpaceItem({
  avatarUrl,
  call,
  currentUser,
  formatMessage,
  hasGroupCalling,
  id,
  isUnread,
  lastActivityTime,
  latestActivity,
  name,
  onClick,
  onCallClick,
  teamName,
  teamColor,
  type,
  isDecrypting
}) {
  function handleClick() {
    return onClick(id);
  }

  function handleKeyDown(e) {
    // If there is a keypress is Enter key
    if (e.keyCode && e.keyCode === 13) {
      return onClick(id);
    }
    return false;
  }


  function handleCallClick(e) {
    if (type === 'direct' || hasGroupCalling) {
      e.stopPropagation();
      return onCallClick(id);
    }
    return false;
  }

  let activityText;

  if (!isDecrypting) {
    const {actorName: actorName = '', type: activityType = 'unknown'} = latestActivity;

    switch (activityType) {
      case 'post': {
        activityText = <span>{actorName}<span className={styles.midDot} />{latestActivity.object.displayName}</span>;
        break;
      }
      case 'update': {
        if (latestActivity.object.objectType === 'locusSessionSummary') {
          activityText = (
            <CallDataActivityMessage
              actor={latestActivity.actor}
              currentUser={currentUser}
              duration={latestActivity.object.duration}
              isGroupCall={latestActivity.object.isGroupCall}
              participants={latestActivity.object.participants.items}
            />
          );
        }
        break;
      }
      case 'share': {
        activityText = formatMessage(messages.sharedFile);
        break;
      }
      case 'add': {
        activityText = formatMessage(messages.addedToSpace, {actorName, targetName: latestActivity.text.split(' ')[0]});
        break;
      }
      default: {
        activityText = '';
      }
    }
  }

  const isDirectSpace = type === 'direct';
  const hasCallSupport = typeof onCallClick === 'function' && (hasGroupCalling || isDirectSpace);

  return (
    <div
      className={classNames('space-item', styles.item, {
        [styles.hasCallSupport]: !!hasCallSupport,
        [styles.isDecrypting]: !!isDecrypting
      })}
      onClick={handleClick}
      onKeyDown={handleKeyDown}
      role="button"
      tabIndex="0"
    >
      {
        isUnread &&
        <div className={classNames('space-unread-indicator', styles.unreadIndicator)} />
      }
      <div className={classNames('space-avatar-wrapper', styles.avatarWrapper)}>
        <div className={classNames('space-avatar-border', type === 'group' && styles.avatarGroup)}>
          <Avatar baseColor={teamColor} image={avatarUrl} name={name} />
        </div>
      </div>
      <div className={classNames('space-item-meta', styles.meta)}>
        {
          teamName &&
          <div
            className={classNames('space-team-name', styles.teamName)}
            style={teamColor && {color: teamColor}}
          >
            {teamName}
          </div>
        }
        <div className={classNames('space-title', styles.title, isUnread ? styles.isUnread : '')}>
          {name}
        </div>
        <div className={classNames('space-last-activity', styles.lastActivity)}>
          {activityText}
        </div>
      </div>
      {
        (!hasCallSupport || !call) &&
        <div className={classNames('space-last-activity-time', styles.timestamp)}>
          {lastActivityTime}
        </div>
      }
      {
        // Join call in progress
        hasCallSupport && call &&
        <div className={classNames('space-join-call', styles.joinCall)}>
          <JoinCallButton callStartTime={call.startTime} onJoinClick={handleCallClick} />
        </div>
      }
      {
        // Hover display of "call" button
        hasCallSupport && !call &&
        <div className={classNames('space-actions', styles.actions, styles.hoverReveal)}>
          <Button
            accessibilityLabel="Call Space"
            buttonClassName={classNames(styles.actionButton, styles.callButton)}
            iconType={ICON_TYPE_VIDEO_OUTLINE}
            onClick={handleCallClick}
          />
        </div>
      }
    </div>
  );
}

SpaceItem.propTypes = propTypes;
SpaceItem.defaultProps = defaultProps;

export default SpaceItem;
