import {Record} from 'immutable';

import mercury from '@ciscospark/redux-module-mercury';
import users from '@ciscospark/redux-module-users';
import spaces from '@ciscospark/redux-module-spaces';
import errors from '@ciscospark/redux-module-errors';
import features from '@ciscospark/redux-module-features';
import media from '@ciscospark/redux-module-media';
import teams from '@ciscospark/redux-module-teams';
import avatar from '@ciscospark/redux-module-avatar';
import activities from '@ciscospark/redux-module-activities';

import {
  UPDATE_STATUS,
  UPDATE_VISIBILITY_COUNT
} from './actions';

const Status = Record({
  isFetchingRecentSpaces: false,
  hasFetchedRecentSpaces: false,
  isFetchingTeams: false,
  hasFetchedCurrentCalls: false,
  hasFetchedTeams: false,
  hasFetchedFeatureFlags: false,
  hasFetchedAvatars: false,
  isFetchingFeatureFlags: false,
  isListeningForNewActivity: false,
  isListeningForCalls: false,
  hasCheckedWebRTCSupport: false,
  hasWebRTCSupport: false
});

const RecentsWidget = Record({
  incomingCall: null,
  visibilityCount: 15,
  status: new Status()
});

export const initialState = new RecentsWidget();

export function reducer(state = new RecentsWidget(), action) {
  switch (action.type) {
    case UPDATE_STATUS:
      return state.mergeIn(['status'], action.payload.status);

    case UPDATE_VISIBILITY_COUNT:
      return state.set('visibilityCount', action.payload.count);

    default:
      return state;
  }
}

const reducers = {
  avatar,
  activities,
  errors,
  features,
  media,
  mercury,
  spaces,
  teams,
  users,
  widgetRecents: reducer
};

export default reducers;
