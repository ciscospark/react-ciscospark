import marked from 'marked';
import {filterSync} from '@ciscospark/helper-html';

import {constructActivity, constructActivityWithContent, isImage, sanitize} from '@ciscospark/react-component-utils';

export const ADD_FILES_TO_ACTIVITY = `activity/ADD_FILES_TO_ACTIVITY`;
export const ADD_INFLIGHT_ACTIVITY = `activity/ADD_INFLIGHT_ACTIVITY`;
export const REMOVE_FAILED_ACTIVITY = `activity/REMOVE_FAILED_ACTIVITY`;
export const REMOVE_FILE_FROM_ACTIVITY = `activity/REMOVE_FILE_FROM_ACTIVITY`;
export const REMOVE_INFLIGHT_ACTIVITY = `activity/REMOVE_INFLIGHT_ACTIVITY`;
export const RESET_ACTIVITY = `activity/RESET_ACTIVITY`;
export const SAVE_SHARE_ACTIVITY = `activity/SAVE_SHARE_ACTIVITY`;
export const SUBMIT_ACTIVITY_START = `activity/SUBMIT_ACTIVITY_START`;
export const SUBMIT_ACTIVITY_FAILURE = `activity/SUBMIT_ACTIVITY_FAILURE`;
export const UPDATE_ACTIVITY_STATUS = `activity/UPDATE_ACTIVITY_STATUS`;
export const UPDATE_ACTIVITY_TEXT = `activity/UPDATE_ACTIVITY_TEXT`;

export function addFilesToActivity(files) {
  return {
    type: ADD_FILES_TO_ACTIVITY,
    payload: {
      files
    }
  };
}

function addInflightActivity(activity) {
  return {
    type: ADD_INFLIGHT_ACTIVITY,
    payload: {
      activity
    }
  };
}


function removeFailedActivity(id) {
  return {
    type: REMOVE_FAILED_ACTIVITY,
    payload: {
      id
    }
  };
}

export function removeFileFromActivity(id) {
  return {
    type: REMOVE_FILE_FROM_ACTIVITY,
    payload: {
      id
    }
  };
}

export function removeInflightActivity(id) {
  return {
    type: REMOVE_INFLIGHT_ACTIVITY,
    payload: {
      id
    }
  };
}

export function resetActivity() {
  return {
    type: RESET_ACTIVITY
  };
}

export function saveShareActivity(shareActivity) {
  return {
    type: SAVE_SHARE_ACTIVITY,
    payload: {
      shareActivity
    }
  };
}

export function submitActivityStart() {
  return {
    type: SUBMIT_ACTIVITY_START
  };
}

export function submitActivityFailure(activity, error) {
  return {
    type: SUBMIT_ACTIVITY_FAILURE,
    payload: {
      activity,
      error
    }
  };
}

export function updateActivityStatus(status) {
  return {
    type: UPDATE_ACTIVITY_STATUS,
    payload: {
      status
    }
  };
}

export function updateActivityText(text) {
  return {
    type: UPDATE_ACTIVITY_TEXT,
    payload: {
      text
    }
  };
}


/**
 * Adds file to message, creates Share activity if not present, starts upload
 *
 * @param {object} conversation - from store
 * @param {Map} activity - from store
 * @param {Array} files
 * @param {object} spark - spark instance
 * @returns {function}
 */
export function addFiles(conversation, activity, files, spark) {
  return (dispatch) => {
    let shareActivity = activity.get(`shareActivity`);
    if (!shareActivity) {
      shareActivity = spark.internal.conversation.makeShare(conversation.toJS());
      // Store shareActivity object to be used later
      dispatch(saveShareActivity(shareActivity));
    }

    let cleanFiles;
    if (files && files.length) {
      cleanFiles = files.map((file) => {
        const clean = sanitize(file);
        // Create thumbnail objectURL
        if (isImage(clean)) {
          clean.thumbnail = createObjectURL(clean);
        }
        return clean;
      });
    }
    dispatch(updateActivityStatus({isUploadingShare: true}));
    dispatch(addFilesToActivity(cleanFiles));
    cleanFiles.forEach((file) => shareActivity.add(file));
    return Promise.resolve();
  };
}

/**
* Removes file from ShareActivity and from store
*
* @param {string} id - clientTempId key of stored file
* @param {Map} activity - from store
* @returns {function}
*/
export function removeFile(id, activity) {
  return (dispatch) => {
    const shareActivity = activity.get(`shareActivity`);
    const file = activity.getIn([`files`, id]);
    return shareActivity.remove(file).then(() => {
      revokeObjectURL(file);
      return dispatch(removeFileFromActivity(id));
    });
  };
}

/**
* Constructs and sends activity to server
*
* @param {object} conversation - from store (immutable object)
* @param {Map} activity - from store (immutable object)
* @param {object} user - from store
* @param {object} spark - spark instance from store
* @returns {function}
*/
export function submitActivity(conversation, activity, user, spark) {
  return (dispatch) => {
    const message = createMessageObject(activity.get(`text`));
    const shareActivity = activity.get(`shareActivity`);
    const conversationJS = conversation.toJS();
    if (shareActivity && activity.get(`files`).size) {
      const inFlightActivity = constructActivityWithContent(conversationJS, message, user, activity.get(`files`).toArray(), shareActivity);
      dispatch(addInflightActivity(inFlightActivity));
      // map our temp id to the in flight temp id so we can remove it when it is received
      shareActivity.displayName = message.displayName;
      shareActivity.content = message.content;
      shareActivity.clientTempId = inFlightActivity.clientTempId;

      return spark.internal.conversation.share(conversationJS, shareActivity)
        .then(() => {
          cleanupAfterSubmit(activity, dispatch);
        })
        .catch((error) => {
          cleanupAfterSubmit(activity, dispatch);
          return dispatch(submitActivityFailure(inFlightActivity, error));
        });

    }
    else if (message) {
      const inFlightActivity = constructActivity(conversationJS, message, user);
      dispatch(addInflightActivity(inFlightActivity));
      dispatch(resetActivity());
      return spark.internal.conversation
        .post(conversationJS, message, {clientTempId: inFlightActivity.clientTempId})
        .catch((error) => dispatch(submitActivityFailure(inFlightActivity, error)));
    }
    return Promise.resolve();
  };
}

/**
 * Sets the typing status of the current user
 *
 * @param {boolean} isTyping
 * @param {object} conversation
 * @param {object} spark
 * @returns {function}
 */
export function setUserTyping(isTyping, conversation, spark) {
  return (dispatch) =>
    spark.internal.conversation.updateTypingStatus(conversation.toJS(), {typing: isTyping})
      .then(() => dispatch(updateActivityStatus({isTyping})))
      .catch((error) => {
        // Offline
        if (error.name === `NetworkOrCORSError`) {
          return Promise.resolve();
        }
        throw error;
      });
}

/**
 * Re-submits the failed activity to the conversation
 * @param {object} failedActivity
 * @param {object} spark
 * @returns {function}
 */
export function retryFailedActivity(failedActivity, spark) {
  return (dispatch) => {
    const {conversation, shareActivity, text} = failedActivity._meta;
    dispatch(removeFailedActivity(failedActivity.id));
    dispatch(addInflightActivity(failedActivity));
    if (failedActivity.verb === `share`) {
      return spark.internal.conversation.share(conversation, shareActivity)
        .catch((error) => dispatch(submitActivityFailure(failedActivity, error)));
    }
    return spark.internal.conversation
        .post(conversation, text, {clientTempId: failedActivity.clientTempId})
        .catch((error) => dispatch(submitActivityFailure(failedActivity, error)));
  };
}


/**
* Helper to reset Activity store
*
* @param {Map} activity
* @param {function} dispatch
* @returns {function}
*/
function cleanupAfterSubmit(activity, dispatch) {
  const files = activity.get(`files`);
  if (files.size) {
    files.forEach((file) => {
      revokeObjectURL(file);
    });
  }
  dispatch(resetActivity());
}

/**
 * Create objectURL
 *
 * @param {object} file
 * @returns {string}
 */
function createObjectURL(file) {
  const urlCreator = window.URL || window.webkitURL;
  return urlCreator.createObjectURL(file);
}

/**
 * Revoke objectURL
 *
 * @param {object} file
 * @returns {undefined}
 */
function revokeObjectURL(file) {
  const urlCreator = window.URL || window.webkitURL;
  urlCreator.revokeObjectURL(file);
}

/**
 * Creates markdown and stripped text object
 *
 * @param {string} messageString
 * @returns {object}
 * @returns {object.content} Converted markdown content
 * @returns {object.displayName} Raw text content
 */
function createMessageObject(messageString) {
  if (messageString) {
    const message = messageString.trim();
    const messageObject = {
      displayName: message
    };
    const markedString = marked(message) || ``;
    if (markedString !== message) {
      // Remove possibly added <p></p> tags and newline
      const cleanedString = markedString.replace(/(?:^<p>)|(?:<\/p>$)|(?:<\/p>\n$)/g, ``).trim();

      if (cleanedString !== messageString) {
        messageObject.content = filterSync(() => {}, { // eslint-disable-line no-empty-function
          'spark-mention': [`data-object-type`, `data-object-id`, `data-object-url`],
          a: [`href`],
          b: [],
          blockquote: [`class`],
          strong: [],
          i: [],
          em: [],
          pre: [],
          code: [`class`],
          br: [],
          hr: [],
          p: [],
          ul: [],
          ol: [],
          li: [],
          h1: [],
          h2: [],
          h3: [],
          h4: [],
          h5: [],
          h6: []
        }, [], cleanedString);
      }
    }


    return messageObject;
  }
  return false;
}
