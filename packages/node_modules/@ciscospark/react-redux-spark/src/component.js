import {Component, PropTypes} from 'react';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';

import {connectToMercury} from '@ciscospark/redux-module-mercury';

import {
  updateSparkStatus,
  registerDevice,
  storeSparkInstance
} from './actions';

import createSpark from './spark';

class SparkComponent extends Component {

  componentDidMount() {
    const {
      accessToken
    } = this.props;

    const props = this.props;
    let spark = props.spark.get(`spark`);

    if (!spark) {
      spark = createSpark(accessToken);
      props.storeSparkInstance(spark);
    }

    spark.listenToAndRun(spark, `change:canAuthorize`, () => {
      props.updateSparkStatus({authenticated: spark.canAuthorize});
    });

    spark.listenToAndRun(spark, `change:isAuthenticating`, () => {
      props.updateSparkStatus({authenticating: spark.isAuthenticating});
    });

    this.setupMercury(spark, props);
  }

  componentWillReceiveProps(nextProps) {
    const spark = nextProps.spark.get(`spark`);
    this.setupMercury(spark, nextProps);
  }

  shouldComponentUpdate(nextProps) {
    const props = this.props;
    return nextProps.spark !== props.spark;
  }

  setupMercury(spark, props) {
    const {
      authenticated,
      registered,
      registering
    } = props.spark.get(`status`).toJS();
    const {
      connected,
      connecting
    } = props.mercury.get(`status`).toJS();

    if (authenticated && !registered && !registering) {
      props.registerDevice(spark);
    }
    else if (registered && authenticated && !connected && !connecting) {
      props.connectToMercury(spark);
    }
  }

  render() {
    return null;
  }
}

const injectedPropTypes = {
  connectToMercury: PropTypes.func,
  registerDevice: PropTypes.func,
  spark: PropTypes.object
};

SparkComponent.propTypes = {
  accessToken: PropTypes.string.isRequired,
  ...injectedPropTypes
};

export default connect(
  (state) => ({
    mercury: state.mercury,
    spark: state.spark
  }),
  (dispatch) => bindActionCreators({
    connectToMercury,
    updateSparkStatus,
    registerDevice,
    storeSparkInstance
  }, dispatch)
)(SparkComponent);
