// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`spark component renders correctly 1`] = `
Object {
  "instance": Provider {
    "__reactInternalMemoizedMergedChildContext": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "storeSubscription": null,
    },
    "_reactInternalFiber": FiberNode {
      "_debugHookTypes": null,
      "_debugID": 4,
      "_debugIsCurrentlyTiming": false,
      "_debugOwner": null,
      "_debugSource": null,
      "alternate": null,
      "child": FiberNode {
        "_debugHookTypes": null,
        "_debugID": 5,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": null,
        "_debugSource": null,
        "alternate": null,
        "child": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "alternate": null,
          "child": null,
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 5,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": [Circular],
          "pendingProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": SparkComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "accessToken": "",
              "addError": [Function],
              "guestToken": "",
              "registerDevice": [Function],
              "sdkInstance": undefined,
              "spark": Immutable.Map {
                "error": null,
                "spark": Object {
                  "authenticate": [MockFunction],
                  "board": Object {
                    "decryptContents": [MockFunction],
                    "decryptSingleContent": [MockFunction],
                    "encryptContents": [MockFunction],
                    "encryptSingleContent": [MockFunction],
                    "persistence": Object {
                      "addContent": [MockFunction],
                      "addImage": [MockFunction],
                      "createChannel": [MockFunction],
                      "deleteAllContent": [MockFunction],
                      "deleteContent": [MockFunction],
                      "getAllContent": [MockFunction],
                      "getChannel": [MockFunction],
                      "getChannels": [MockFunction],
                      "ping": [MockFunction],
                      "register": [MockFunction],
                    },
                    "realtime": Object {
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "publish": [MockFunction],
                      "set": [MockFunction],
                    },
                  },
                  "client": Object {
                    "trackingIdBase": "testTrackingIdBase",
                  },
                  "config": Object {
                    "trackingIdPrefix": "testTrackingIdPrefix",
                  },
                  "credentials": Object {
                    "authorization": Object {},
                    "federation": true,
                  },
                  "feature": Object {
                    "getFeature": [MockFunction],
                  },
                  "flagging": Object {
                    "flag": [MockFunction],
                    "mapToActivities": [MockFunction],
                  },
                  "internal": Object {
                    "conversation": Object {
                      "assign": [MockFunction],
                      "download": [MockFunction],
                      "get": [MockFunction],
                      "unassign": [MockFunction],
                      "update": [MockFunction],
                    },
                    "device": Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "encryption": Object {
                      "decryptScr": [MockFunction],
                      "decryptText": [MockFunction],
                      "download": [MockFunction],
                      "encryptText": [MockFunction],
                      "getUnusedKey": [MockFunction],
                      "keystore": Object {
                        "clear": [MockFunction],
                      },
                      "kms": Object {
                        "prepareRequest": [MockFunction],
                        "request": [MockFunction],
                      },
                    },
                    "mercury": Object {
                      "connect": [MockFunction],
                      "listen": [MockFunction],
                      "listenToAndRun": [MockFunction],
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "stopListening": [MockFunction],
                    },
                    "user": Object {
                      "activate": [MockFunction],
                      "register": [MockFunction],
                    },
                  },
                  "isAuthenticated": false,
                  "isAuthenticating": false,
                  "listenToAndRun": [MockFunction] {
                    "calls": Array [
                      Array [
                        [Circular],
                        "change:canAuthorize",
                        [Function],
                      ],
                      Array [
                        [Circular],
                        "change:isAuthenticating",
                        [Function],
                      ],
                      Array [
                        Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "change:registered",
                        [Function],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                    ],
                  },
                  "on": [MockFunction],
                  "ready": false,
                  "request": [MockFunction],
                  "search": Object {
                    "people": [MockFunction],
                    "search": [MockFunction],
                  },
                  "support": Object {
                    "submitCallLogs": [MockFunction],
                  },
                  "util": Object {
                    "html": Object {
                      "escapeSync": [MockFunction],
                      "filterSync": [MockFunction],
                    },
                  },
                },
                "status": Immutable.Record {
                  "authenticated": false,
                  "authenticating": false,
                  "registered": false,
                  "registerError": false,
                  "registering": false,
                },
              },
              "storeSparkInstance": [Function],
              "updateSparkStatus": [Function],
            },
            "refs": Object {},
            "state": null,
            "storeSDKInstance": [Function],
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "type": [Function],
          "updateQueue": null,
        },
        "childExpirationTime": 0,
        "contextDependencies": null,
        "effectTag": 5,
        "elementType": [Function],
        "expirationTime": 0,
        "firstEffect": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "alternate": null,
          "child": null,
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 5,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": [Circular],
          "pendingProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": SparkComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "accessToken": "",
              "addError": [Function],
              "guestToken": "",
              "registerDevice": [Function],
              "sdkInstance": undefined,
              "spark": Immutable.Map {
                "error": null,
                "spark": Object {
                  "authenticate": [MockFunction],
                  "board": Object {
                    "decryptContents": [MockFunction],
                    "decryptSingleContent": [MockFunction],
                    "encryptContents": [MockFunction],
                    "encryptSingleContent": [MockFunction],
                    "persistence": Object {
                      "addContent": [MockFunction],
                      "addImage": [MockFunction],
                      "createChannel": [MockFunction],
                      "deleteAllContent": [MockFunction],
                      "deleteContent": [MockFunction],
                      "getAllContent": [MockFunction],
                      "getChannel": [MockFunction],
                      "getChannels": [MockFunction],
                      "ping": [MockFunction],
                      "register": [MockFunction],
                    },
                    "realtime": Object {
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "publish": [MockFunction],
                      "set": [MockFunction],
                    },
                  },
                  "client": Object {
                    "trackingIdBase": "testTrackingIdBase",
                  },
                  "config": Object {
                    "trackingIdPrefix": "testTrackingIdPrefix",
                  },
                  "credentials": Object {
                    "authorization": Object {},
                    "federation": true,
                  },
                  "feature": Object {
                    "getFeature": [MockFunction],
                  },
                  "flagging": Object {
                    "flag": [MockFunction],
                    "mapToActivities": [MockFunction],
                  },
                  "internal": Object {
                    "conversation": Object {
                      "assign": [MockFunction],
                      "download": [MockFunction],
                      "get": [MockFunction],
                      "unassign": [MockFunction],
                      "update": [MockFunction],
                    },
                    "device": Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "encryption": Object {
                      "decryptScr": [MockFunction],
                      "decryptText": [MockFunction],
                      "download": [MockFunction],
                      "encryptText": [MockFunction],
                      "getUnusedKey": [MockFunction],
                      "keystore": Object {
                        "clear": [MockFunction],
                      },
                      "kms": Object {
                        "prepareRequest": [MockFunction],
                        "request": [MockFunction],
                      },
                    },
                    "mercury": Object {
                      "connect": [MockFunction],
                      "listen": [MockFunction],
                      "listenToAndRun": [MockFunction],
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "stopListening": [MockFunction],
                    },
                    "user": Object {
                      "activate": [MockFunction],
                      "register": [MockFunction],
                    },
                  },
                  "isAuthenticated": false,
                  "isAuthenticating": false,
                  "listenToAndRun": [MockFunction] {
                    "calls": Array [
                      Array [
                        [Circular],
                        "change:canAuthorize",
                        [Function],
                      ],
                      Array [
                        [Circular],
                        "change:isAuthenticating",
                        [Function],
                      ],
                      Array [
                        Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "change:registered",
                        [Function],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                    ],
                  },
                  "on": [MockFunction],
                  "ready": false,
                  "request": [MockFunction],
                  "search": Object {
                    "people": [MockFunction],
                    "search": [MockFunction],
                  },
                  "support": Object {
                    "submitCallLogs": [MockFunction],
                  },
                  "util": Object {
                    "html": Object {
                      "escapeSync": [MockFunction],
                      "filterSync": [MockFunction],
                    },
                  },
                },
                "status": Immutable.Record {
                  "authenticated": false,
                  "authenticating": false,
                  "registered": false,
                  "registerError": false,
                  "registering": false,
                },
              },
              "storeSparkInstance": [Function],
              "updateSparkStatus": [Function],
            },
            "refs": Object {},
            "state": null,
            "storeSDKInstance": [Function],
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "type": [Function],
          "updateQueue": null,
        },
        "index": 0,
        "key": null,
        "lastEffect": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "alternate": null,
          "child": null,
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 5,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": [Circular],
          "pendingProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": SparkComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "accessToken": "",
              "addError": [Function],
              "guestToken": "",
              "registerDevice": [Function],
              "sdkInstance": undefined,
              "spark": Immutable.Map {
                "error": null,
                "spark": Object {
                  "authenticate": [MockFunction],
                  "board": Object {
                    "decryptContents": [MockFunction],
                    "decryptSingleContent": [MockFunction],
                    "encryptContents": [MockFunction],
                    "encryptSingleContent": [MockFunction],
                    "persistence": Object {
                      "addContent": [MockFunction],
                      "addImage": [MockFunction],
                      "createChannel": [MockFunction],
                      "deleteAllContent": [MockFunction],
                      "deleteContent": [MockFunction],
                      "getAllContent": [MockFunction],
                      "getChannel": [MockFunction],
                      "getChannels": [MockFunction],
                      "ping": [MockFunction],
                      "register": [MockFunction],
                    },
                    "realtime": Object {
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "publish": [MockFunction],
                      "set": [MockFunction],
                    },
                  },
                  "client": Object {
                    "trackingIdBase": "testTrackingIdBase",
                  },
                  "config": Object {
                    "trackingIdPrefix": "testTrackingIdPrefix",
                  },
                  "credentials": Object {
                    "authorization": Object {},
                    "federation": true,
                  },
                  "feature": Object {
                    "getFeature": [MockFunction],
                  },
                  "flagging": Object {
                    "flag": [MockFunction],
                    "mapToActivities": [MockFunction],
                  },
                  "internal": Object {
                    "conversation": Object {
                      "assign": [MockFunction],
                      "download": [MockFunction],
                      "get": [MockFunction],
                      "unassign": [MockFunction],
                      "update": [MockFunction],
                    },
                    "device": Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "encryption": Object {
                      "decryptScr": [MockFunction],
                      "decryptText": [MockFunction],
                      "download": [MockFunction],
                      "encryptText": [MockFunction],
                      "getUnusedKey": [MockFunction],
                      "keystore": Object {
                        "clear": [MockFunction],
                      },
                      "kms": Object {
                        "prepareRequest": [MockFunction],
                        "request": [MockFunction],
                      },
                    },
                    "mercury": Object {
                      "connect": [MockFunction],
                      "listen": [MockFunction],
                      "listenToAndRun": [MockFunction],
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "stopListening": [MockFunction],
                    },
                    "user": Object {
                      "activate": [MockFunction],
                      "register": [MockFunction],
                    },
                  },
                  "isAuthenticated": false,
                  "isAuthenticating": false,
                  "listenToAndRun": [MockFunction] {
                    "calls": Array [
                      Array [
                        [Circular],
                        "change:canAuthorize",
                        [Function],
                      ],
                      Array [
                        [Circular],
                        "change:isAuthenticating",
                        [Function],
                      ],
                      Array [
                        Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "change:registered",
                        [Function],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                    ],
                  },
                  "on": [MockFunction],
                  "ready": false,
                  "request": [MockFunction],
                  "search": Object {
                    "people": [MockFunction],
                    "search": [MockFunction],
                  },
                  "support": Object {
                    "submitCallLogs": [MockFunction],
                  },
                  "util": Object {
                    "html": Object {
                      "escapeSync": [MockFunction],
                      "filterSync": [MockFunction],
                    },
                  },
                },
                "status": Immutable.Record {
                  "authenticated": false,
                  "authenticating": false,
                  "registered": false,
                  "registerError": false,
                  "registering": false,
                },
              },
              "storeSparkInstance": [Function],
              "updateSparkStatus": [Function],
            },
            "refs": Object {},
            "state": null,
            "storeSDKInstance": [Function],
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "type": [Function],
          "updateQueue": null,
        },
        "memoizedProps": Object {
          "addError": [MockFunction],
          "spark": Object {
            "authorization": "authorization",
            "internal": Object {
              "conversation": "conversation",
              "feature": "feature",
              "flag": "flag",
              "mercury": "mercury",
              "presence": "presence",
              "search": "search",
              "team": "team",
            },
            "listenToAndRun": [MockFunction],
            "logger": "logger",
            "meetings": "meetings",
            "people": "people",
            "phone": "phone",
            "rooms": "rooms",
          },
          "storeSparkInstance": [MockFunction],
          "updateSparkStatus": [MockFunction],
        },
        "memoizedState": Object {},
        "mode": 0,
        "nextEffect": [Circular],
        "pendingProps": Object {
          "addError": [MockFunction],
          "spark": Object {
            "authorization": "authorization",
            "internal": Object {
              "conversation": "conversation",
              "feature": "feature",
              "flag": "flag",
              "mercury": "mercury",
              "presence": "presence",
              "search": "search",
              "team": "team",
            },
            "listenToAndRun": [MockFunction],
            "logger": "logger",
            "meetings": "meetings",
            "people": "people",
            "phone": "phone",
            "rooms": "rooms",
          },
          "storeSparkInstance": [MockFunction],
          "updateSparkStatus": [MockFunction],
        },
        "ref": null,
        "return": [Circular],
        "sibling": null,
        "stateNode": Connect {
          "__reactInternalMemoizedMaskedChildContext": Object {
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "storeSubscription": null,
          },
          "__reactInternalMemoizedMergedChildContext": Object {
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "storeSubscription": Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": null,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "unsubscribe": [Function],
            },
          },
          "__reactInternalMemoizedUnmaskedChildContext": Object {
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "storeSubscription": null,
          },
          "_reactInternalFiber": [Circular],
          "_reactInternalInstance": Object {},
          "context": Object {
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "storeSubscription": null,
          },
          "notifyNestedSubs": [Function],
          "props": Object {
            "addError": [MockFunction],
            "spark": Object {
              "authorization": "authorization",
              "internal": Object {
                "conversation": "conversation",
                "feature": "feature",
                "flag": "flag",
                "mercury": "mercury",
                "presence": "presence",
                "search": "search",
                "team": "team",
              },
              "listenToAndRun": [MockFunction],
              "logger": "logger",
              "meetings": "meetings",
              "people": "people",
              "phone": "phone",
              "rooms": "rooms",
            },
            "storeSparkInstance": [MockFunction],
            "updateSparkStatus": [MockFunction],
          },
          "propsMode": false,
          "refs": Object {},
          "renderCount": 0,
          "selector": Object {
            "error": null,
            "props": Object {
              "addError": [Function],
              "registerDevice": [Function],
              "spark": Immutable.Map {
                "error": null,
                "spark": Object {
                  "authenticate": [MockFunction],
                  "board": Object {
                    "decryptContents": [MockFunction],
                    "decryptSingleContent": [MockFunction],
                    "encryptContents": [MockFunction],
                    "encryptSingleContent": [MockFunction],
                    "persistence": Object {
                      "addContent": [MockFunction],
                      "addImage": [MockFunction],
                      "createChannel": [MockFunction],
                      "deleteAllContent": [MockFunction],
                      "deleteContent": [MockFunction],
                      "getAllContent": [MockFunction],
                      "getChannel": [MockFunction],
                      "getChannels": [MockFunction],
                      "ping": [MockFunction],
                      "register": [MockFunction],
                    },
                    "realtime": Object {
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "publish": [MockFunction],
                      "set": [MockFunction],
                    },
                  },
                  "client": Object {
                    "trackingIdBase": "testTrackingIdBase",
                  },
                  "config": Object {
                    "trackingIdPrefix": "testTrackingIdPrefix",
                  },
                  "credentials": Object {
                    "authorization": Object {},
                    "federation": true,
                  },
                  "feature": Object {
                    "getFeature": [MockFunction],
                  },
                  "flagging": Object {
                    "flag": [MockFunction],
                    "mapToActivities": [MockFunction],
                  },
                  "internal": Object {
                    "conversation": Object {
                      "assign": [MockFunction],
                      "download": [MockFunction],
                      "get": [MockFunction],
                      "unassign": [MockFunction],
                      "update": [MockFunction],
                    },
                    "device": Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "encryption": Object {
                      "decryptScr": [MockFunction],
                      "decryptText": [MockFunction],
                      "download": [MockFunction],
                      "encryptText": [MockFunction],
                      "getUnusedKey": [MockFunction],
                      "keystore": Object {
                        "clear": [MockFunction],
                      },
                      "kms": Object {
                        "prepareRequest": [MockFunction],
                        "request": [MockFunction],
                      },
                    },
                    "mercury": Object {
                      "connect": [MockFunction],
                      "listen": [MockFunction],
                      "listenToAndRun": [MockFunction],
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "stopListening": [MockFunction],
                    },
                    "user": Object {
                      "activate": [MockFunction],
                      "register": [MockFunction],
                    },
                  },
                  "isAuthenticated": false,
                  "isAuthenticating": false,
                  "listenToAndRun": [MockFunction] {
                    "calls": Array [
                      Array [
                        [Circular],
                        "change:canAuthorize",
                        [Function],
                      ],
                      Array [
                        [Circular],
                        "change:isAuthenticating",
                        [Function],
                      ],
                      Array [
                        Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "change:registered",
                        [Function],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                    ],
                  },
                  "on": [MockFunction],
                  "ready": false,
                  "request": [MockFunction],
                  "search": Object {
                    "people": [MockFunction],
                    "search": [MockFunction],
                  },
                  "support": Object {
                    "submitCallLogs": [MockFunction],
                  },
                  "util": Object {
                    "html": Object {
                      "escapeSync": [MockFunction],
                      "filterSync": [MockFunction],
                    },
                  },
                },
                "status": Immutable.Record {
                  "authenticated": false,
                  "authenticating": false,
                  "registered": false,
                  "registerError": false,
                  "registering": false,
                },
              },
              "storeSparkInstance": [Function],
              "updateSparkStatus": [Function],
            },
            "run": [Function],
            "shouldComponentUpdate": false,
          },
          "setWrappedInstance": [Function],
          "state": Object {},
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "subscription": Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": null,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "unsubscribe": [Function],
          },
          "updater": Object {
            "enqueueForceUpdate": [Function],
            "enqueueReplaceState": [Function],
            "enqueueSetState": [Function],
            "isMounted": [Function],
          },
          "version": 1,
        },
        "tag": 1,
        "type": [Function],
        "updateQueue": null,
      },
      "childExpirationTime": 0,
      "contextDependencies": null,
      "effectTag": 1,
      "elementType": [Function],
      "expirationTime": 0,
      "firstEffect": FiberNode {
        "_debugHookTypes": null,
        "_debugID": 6,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 5,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 5,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": [Circular],
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "addError": [MockFunction],
            "spark": Object {
              "authorization": "authorization",
              "internal": Object {
                "conversation": "conversation",
                "feature": "feature",
                "flag": "flag",
                "mercury": "mercury",
                "presence": "presence",
                "search": "search",
                "team": "team",
              },
              "listenToAndRun": [MockFunction],
              "logger": "logger",
              "meetings": "meetings",
              "people": "people",
              "phone": "phone",
              "rooms": "rooms",
            },
            "storeSparkInstance": [MockFunction],
            "updateSparkStatus": [MockFunction],
          },
          "memoizedState": Object {},
          "mode": 0,
          "nextEffect": [Circular],
          "pendingProps": Object {
            "addError": [MockFunction],
            "spark": Object {
              "authorization": "authorization",
              "internal": Object {
                "conversation": "conversation",
                "feature": "feature",
                "flag": "flag",
                "mercury": "mercury",
                "presence": "presence",
                "search": "search",
                "team": "team",
              },
              "listenToAndRun": [MockFunction],
              "logger": "logger",
              "meetings": "meetings",
              "people": "people",
              "phone": "phone",
              "rooms": "rooms",
            },
            "storeSparkInstance": [MockFunction],
            "updateSparkStatus": [MockFunction],
          },
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": Connect {
            "__reactInternalMemoizedMaskedChildContext": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": null,
            },
            "__reactInternalMemoizedMergedChildContext": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              },
            },
            "__reactInternalMemoizedUnmaskedChildContext": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": null,
            },
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": null,
            },
            "notifyNestedSubs": [Function],
            "props": Object {
              "addError": [MockFunction],
              "spark": Object {
                "authorization": "authorization",
                "internal": Object {
                  "conversation": "conversation",
                  "feature": "feature",
                  "flag": "flag",
                  "mercury": "mercury",
                  "presence": "presence",
                  "search": "search",
                  "team": "team",
                },
                "listenToAndRun": [MockFunction],
                "logger": "logger",
                "meetings": "meetings",
                "people": "people",
                "phone": "phone",
                "rooms": "rooms",
              },
              "storeSparkInstance": [MockFunction],
              "updateSparkStatus": [MockFunction],
            },
            "propsMode": false,
            "refs": Object {},
            "renderCount": 0,
            "selector": Object {
              "error": null,
              "props": Object {
                "addError": [Function],
                "registerDevice": [Function],
                "spark": Immutable.Map {
                  "error": null,
                  "spark": Object {
                    "authenticate": [MockFunction],
                    "board": Object {
                      "decryptContents": [MockFunction],
                      "decryptSingleContent": [MockFunction],
                      "encryptContents": [MockFunction],
                      "encryptSingleContent": [MockFunction],
                      "persistence": Object {
                        "addContent": [MockFunction],
                        "addImage": [MockFunction],
                        "createChannel": [MockFunction],
                        "deleteAllContent": [MockFunction],
                        "deleteContent": [MockFunction],
                        "getAllContent": [MockFunction],
                        "getChannel": [MockFunction],
                        "getChannels": [MockFunction],
                        "ping": [MockFunction],
                        "register": [MockFunction],
                      },
                      "realtime": Object {
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "publish": [MockFunction],
                        "set": [MockFunction],
                      },
                    },
                    "client": Object {
                      "trackingIdBase": "testTrackingIdBase",
                    },
                    "config": Object {
                      "trackingIdPrefix": "testTrackingIdPrefix",
                    },
                    "credentials": Object {
                      "authorization": Object {},
                      "federation": true,
                    },
                    "feature": Object {
                      "getFeature": [MockFunction],
                    },
                    "flagging": Object {
                      "flag": [MockFunction],
                      "mapToActivities": [MockFunction],
                    },
                    "internal": Object {
                      "conversation": Object {
                        "assign": [MockFunction],
                        "download": [MockFunction],
                        "get": [MockFunction],
                        "unassign": [MockFunction],
                        "update": [MockFunction],
                      },
                      "device": Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "encryption": Object {
                        "decryptScr": [MockFunction],
                        "decryptText": [MockFunction],
                        "download": [MockFunction],
                        "encryptText": [MockFunction],
                        "getUnusedKey": [MockFunction],
                        "keystore": Object {
                          "clear": [MockFunction],
                        },
                        "kms": Object {
                          "prepareRequest": [MockFunction],
                          "request": [MockFunction],
                        },
                      },
                      "mercury": Object {
                        "connect": [MockFunction],
                        "listen": [MockFunction],
                        "listenToAndRun": [MockFunction],
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "stopListening": [MockFunction],
                      },
                      "user": Object {
                        "activate": [MockFunction],
                        "register": [MockFunction],
                      },
                    },
                    "isAuthenticated": false,
                    "isAuthenticating": false,
                    "listenToAndRun": [MockFunction] {
                      "calls": Array [
                        Array [
                          [Circular],
                          "change:canAuthorize",
                          [Function],
                        ],
                        Array [
                          [Circular],
                          "change:isAuthenticating",
                          [Function],
                        ],
                        Array [
                          Object {
                            "getServiceUrl": [MockFunction],
                            "register": [MockFunction],
                            "remove": [MockFunction],
                            "services": Object {
                              "roomServiceUrl": "https://example.com/devices/services/room/1",
                            },
                            "url": "https://example.com/devices/1",
                          },
                          "change:registered",
                          [Function],
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                      ],
                    },
                    "on": [MockFunction],
                    "ready": false,
                    "request": [MockFunction],
                    "search": Object {
                      "people": [MockFunction],
                      "search": [MockFunction],
                    },
                    "support": Object {
                      "submitCallLogs": [MockFunction],
                    },
                    "util": Object {
                      "html": Object {
                        "escapeSync": [MockFunction],
                        "filterSync": [MockFunction],
                      },
                    },
                  },
                  "status": Immutable.Record {
                    "authenticated": false,
                    "authenticating": false,
                    "registered": false,
                    "registerError": false,
                    "registering": false,
                  },
                },
                "storeSparkInstance": [Function],
                "updateSparkStatus": [Function],
              },
              "run": [Function],
              "shouldComponentUpdate": false,
            },
            "setWrappedInstance": [Function],
            "state": Object {},
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "subscription": Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": null,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "unsubscribe": [Function],
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
            "version": 1,
          },
          "tag": 1,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "alternate": null,
        "child": null,
        "childExpirationTime": 0,
        "contextDependencies": null,
        "effectTag": 5,
        "elementType": [Function],
        "expirationTime": 0,
        "firstEffect": null,
        "index": 0,
        "key": null,
        "lastEffect": null,
        "memoizedProps": Object {
          "accessToken": "",
          "addError": [Function],
          "guestToken": "",
          "registerDevice": [Function],
          "sdkInstance": undefined,
          "spark": Immutable.Map {
            "error": null,
            "spark": Object {
              "authenticate": [MockFunction],
              "board": Object {
                "decryptContents": [MockFunction],
                "decryptSingleContent": [MockFunction],
                "encryptContents": [MockFunction],
                "encryptSingleContent": [MockFunction],
                "persistence": Object {
                  "addContent": [MockFunction],
                  "addImage": [MockFunction],
                  "createChannel": [MockFunction],
                  "deleteAllContent": [MockFunction],
                  "deleteContent": [MockFunction],
                  "getAllContent": [MockFunction],
                  "getChannel": [MockFunction],
                  "getChannels": [MockFunction],
                  "ping": [MockFunction],
                  "register": [MockFunction],
                },
                "realtime": Object {
                  "on": [MockFunction],
                  "once": [MockFunction],
                  "publish": [MockFunction],
                  "set": [MockFunction],
                },
              },
              "client": Object {
                "trackingIdBase": "testTrackingIdBase",
              },
              "config": Object {
                "trackingIdPrefix": "testTrackingIdPrefix",
              },
              "credentials": Object {
                "authorization": Object {},
                "federation": true,
              },
              "feature": Object {
                "getFeature": [MockFunction],
              },
              "flagging": Object {
                "flag": [MockFunction],
                "mapToActivities": [MockFunction],
              },
              "internal": Object {
                "conversation": Object {
                  "assign": [MockFunction],
                  "download": [MockFunction],
                  "get": [MockFunction],
                  "unassign": [MockFunction],
                  "update": [MockFunction],
                },
                "device": Object {
                  "getServiceUrl": [MockFunction],
                  "register": [MockFunction],
                  "remove": [MockFunction],
                  "services": Object {
                    "roomServiceUrl": "https://example.com/devices/services/room/1",
                  },
                  "url": "https://example.com/devices/1",
                },
                "encryption": Object {
                  "decryptScr": [MockFunction],
                  "decryptText": [MockFunction],
                  "download": [MockFunction],
                  "encryptText": [MockFunction],
                  "getUnusedKey": [MockFunction],
                  "keystore": Object {
                    "clear": [MockFunction],
                  },
                  "kms": Object {
                    "prepareRequest": [MockFunction],
                    "request": [MockFunction],
                  },
                },
                "mercury": Object {
                  "connect": [MockFunction],
                  "listen": [MockFunction],
                  "listenToAndRun": [MockFunction],
                  "on": [MockFunction],
                  "once": [MockFunction],
                  "stopListening": [MockFunction],
                },
                "user": Object {
                  "activate": [MockFunction],
                  "register": [MockFunction],
                },
              },
              "isAuthenticated": false,
              "isAuthenticating": false,
              "listenToAndRun": [MockFunction] {
                "calls": Array [
                  Array [
                    [Circular],
                    "change:canAuthorize",
                    [Function],
                  ],
                  Array [
                    [Circular],
                    "change:isAuthenticating",
                    [Function],
                  ],
                  Array [
                    Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "change:registered",
                    [Function],
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                ],
              },
              "on": [MockFunction],
              "ready": false,
              "request": [MockFunction],
              "search": Object {
                "people": [MockFunction],
                "search": [MockFunction],
              },
              "support": Object {
                "submitCallLogs": [MockFunction],
              },
              "util": Object {
                "html": Object {
                  "escapeSync": [MockFunction],
                  "filterSync": [MockFunction],
                },
              },
            },
            "status": Immutable.Record {
              "authenticated": false,
              "authenticating": false,
              "registered": false,
              "registerError": false,
              "registering": false,
            },
          },
          "storeSparkInstance": [Function],
          "updateSparkStatus": [Function],
        },
        "memoizedState": null,
        "mode": 0,
        "nextEffect": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 5,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 5,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": [Circular],
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "addError": [MockFunction],
            "spark": Object {
              "authorization": "authorization",
              "internal": Object {
                "conversation": "conversation",
                "feature": "feature",
                "flag": "flag",
                "mercury": "mercury",
                "presence": "presence",
                "search": "search",
                "team": "team",
              },
              "listenToAndRun": [MockFunction],
              "logger": "logger",
              "meetings": "meetings",
              "people": "people",
              "phone": "phone",
              "rooms": "rooms",
            },
            "storeSparkInstance": [MockFunction],
            "updateSparkStatus": [MockFunction],
          },
          "memoizedState": Object {},
          "mode": 0,
          "nextEffect": [Circular],
          "pendingProps": Object {
            "addError": [MockFunction],
            "spark": Object {
              "authorization": "authorization",
              "internal": Object {
                "conversation": "conversation",
                "feature": "feature",
                "flag": "flag",
                "mercury": "mercury",
                "presence": "presence",
                "search": "search",
                "team": "team",
              },
              "listenToAndRun": [MockFunction],
              "logger": "logger",
              "meetings": "meetings",
              "people": "people",
              "phone": "phone",
              "rooms": "rooms",
            },
            "storeSparkInstance": [MockFunction],
            "updateSparkStatus": [MockFunction],
          },
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": Connect {
            "__reactInternalMemoizedMaskedChildContext": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": null,
            },
            "__reactInternalMemoizedMergedChildContext": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              },
            },
            "__reactInternalMemoizedUnmaskedChildContext": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": null,
            },
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": null,
            },
            "notifyNestedSubs": [Function],
            "props": Object {
              "addError": [MockFunction],
              "spark": Object {
                "authorization": "authorization",
                "internal": Object {
                  "conversation": "conversation",
                  "feature": "feature",
                  "flag": "flag",
                  "mercury": "mercury",
                  "presence": "presence",
                  "search": "search",
                  "team": "team",
                },
                "listenToAndRun": [MockFunction],
                "logger": "logger",
                "meetings": "meetings",
                "people": "people",
                "phone": "phone",
                "rooms": "rooms",
              },
              "storeSparkInstance": [MockFunction],
              "updateSparkStatus": [MockFunction],
            },
            "propsMode": false,
            "refs": Object {},
            "renderCount": 0,
            "selector": Object {
              "error": null,
              "props": Object {
                "addError": [Function],
                "registerDevice": [Function],
                "spark": Immutable.Map {
                  "error": null,
                  "spark": Object {
                    "authenticate": [MockFunction],
                    "board": Object {
                      "decryptContents": [MockFunction],
                      "decryptSingleContent": [MockFunction],
                      "encryptContents": [MockFunction],
                      "encryptSingleContent": [MockFunction],
                      "persistence": Object {
                        "addContent": [MockFunction],
                        "addImage": [MockFunction],
                        "createChannel": [MockFunction],
                        "deleteAllContent": [MockFunction],
                        "deleteContent": [MockFunction],
                        "getAllContent": [MockFunction],
                        "getChannel": [MockFunction],
                        "getChannels": [MockFunction],
                        "ping": [MockFunction],
                        "register": [MockFunction],
                      },
                      "realtime": Object {
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "publish": [MockFunction],
                        "set": [MockFunction],
                      },
                    },
                    "client": Object {
                      "trackingIdBase": "testTrackingIdBase",
                    },
                    "config": Object {
                      "trackingIdPrefix": "testTrackingIdPrefix",
                    },
                    "credentials": Object {
                      "authorization": Object {},
                      "federation": true,
                    },
                    "feature": Object {
                      "getFeature": [MockFunction],
                    },
                    "flagging": Object {
                      "flag": [MockFunction],
                      "mapToActivities": [MockFunction],
                    },
                    "internal": Object {
                      "conversation": Object {
                        "assign": [MockFunction],
                        "download": [MockFunction],
                        "get": [MockFunction],
                        "unassign": [MockFunction],
                        "update": [MockFunction],
                      },
                      "device": Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "encryption": Object {
                        "decryptScr": [MockFunction],
                        "decryptText": [MockFunction],
                        "download": [MockFunction],
                        "encryptText": [MockFunction],
                        "getUnusedKey": [MockFunction],
                        "keystore": Object {
                          "clear": [MockFunction],
                        },
                        "kms": Object {
                          "prepareRequest": [MockFunction],
                          "request": [MockFunction],
                        },
                      },
                      "mercury": Object {
                        "connect": [MockFunction],
                        "listen": [MockFunction],
                        "listenToAndRun": [MockFunction],
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "stopListening": [MockFunction],
                      },
                      "user": Object {
                        "activate": [MockFunction],
                        "register": [MockFunction],
                      },
                    },
                    "isAuthenticated": false,
                    "isAuthenticating": false,
                    "listenToAndRun": [MockFunction] {
                      "calls": Array [
                        Array [
                          [Circular],
                          "change:canAuthorize",
                          [Function],
                        ],
                        Array [
                          [Circular],
                          "change:isAuthenticating",
                          [Function],
                        ],
                        Array [
                          Object {
                            "getServiceUrl": [MockFunction],
                            "register": [MockFunction],
                            "remove": [MockFunction],
                            "services": Object {
                              "roomServiceUrl": "https://example.com/devices/services/room/1",
                            },
                            "url": "https://example.com/devices/1",
                          },
                          "change:registered",
                          [Function],
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                      ],
                    },
                    "on": [MockFunction],
                    "ready": false,
                    "request": [MockFunction],
                    "search": Object {
                      "people": [MockFunction],
                      "search": [MockFunction],
                    },
                    "support": Object {
                      "submitCallLogs": [MockFunction],
                    },
                    "util": Object {
                      "html": Object {
                        "escapeSync": [MockFunction],
                        "filterSync": [MockFunction],
                      },
                    },
                  },
                  "status": Immutable.Record {
                    "authenticated": false,
                    "authenticating": false,
                    "registered": false,
                    "registerError": false,
                    "registering": false,
                  },
                },
                "storeSparkInstance": [Function],
                "updateSparkStatus": [Function],
              },
              "run": [Function],
              "shouldComponentUpdate": false,
            },
            "setWrappedInstance": [Function],
            "state": Object {},
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "subscription": Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": null,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "unsubscribe": [Function],
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
            "version": 1,
          },
          "tag": 1,
          "type": [Function],
          "updateQueue": null,
        },
        "pendingProps": Object {
          "accessToken": "",
          "addError": [Function],
          "guestToken": "",
          "registerDevice": [Function],
          "sdkInstance": undefined,
          "spark": Immutable.Map {
            "error": null,
            "spark": Object {
              "authenticate": [MockFunction],
              "board": Object {
                "decryptContents": [MockFunction],
                "decryptSingleContent": [MockFunction],
                "encryptContents": [MockFunction],
                "encryptSingleContent": [MockFunction],
                "persistence": Object {
                  "addContent": [MockFunction],
                  "addImage": [MockFunction],
                  "createChannel": [MockFunction],
                  "deleteAllContent": [MockFunction],
                  "deleteContent": [MockFunction],
                  "getAllContent": [MockFunction],
                  "getChannel": [MockFunction],
                  "getChannels": [MockFunction],
                  "ping": [MockFunction],
                  "register": [MockFunction],
                },
                "realtime": Object {
                  "on": [MockFunction],
                  "once": [MockFunction],
                  "publish": [MockFunction],
                  "set": [MockFunction],
                },
              },
              "client": Object {
                "trackingIdBase": "testTrackingIdBase",
              },
              "config": Object {
                "trackingIdPrefix": "testTrackingIdPrefix",
              },
              "credentials": Object {
                "authorization": Object {},
                "federation": true,
              },
              "feature": Object {
                "getFeature": [MockFunction],
              },
              "flagging": Object {
                "flag": [MockFunction],
                "mapToActivities": [MockFunction],
              },
              "internal": Object {
                "conversation": Object {
                  "assign": [MockFunction],
                  "download": [MockFunction],
                  "get": [MockFunction],
                  "unassign": [MockFunction],
                  "update": [MockFunction],
                },
                "device": Object {
                  "getServiceUrl": [MockFunction],
                  "register": [MockFunction],
                  "remove": [MockFunction],
                  "services": Object {
                    "roomServiceUrl": "https://example.com/devices/services/room/1",
                  },
                  "url": "https://example.com/devices/1",
                },
                "encryption": Object {
                  "decryptScr": [MockFunction],
                  "decryptText": [MockFunction],
                  "download": [MockFunction],
                  "encryptText": [MockFunction],
                  "getUnusedKey": [MockFunction],
                  "keystore": Object {
                    "clear": [MockFunction],
                  },
                  "kms": Object {
                    "prepareRequest": [MockFunction],
                    "request": [MockFunction],
                  },
                },
                "mercury": Object {
                  "connect": [MockFunction],
                  "listen": [MockFunction],
                  "listenToAndRun": [MockFunction],
                  "on": [MockFunction],
                  "once": [MockFunction],
                  "stopListening": [MockFunction],
                },
                "user": Object {
                  "activate": [MockFunction],
                  "register": [MockFunction],
                },
              },
              "isAuthenticated": false,
              "isAuthenticating": false,
              "listenToAndRun": [MockFunction] {
                "calls": Array [
                  Array [
                    [Circular],
                    "change:canAuthorize",
                    [Function],
                  ],
                  Array [
                    [Circular],
                    "change:isAuthenticating",
                    [Function],
                  ],
                  Array [
                    Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "change:registered",
                    [Function],
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                ],
              },
              "on": [MockFunction],
              "ready": false,
              "request": [MockFunction],
              "search": Object {
                "people": [MockFunction],
                "search": [MockFunction],
              },
              "support": Object {
                "submitCallLogs": [MockFunction],
              },
              "util": Object {
                "html": Object {
                  "escapeSync": [MockFunction],
                  "filterSync": [MockFunction],
                },
              },
            },
            "status": Immutable.Record {
              "authenticated": false,
              "authenticating": false,
              "registered": false,
              "registerError": false,
              "registering": false,
            },
          },
          "storeSparkInstance": [Function],
          "updateSparkStatus": [Function],
        },
        "ref": null,
        "return": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 5,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 5,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": [Circular],
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "addError": [MockFunction],
            "spark": Object {
              "authorization": "authorization",
              "internal": Object {
                "conversation": "conversation",
                "feature": "feature",
                "flag": "flag",
                "mercury": "mercury",
                "presence": "presence",
                "search": "search",
                "team": "team",
              },
              "listenToAndRun": [MockFunction],
              "logger": "logger",
              "meetings": "meetings",
              "people": "people",
              "phone": "phone",
              "rooms": "rooms",
            },
            "storeSparkInstance": [MockFunction],
            "updateSparkStatus": [MockFunction],
          },
          "memoizedState": Object {},
          "mode": 0,
          "nextEffect": [Circular],
          "pendingProps": Object {
            "addError": [MockFunction],
            "spark": Object {
              "authorization": "authorization",
              "internal": Object {
                "conversation": "conversation",
                "feature": "feature",
                "flag": "flag",
                "mercury": "mercury",
                "presence": "presence",
                "search": "search",
                "team": "team",
              },
              "listenToAndRun": [MockFunction],
              "logger": "logger",
              "meetings": "meetings",
              "people": "people",
              "phone": "phone",
              "rooms": "rooms",
            },
            "storeSparkInstance": [MockFunction],
            "updateSparkStatus": [MockFunction],
          },
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": Connect {
            "__reactInternalMemoizedMaskedChildContext": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": null,
            },
            "__reactInternalMemoizedMergedChildContext": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              },
            },
            "__reactInternalMemoizedUnmaskedChildContext": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": null,
            },
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": null,
            },
            "notifyNestedSubs": [Function],
            "props": Object {
              "addError": [MockFunction],
              "spark": Object {
                "authorization": "authorization",
                "internal": Object {
                  "conversation": "conversation",
                  "feature": "feature",
                  "flag": "flag",
                  "mercury": "mercury",
                  "presence": "presence",
                  "search": "search",
                  "team": "team",
                },
                "listenToAndRun": [MockFunction],
                "logger": "logger",
                "meetings": "meetings",
                "people": "people",
                "phone": "phone",
                "rooms": "rooms",
              },
              "storeSparkInstance": [MockFunction],
              "updateSparkStatus": [MockFunction],
            },
            "propsMode": false,
            "refs": Object {},
            "renderCount": 0,
            "selector": Object {
              "error": null,
              "props": Object {
                "addError": [Function],
                "registerDevice": [Function],
                "spark": Immutable.Map {
                  "error": null,
                  "spark": Object {
                    "authenticate": [MockFunction],
                    "board": Object {
                      "decryptContents": [MockFunction],
                      "decryptSingleContent": [MockFunction],
                      "encryptContents": [MockFunction],
                      "encryptSingleContent": [MockFunction],
                      "persistence": Object {
                        "addContent": [MockFunction],
                        "addImage": [MockFunction],
                        "createChannel": [MockFunction],
                        "deleteAllContent": [MockFunction],
                        "deleteContent": [MockFunction],
                        "getAllContent": [MockFunction],
                        "getChannel": [MockFunction],
                        "getChannels": [MockFunction],
                        "ping": [MockFunction],
                        "register": [MockFunction],
                      },
                      "realtime": Object {
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "publish": [MockFunction],
                        "set": [MockFunction],
                      },
                    },
                    "client": Object {
                      "trackingIdBase": "testTrackingIdBase",
                    },
                    "config": Object {
                      "trackingIdPrefix": "testTrackingIdPrefix",
                    },
                    "credentials": Object {
                      "authorization": Object {},
                      "federation": true,
                    },
                    "feature": Object {
                      "getFeature": [MockFunction],
                    },
                    "flagging": Object {
                      "flag": [MockFunction],
                      "mapToActivities": [MockFunction],
                    },
                    "internal": Object {
                      "conversation": Object {
                        "assign": [MockFunction],
                        "download": [MockFunction],
                        "get": [MockFunction],
                        "unassign": [MockFunction],
                        "update": [MockFunction],
                      },
                      "device": Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "encryption": Object {
                        "decryptScr": [MockFunction],
                        "decryptText": [MockFunction],
                        "download": [MockFunction],
                        "encryptText": [MockFunction],
                        "getUnusedKey": [MockFunction],
                        "keystore": Object {
                          "clear": [MockFunction],
                        },
                        "kms": Object {
                          "prepareRequest": [MockFunction],
                          "request": [MockFunction],
                        },
                      },
                      "mercury": Object {
                        "connect": [MockFunction],
                        "listen": [MockFunction],
                        "listenToAndRun": [MockFunction],
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "stopListening": [MockFunction],
                      },
                      "user": Object {
                        "activate": [MockFunction],
                        "register": [MockFunction],
                      },
                    },
                    "isAuthenticated": false,
                    "isAuthenticating": false,
                    "listenToAndRun": [MockFunction] {
                      "calls": Array [
                        Array [
                          [Circular],
                          "change:canAuthorize",
                          [Function],
                        ],
                        Array [
                          [Circular],
                          "change:isAuthenticating",
                          [Function],
                        ],
                        Array [
                          Object {
                            "getServiceUrl": [MockFunction],
                            "register": [MockFunction],
                            "remove": [MockFunction],
                            "services": Object {
                              "roomServiceUrl": "https://example.com/devices/services/room/1",
                            },
                            "url": "https://example.com/devices/1",
                          },
                          "change:registered",
                          [Function],
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                      ],
                    },
                    "on": [MockFunction],
                    "ready": false,
                    "request": [MockFunction],
                    "search": Object {
                      "people": [MockFunction],
                      "search": [MockFunction],
                    },
                    "support": Object {
                      "submitCallLogs": [MockFunction],
                    },
                    "util": Object {
                      "html": Object {
                        "escapeSync": [MockFunction],
                        "filterSync": [MockFunction],
                      },
                    },
                  },
                  "status": Immutable.Record {
                    "authenticated": false,
                    "authenticating": false,
                    "registered": false,
                    "registerError": false,
                    "registering": false,
                  },
                },
                "storeSparkInstance": [Function],
                "updateSparkStatus": [Function],
              },
              "run": [Function],
              "shouldComponentUpdate": false,
            },
            "setWrappedInstance": [Function],
            "state": Object {},
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "subscription": Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": null,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "unsubscribe": [Function],
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
            "version": 1,
          },
          "tag": 1,
          "type": [Function],
          "updateQueue": null,
        },
        "sibling": null,
        "stateNode": SparkComponent {
          "_reactInternalFiber": [Circular],
          "_reactInternalInstance": Object {},
          "context": Object {},
          "props": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "refs": Object {},
          "state": null,
          "storeSDKInstance": [Function],
          "updater": Object {
            "enqueueForceUpdate": [Function],
            "enqueueReplaceState": [Function],
            "enqueueSetState": [Function],
            "isMounted": [Function],
          },
        },
        "tag": 1,
        "type": [Function],
        "updateQueue": null,
      },
      "index": 0,
      "key": null,
      "lastEffect": FiberNode {
        "_debugHookTypes": null,
        "_debugID": 5,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": null,
        "_debugSource": null,
        "alternate": null,
        "child": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "alternate": null,
          "child": null,
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 5,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": [Circular],
          "pendingProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": SparkComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "accessToken": "",
              "addError": [Function],
              "guestToken": "",
              "registerDevice": [Function],
              "sdkInstance": undefined,
              "spark": Immutable.Map {
                "error": null,
                "spark": Object {
                  "authenticate": [MockFunction],
                  "board": Object {
                    "decryptContents": [MockFunction],
                    "decryptSingleContent": [MockFunction],
                    "encryptContents": [MockFunction],
                    "encryptSingleContent": [MockFunction],
                    "persistence": Object {
                      "addContent": [MockFunction],
                      "addImage": [MockFunction],
                      "createChannel": [MockFunction],
                      "deleteAllContent": [MockFunction],
                      "deleteContent": [MockFunction],
                      "getAllContent": [MockFunction],
                      "getChannel": [MockFunction],
                      "getChannels": [MockFunction],
                      "ping": [MockFunction],
                      "register": [MockFunction],
                    },
                    "realtime": Object {
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "publish": [MockFunction],
                      "set": [MockFunction],
                    },
                  },
                  "client": Object {
                    "trackingIdBase": "testTrackingIdBase",
                  },
                  "config": Object {
                    "trackingIdPrefix": "testTrackingIdPrefix",
                  },
                  "credentials": Object {
                    "authorization": Object {},
                    "federation": true,
                  },
                  "feature": Object {
                    "getFeature": [MockFunction],
                  },
                  "flagging": Object {
                    "flag": [MockFunction],
                    "mapToActivities": [MockFunction],
                  },
                  "internal": Object {
                    "conversation": Object {
                      "assign": [MockFunction],
                      "download": [MockFunction],
                      "get": [MockFunction],
                      "unassign": [MockFunction],
                      "update": [MockFunction],
                    },
                    "device": Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "encryption": Object {
                      "decryptScr": [MockFunction],
                      "decryptText": [MockFunction],
                      "download": [MockFunction],
                      "encryptText": [MockFunction],
                      "getUnusedKey": [MockFunction],
                      "keystore": Object {
                        "clear": [MockFunction],
                      },
                      "kms": Object {
                        "prepareRequest": [MockFunction],
                        "request": [MockFunction],
                      },
                    },
                    "mercury": Object {
                      "connect": [MockFunction],
                      "listen": [MockFunction],
                      "listenToAndRun": [MockFunction],
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "stopListening": [MockFunction],
                    },
                    "user": Object {
                      "activate": [MockFunction],
                      "register": [MockFunction],
                    },
                  },
                  "isAuthenticated": false,
                  "isAuthenticating": false,
                  "listenToAndRun": [MockFunction] {
                    "calls": Array [
                      Array [
                        [Circular],
                        "change:canAuthorize",
                        [Function],
                      ],
                      Array [
                        [Circular],
                        "change:isAuthenticating",
                        [Function],
                      ],
                      Array [
                        Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "change:registered",
                        [Function],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                    ],
                  },
                  "on": [MockFunction],
                  "ready": false,
                  "request": [MockFunction],
                  "search": Object {
                    "people": [MockFunction],
                    "search": [MockFunction],
                  },
                  "support": Object {
                    "submitCallLogs": [MockFunction],
                  },
                  "util": Object {
                    "html": Object {
                      "escapeSync": [MockFunction],
                      "filterSync": [MockFunction],
                    },
                  },
                },
                "status": Immutable.Record {
                  "authenticated": false,
                  "authenticating": false,
                  "registered": false,
                  "registerError": false,
                  "registering": false,
                },
              },
              "storeSparkInstance": [Function],
              "updateSparkStatus": [Function],
            },
            "refs": Object {},
            "state": null,
            "storeSDKInstance": [Function],
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "type": [Function],
          "updateQueue": null,
        },
        "childExpirationTime": 0,
        "contextDependencies": null,
        "effectTag": 5,
        "elementType": [Function],
        "expirationTime": 0,
        "firstEffect": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "alternate": null,
          "child": null,
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 5,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": [Circular],
          "pendingProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": SparkComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "accessToken": "",
              "addError": [Function],
              "guestToken": "",
              "registerDevice": [Function],
              "sdkInstance": undefined,
              "spark": Immutable.Map {
                "error": null,
                "spark": Object {
                  "authenticate": [MockFunction],
                  "board": Object {
                    "decryptContents": [MockFunction],
                    "decryptSingleContent": [MockFunction],
                    "encryptContents": [MockFunction],
                    "encryptSingleContent": [MockFunction],
                    "persistence": Object {
                      "addContent": [MockFunction],
                      "addImage": [MockFunction],
                      "createChannel": [MockFunction],
                      "deleteAllContent": [MockFunction],
                      "deleteContent": [MockFunction],
                      "getAllContent": [MockFunction],
                      "getChannel": [MockFunction],
                      "getChannels": [MockFunction],
                      "ping": [MockFunction],
                      "register": [MockFunction],
                    },
                    "realtime": Object {
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "publish": [MockFunction],
                      "set": [MockFunction],
                    },
                  },
                  "client": Object {
                    "trackingIdBase": "testTrackingIdBase",
                  },
                  "config": Object {
                    "trackingIdPrefix": "testTrackingIdPrefix",
                  },
                  "credentials": Object {
                    "authorization": Object {},
                    "federation": true,
                  },
                  "feature": Object {
                    "getFeature": [MockFunction],
                  },
                  "flagging": Object {
                    "flag": [MockFunction],
                    "mapToActivities": [MockFunction],
                  },
                  "internal": Object {
                    "conversation": Object {
                      "assign": [MockFunction],
                      "download": [MockFunction],
                      "get": [MockFunction],
                      "unassign": [MockFunction],
                      "update": [MockFunction],
                    },
                    "device": Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "encryption": Object {
                      "decryptScr": [MockFunction],
                      "decryptText": [MockFunction],
                      "download": [MockFunction],
                      "encryptText": [MockFunction],
                      "getUnusedKey": [MockFunction],
                      "keystore": Object {
                        "clear": [MockFunction],
                      },
                      "kms": Object {
                        "prepareRequest": [MockFunction],
                        "request": [MockFunction],
                      },
                    },
                    "mercury": Object {
                      "connect": [MockFunction],
                      "listen": [MockFunction],
                      "listenToAndRun": [MockFunction],
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "stopListening": [MockFunction],
                    },
                    "user": Object {
                      "activate": [MockFunction],
                      "register": [MockFunction],
                    },
                  },
                  "isAuthenticated": false,
                  "isAuthenticating": false,
                  "listenToAndRun": [MockFunction] {
                    "calls": Array [
                      Array [
                        [Circular],
                        "change:canAuthorize",
                        [Function],
                      ],
                      Array [
                        [Circular],
                        "change:isAuthenticating",
                        [Function],
                      ],
                      Array [
                        Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "change:registered",
                        [Function],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                    ],
                  },
                  "on": [MockFunction],
                  "ready": false,
                  "request": [MockFunction],
                  "search": Object {
                    "people": [MockFunction],
                    "search": [MockFunction],
                  },
                  "support": Object {
                    "submitCallLogs": [MockFunction],
                  },
                  "util": Object {
                    "html": Object {
                      "escapeSync": [MockFunction],
                      "filterSync": [MockFunction],
                    },
                  },
                },
                "status": Immutable.Record {
                  "authenticated": false,
                  "authenticating": false,
                  "registered": false,
                  "registerError": false,
                  "registering": false,
                },
              },
              "storeSparkInstance": [Function],
              "updateSparkStatus": [Function],
            },
            "refs": Object {},
            "state": null,
            "storeSDKInstance": [Function],
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "type": [Function],
          "updateQueue": null,
        },
        "index": 0,
        "key": null,
        "lastEffect": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "alternate": null,
          "child": null,
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 5,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": [Circular],
          "pendingProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": SparkComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "accessToken": "",
              "addError": [Function],
              "guestToken": "",
              "registerDevice": [Function],
              "sdkInstance": undefined,
              "spark": Immutable.Map {
                "error": null,
                "spark": Object {
                  "authenticate": [MockFunction],
                  "board": Object {
                    "decryptContents": [MockFunction],
                    "decryptSingleContent": [MockFunction],
                    "encryptContents": [MockFunction],
                    "encryptSingleContent": [MockFunction],
                    "persistence": Object {
                      "addContent": [MockFunction],
                      "addImage": [MockFunction],
                      "createChannel": [MockFunction],
                      "deleteAllContent": [MockFunction],
                      "deleteContent": [MockFunction],
                      "getAllContent": [MockFunction],
                      "getChannel": [MockFunction],
                      "getChannels": [MockFunction],
                      "ping": [MockFunction],
                      "register": [MockFunction],
                    },
                    "realtime": Object {
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "publish": [MockFunction],
                      "set": [MockFunction],
                    },
                  },
                  "client": Object {
                    "trackingIdBase": "testTrackingIdBase",
                  },
                  "config": Object {
                    "trackingIdPrefix": "testTrackingIdPrefix",
                  },
                  "credentials": Object {
                    "authorization": Object {},
                    "federation": true,
                  },
                  "feature": Object {
                    "getFeature": [MockFunction],
                  },
                  "flagging": Object {
                    "flag": [MockFunction],
                    "mapToActivities": [MockFunction],
                  },
                  "internal": Object {
                    "conversation": Object {
                      "assign": [MockFunction],
                      "download": [MockFunction],
                      "get": [MockFunction],
                      "unassign": [MockFunction],
                      "update": [MockFunction],
                    },
                    "device": Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "encryption": Object {
                      "decryptScr": [MockFunction],
                      "decryptText": [MockFunction],
                      "download": [MockFunction],
                      "encryptText": [MockFunction],
                      "getUnusedKey": [MockFunction],
                      "keystore": Object {
                        "clear": [MockFunction],
                      },
                      "kms": Object {
                        "prepareRequest": [MockFunction],
                        "request": [MockFunction],
                      },
                    },
                    "mercury": Object {
                      "connect": [MockFunction],
                      "listen": [MockFunction],
                      "listenToAndRun": [MockFunction],
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "stopListening": [MockFunction],
                    },
                    "user": Object {
                      "activate": [MockFunction],
                      "register": [MockFunction],
                    },
                  },
                  "isAuthenticated": false,
                  "isAuthenticating": false,
                  "listenToAndRun": [MockFunction] {
                    "calls": Array [
                      Array [
                        [Circular],
                        "change:canAuthorize",
                        [Function],
                      ],
                      Array [
                        [Circular],
                        "change:isAuthenticating",
                        [Function],
                      ],
                      Array [
                        Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "change:registered",
                        [Function],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                    ],
                  },
                  "on": [MockFunction],
                  "ready": false,
                  "request": [MockFunction],
                  "search": Object {
                    "people": [MockFunction],
                    "search": [MockFunction],
                  },
                  "support": Object {
                    "submitCallLogs": [MockFunction],
                  },
                  "util": Object {
                    "html": Object {
                      "escapeSync": [MockFunction],
                      "filterSync": [MockFunction],
                    },
                  },
                },
                "status": Immutable.Record {
                  "authenticated": false,
                  "authenticating": false,
                  "registered": false,
                  "registerError": false,
                  "registering": false,
                },
              },
              "storeSparkInstance": [Function],
              "updateSparkStatus": [Function],
            },
            "refs": Object {},
            "state": null,
            "storeSDKInstance": [Function],
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "type": [Function],
          "updateQueue": null,
        },
        "memoizedProps": Object {
          "addError": [MockFunction],
          "spark": Object {
            "authorization": "authorization",
            "internal": Object {
              "conversation": "conversation",
              "feature": "feature",
              "flag": "flag",
              "mercury": "mercury",
              "presence": "presence",
              "search": "search",
              "team": "team",
            },
            "listenToAndRun": [MockFunction],
            "logger": "logger",
            "meetings": "meetings",
            "people": "people",
            "phone": "phone",
            "rooms": "rooms",
          },
          "storeSparkInstance": [MockFunction],
          "updateSparkStatus": [MockFunction],
        },
        "memoizedState": Object {},
        "mode": 0,
        "nextEffect": [Circular],
        "pendingProps": Object {
          "addError": [MockFunction],
          "spark": Object {
            "authorization": "authorization",
            "internal": Object {
              "conversation": "conversation",
              "feature": "feature",
              "flag": "flag",
              "mercury": "mercury",
              "presence": "presence",
              "search": "search",
              "team": "team",
            },
            "listenToAndRun": [MockFunction],
            "logger": "logger",
            "meetings": "meetings",
            "people": "people",
            "phone": "phone",
            "rooms": "rooms",
          },
          "storeSparkInstance": [MockFunction],
          "updateSparkStatus": [MockFunction],
        },
        "ref": null,
        "return": [Circular],
        "sibling": null,
        "stateNode": Connect {
          "__reactInternalMemoizedMaskedChildContext": Object {
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "storeSubscription": null,
          },
          "__reactInternalMemoizedMergedChildContext": Object {
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "storeSubscription": Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": null,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "unsubscribe": [Function],
            },
          },
          "__reactInternalMemoizedUnmaskedChildContext": Object {
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "storeSubscription": null,
          },
          "_reactInternalFiber": [Circular],
          "_reactInternalInstance": Object {},
          "context": Object {
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "storeSubscription": null,
          },
          "notifyNestedSubs": [Function],
          "props": Object {
            "addError": [MockFunction],
            "spark": Object {
              "authorization": "authorization",
              "internal": Object {
                "conversation": "conversation",
                "feature": "feature",
                "flag": "flag",
                "mercury": "mercury",
                "presence": "presence",
                "search": "search",
                "team": "team",
              },
              "listenToAndRun": [MockFunction],
              "logger": "logger",
              "meetings": "meetings",
              "people": "people",
              "phone": "phone",
              "rooms": "rooms",
            },
            "storeSparkInstance": [MockFunction],
            "updateSparkStatus": [MockFunction],
          },
          "propsMode": false,
          "refs": Object {},
          "renderCount": 0,
          "selector": Object {
            "error": null,
            "props": Object {
              "addError": [Function],
              "registerDevice": [Function],
              "spark": Immutable.Map {
                "error": null,
                "spark": Object {
                  "authenticate": [MockFunction],
                  "board": Object {
                    "decryptContents": [MockFunction],
                    "decryptSingleContent": [MockFunction],
                    "encryptContents": [MockFunction],
                    "encryptSingleContent": [MockFunction],
                    "persistence": Object {
                      "addContent": [MockFunction],
                      "addImage": [MockFunction],
                      "createChannel": [MockFunction],
                      "deleteAllContent": [MockFunction],
                      "deleteContent": [MockFunction],
                      "getAllContent": [MockFunction],
                      "getChannel": [MockFunction],
                      "getChannels": [MockFunction],
                      "ping": [MockFunction],
                      "register": [MockFunction],
                    },
                    "realtime": Object {
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "publish": [MockFunction],
                      "set": [MockFunction],
                    },
                  },
                  "client": Object {
                    "trackingIdBase": "testTrackingIdBase",
                  },
                  "config": Object {
                    "trackingIdPrefix": "testTrackingIdPrefix",
                  },
                  "credentials": Object {
                    "authorization": Object {},
                    "federation": true,
                  },
                  "feature": Object {
                    "getFeature": [MockFunction],
                  },
                  "flagging": Object {
                    "flag": [MockFunction],
                    "mapToActivities": [MockFunction],
                  },
                  "internal": Object {
                    "conversation": Object {
                      "assign": [MockFunction],
                      "download": [MockFunction],
                      "get": [MockFunction],
                      "unassign": [MockFunction],
                      "update": [MockFunction],
                    },
                    "device": Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "encryption": Object {
                      "decryptScr": [MockFunction],
                      "decryptText": [MockFunction],
                      "download": [MockFunction],
                      "encryptText": [MockFunction],
                      "getUnusedKey": [MockFunction],
                      "keystore": Object {
                        "clear": [MockFunction],
                      },
                      "kms": Object {
                        "prepareRequest": [MockFunction],
                        "request": [MockFunction],
                      },
                    },
                    "mercury": Object {
                      "connect": [MockFunction],
                      "listen": [MockFunction],
                      "listenToAndRun": [MockFunction],
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "stopListening": [MockFunction],
                    },
                    "user": Object {
                      "activate": [MockFunction],
                      "register": [MockFunction],
                    },
                  },
                  "isAuthenticated": false,
                  "isAuthenticating": false,
                  "listenToAndRun": [MockFunction] {
                    "calls": Array [
                      Array [
                        [Circular],
                        "change:canAuthorize",
                        [Function],
                      ],
                      Array [
                        [Circular],
                        "change:isAuthenticating",
                        [Function],
                      ],
                      Array [
                        Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "change:registered",
                        [Function],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                    ],
                  },
                  "on": [MockFunction],
                  "ready": false,
                  "request": [MockFunction],
                  "search": Object {
                    "people": [MockFunction],
                    "search": [MockFunction],
                  },
                  "support": Object {
                    "submitCallLogs": [MockFunction],
                  },
                  "util": Object {
                    "html": Object {
                      "escapeSync": [MockFunction],
                      "filterSync": [MockFunction],
                    },
                  },
                },
                "status": Immutable.Record {
                  "authenticated": false,
                  "authenticating": false,
                  "registered": false,
                  "registerError": false,
                  "registering": false,
                },
              },
              "storeSparkInstance": [Function],
              "updateSparkStatus": [Function],
            },
            "run": [Function],
            "shouldComponentUpdate": false,
          },
          "setWrappedInstance": [Function],
          "state": Object {},
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "subscription": Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": null,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "unsubscribe": [Function],
          },
          "updater": Object {
            "enqueueForceUpdate": [Function],
            "enqueueReplaceState": [Function],
            "enqueueSetState": [Function],
            "isMounted": [Function],
          },
          "version": 1,
        },
        "tag": 1,
        "type": [Function],
        "updateQueue": null,
      },
      "memoizedProps": Object {
        "children": <Connect(SparkComponent)
          addError={[MockFunction]}
          spark={
            Object {
              "authorization": "authorization",
              "internal": Object {
                "conversation": "conversation",
                "feature": "feature",
                "flag": "flag",
                "mercury": "mercury",
                "presence": "presence",
                "search": "search",
                "team": "team",
              },
              "listenToAndRun": [MockFunction],
              "logger": "logger",
              "meetings": "meetings",
              "people": "people",
              "phone": "phone",
              "rooms": "rooms",
            }
          }
          storeSparkInstance={[MockFunction]}
          updateSparkStatus={[MockFunction]}
        />,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "memoizedState": null,
      "mode": 0,
      "nextEffect": null,
      "pendingProps": Object {
        "children": <Connect(SparkComponent)
          addError={[MockFunction]}
          spark={
            Object {
              "authorization": "authorization",
              "internal": Object {
                "conversation": "conversation",
                "feature": "feature",
                "flag": "flag",
                "mercury": "mercury",
                "presence": "presence",
                "search": "search",
                "team": "team",
              },
              "listenToAndRun": [MockFunction],
              "logger": "logger",
              "meetings": "meetings",
              "people": "people",
              "phone": "phone",
              "rooms": "rooms",
            }
          }
          storeSparkInstance={[MockFunction]}
          updateSparkStatus={[MockFunction]}
        />,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "ref": null,
      "return": FiberNode {
        "_debugHookTypes": null,
        "_debugID": 2,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": null,
        "_debugSource": null,
        "alternate": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 2,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": [Circular],
          "child": null,
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 0,
          "elementType": null,
          "expirationTime": 1073741823,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": null,
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": null,
          "ref": null,
          "return": null,
          "sibling": null,
          "stateNode": Object {
            "containerInfo": Object {
              "children": Array [],
              "createNodeMock": [Function],
              "tag": "CONTAINER",
            },
            "context": Object {},
            "current": [Circular],
            "didError": false,
            "earliestPendingTime": 0,
            "earliestSuspendedTime": 0,
            "expirationTime": 0,
            "finishedWork": null,
            "firstBatch": null,
            "hydrate": false,
            "latestPendingTime": 0,
            "latestPingedTime": 0,
            "latestSuspendedTime": 0,
            "nextExpirationTimeToWorkOn": 0,
            "nextScheduledRoot": null,
            "pendingChildren": null,
            "pendingCommitExpirationTime": 0,
            "pendingContext": null,
            "pingCache": null,
            "timeoutHandle": -1,
          },
          "tag": 3,
          "type": null,
          "updateQueue": Object {
            "baseState": null,
            "firstCapturedEffect": null,
            "firstCapturedUpdate": null,
            "firstEffect": null,
            "firstUpdate": Object {
              "callback": null,
              "expirationTime": 1073741823,
              "next": null,
              "nextEffect": null,
              "payload": Object {
                "element": <Provider
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                >
                  <Connect(SparkComponent)
                    addError={[MockFunction]}
                    spark={
                      Object {
                        "authorization": "authorization",
                        "internal": Object {
                          "conversation": "conversation",
                          "feature": "feature",
                          "flag": "flag",
                          "mercury": "mercury",
                          "presence": "presence",
                          "search": "search",
                          "team": "team",
                        },
                        "listenToAndRun": [MockFunction],
                        "logger": "logger",
                        "meetings": "meetings",
                        "people": "people",
                        "phone": "phone",
                        "rooms": "rooms",
                      }
                    }
                    storeSparkInstance={[MockFunction]}
                    updateSparkStatus={[MockFunction]}
                  />
                </Provider>,
              },
              "tag": 0,
            },
            "lastCapturedEffect": null,
            "lastCapturedUpdate": null,
            "lastEffect": null,
            "lastUpdate": Object {
              "callback": null,
              "expirationTime": 1073741823,
              "next": null,
              "nextEffect": null,
              "payload": Object {
                "element": <Provider
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                >
                  <Connect(SparkComponent)
                    addError={[MockFunction]}
                    spark={
                      Object {
                        "authorization": "authorization",
                        "internal": Object {
                          "conversation": "conversation",
                          "feature": "feature",
                          "flag": "flag",
                          "mercury": "mercury",
                          "presence": "presence",
                          "search": "search",
                          "team": "team",
                        },
                        "listenToAndRun": [MockFunction],
                        "logger": "logger",
                        "meetings": "meetings",
                        "people": "people",
                        "phone": "phone",
                        "rooms": "rooms",
                      }
                    }
                    storeSparkInstance={[MockFunction]}
                    updateSparkStatus={[MockFunction]}
                  />
                </Provider>,
              },
              "tag": 0,
            },
          },
        },
        "child": [Circular],
        "childExpirationTime": 0,
        "contextDependencies": null,
        "effectTag": 0,
        "elementType": null,
        "expirationTime": 0,
        "firstEffect": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 5,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 5,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "addError": [MockFunction],
              "spark": Object {
                "authorization": "authorization",
                "internal": Object {
                  "conversation": "conversation",
                  "feature": "feature",
                  "flag": "flag",
                  "mercury": "mercury",
                  "presence": "presence",
                  "search": "search",
                  "team": "team",
                },
                "listenToAndRun": [MockFunction],
                "logger": "logger",
                "meetings": "meetings",
                "people": "people",
                "phone": "phone",
                "rooms": "rooms",
              },
              "storeSparkInstance": [MockFunction],
              "updateSparkStatus": [MockFunction],
            },
            "memoizedState": Object {},
            "mode": 0,
            "nextEffect": [Circular],
            "pendingProps": Object {
              "addError": [MockFunction],
              "spark": Object {
                "authorization": "authorization",
                "internal": Object {
                  "conversation": "conversation",
                  "feature": "feature",
                  "flag": "flag",
                  "mercury": "mercury",
                  "presence": "presence",
                  "search": "search",
                  "team": "team",
                },
                "listenToAndRun": [MockFunction],
                "logger": "logger",
                "meetings": "meetings",
                "people": "people",
                "phone": "phone",
                "rooms": "rooms",
              },
              "storeSparkInstance": [MockFunction],
              "updateSparkStatus": [MockFunction],
            },
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": Connect {
              "__reactInternalMemoizedMaskedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "__reactInternalMemoizedMergedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "unsubscribe": [Function],
                },
              },
              "__reactInternalMemoizedUnmaskedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "notifyNestedSubs": [Function],
              "props": Object {
                "addError": [MockFunction],
                "spark": Object {
                  "authorization": "authorization",
                  "internal": Object {
                    "conversation": "conversation",
                    "feature": "feature",
                    "flag": "flag",
                    "mercury": "mercury",
                    "presence": "presence",
                    "search": "search",
                    "team": "team",
                  },
                  "listenToAndRun": [MockFunction],
                  "logger": "logger",
                  "meetings": "meetings",
                  "people": "people",
                  "phone": "phone",
                  "rooms": "rooms",
                },
                "storeSparkInstance": [MockFunction],
                "updateSparkStatus": [MockFunction],
              },
              "propsMode": false,
              "refs": Object {},
              "renderCount": 0,
              "selector": Object {
                "error": null,
                "props": Object {
                  "addError": [Function],
                  "registerDevice": [Function],
                  "spark": Immutable.Map {
                    "error": null,
                    "spark": Object {
                      "authenticate": [MockFunction],
                      "board": Object {
                        "decryptContents": [MockFunction],
                        "decryptSingleContent": [MockFunction],
                        "encryptContents": [MockFunction],
                        "encryptSingleContent": [MockFunction],
                        "persistence": Object {
                          "addContent": [MockFunction],
                          "addImage": [MockFunction],
                          "createChannel": [MockFunction],
                          "deleteAllContent": [MockFunction],
                          "deleteContent": [MockFunction],
                          "getAllContent": [MockFunction],
                          "getChannel": [MockFunction],
                          "getChannels": [MockFunction],
                          "ping": [MockFunction],
                          "register": [MockFunction],
                        },
                        "realtime": Object {
                          "on": [MockFunction],
                          "once": [MockFunction],
                          "publish": [MockFunction],
                          "set": [MockFunction],
                        },
                      },
                      "client": Object {
                        "trackingIdBase": "testTrackingIdBase",
                      },
                      "config": Object {
                        "trackingIdPrefix": "testTrackingIdPrefix",
                      },
                      "credentials": Object {
                        "authorization": Object {},
                        "federation": true,
                      },
                      "feature": Object {
                        "getFeature": [MockFunction],
                      },
                      "flagging": Object {
                        "flag": [MockFunction],
                        "mapToActivities": [MockFunction],
                      },
                      "internal": Object {
                        "conversation": Object {
                          "assign": [MockFunction],
                          "download": [MockFunction],
                          "get": [MockFunction],
                          "unassign": [MockFunction],
                          "update": [MockFunction],
                        },
                        "device": Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "encryption": Object {
                          "decryptScr": [MockFunction],
                          "decryptText": [MockFunction],
                          "download": [MockFunction],
                          "encryptText": [MockFunction],
                          "getUnusedKey": [MockFunction],
                          "keystore": Object {
                            "clear": [MockFunction],
                          },
                          "kms": Object {
                            "prepareRequest": [MockFunction],
                            "request": [MockFunction],
                          },
                        },
                        "mercury": Object {
                          "connect": [MockFunction],
                          "listen": [MockFunction],
                          "listenToAndRun": [MockFunction],
                          "on": [MockFunction],
                          "once": [MockFunction],
                          "stopListening": [MockFunction],
                        },
                        "user": Object {
                          "activate": [MockFunction],
                          "register": [MockFunction],
                        },
                      },
                      "isAuthenticated": false,
                      "isAuthenticating": false,
                      "listenToAndRun": [MockFunction] {
                        "calls": Array [
                          Array [
                            [Circular],
                            "change:canAuthorize",
                            [Function],
                          ],
                          Array [
                            [Circular],
                            "change:isAuthenticating",
                            [Function],
                          ],
                          Array [
                            Object {
                              "getServiceUrl": [MockFunction],
                              "register": [MockFunction],
                              "remove": [MockFunction],
                              "services": Object {
                                "roomServiceUrl": "https://example.com/devices/services/room/1",
                              },
                              "url": "https://example.com/devices/1",
                            },
                            "change:registered",
                            [Function],
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                        ],
                      },
                      "on": [MockFunction],
                      "ready": false,
                      "request": [MockFunction],
                      "search": Object {
                        "people": [MockFunction],
                        "search": [MockFunction],
                      },
                      "support": Object {
                        "submitCallLogs": [MockFunction],
                      },
                      "util": Object {
                        "html": Object {
                          "escapeSync": [MockFunction],
                          "filterSync": [MockFunction],
                        },
                      },
                    },
                    "status": Immutable.Record {
                      "authenticated": false,
                      "authenticating": false,
                      "registered": false,
                      "registerError": false,
                      "registering": false,
                    },
                  },
                  "storeSparkInstance": [Function],
                  "updateSparkStatus": [Function],
                },
                "run": [Function],
                "shouldComponentUpdate": false,
              },
              "setWrappedInstance": [Function],
              "state": Object {},
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "subscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
              "version": 1,
            },
            "tag": 1,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "alternate": null,
          "child": null,
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 5,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 5,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 5,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "addError": [MockFunction],
              "spark": Object {
                "authorization": "authorization",
                "internal": Object {
                  "conversation": "conversation",
                  "feature": "feature",
                  "flag": "flag",
                  "mercury": "mercury",
                  "presence": "presence",
                  "search": "search",
                  "team": "team",
                },
                "listenToAndRun": [MockFunction],
                "logger": "logger",
                "meetings": "meetings",
                "people": "people",
                "phone": "phone",
                "rooms": "rooms",
              },
              "storeSparkInstance": [MockFunction],
              "updateSparkStatus": [MockFunction],
            },
            "memoizedState": Object {},
            "mode": 0,
            "nextEffect": [Circular],
            "pendingProps": Object {
              "addError": [MockFunction],
              "spark": Object {
                "authorization": "authorization",
                "internal": Object {
                  "conversation": "conversation",
                  "feature": "feature",
                  "flag": "flag",
                  "mercury": "mercury",
                  "presence": "presence",
                  "search": "search",
                  "team": "team",
                },
                "listenToAndRun": [MockFunction],
                "logger": "logger",
                "meetings": "meetings",
                "people": "people",
                "phone": "phone",
                "rooms": "rooms",
              },
              "storeSparkInstance": [MockFunction],
              "updateSparkStatus": [MockFunction],
            },
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": Connect {
              "__reactInternalMemoizedMaskedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "__reactInternalMemoizedMergedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "unsubscribe": [Function],
                },
              },
              "__reactInternalMemoizedUnmaskedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "notifyNestedSubs": [Function],
              "props": Object {
                "addError": [MockFunction],
                "spark": Object {
                  "authorization": "authorization",
                  "internal": Object {
                    "conversation": "conversation",
                    "feature": "feature",
                    "flag": "flag",
                    "mercury": "mercury",
                    "presence": "presence",
                    "search": "search",
                    "team": "team",
                  },
                  "listenToAndRun": [MockFunction],
                  "logger": "logger",
                  "meetings": "meetings",
                  "people": "people",
                  "phone": "phone",
                  "rooms": "rooms",
                },
                "storeSparkInstance": [MockFunction],
                "updateSparkStatus": [MockFunction],
              },
              "propsMode": false,
              "refs": Object {},
              "renderCount": 0,
              "selector": Object {
                "error": null,
                "props": Object {
                  "addError": [Function],
                  "registerDevice": [Function],
                  "spark": Immutable.Map {
                    "error": null,
                    "spark": Object {
                      "authenticate": [MockFunction],
                      "board": Object {
                        "decryptContents": [MockFunction],
                        "decryptSingleContent": [MockFunction],
                        "encryptContents": [MockFunction],
                        "encryptSingleContent": [MockFunction],
                        "persistence": Object {
                          "addContent": [MockFunction],
                          "addImage": [MockFunction],
                          "createChannel": [MockFunction],
                          "deleteAllContent": [MockFunction],
                          "deleteContent": [MockFunction],
                          "getAllContent": [MockFunction],
                          "getChannel": [MockFunction],
                          "getChannels": [MockFunction],
                          "ping": [MockFunction],
                          "register": [MockFunction],
                        },
                        "realtime": Object {
                          "on": [MockFunction],
                          "once": [MockFunction],
                          "publish": [MockFunction],
                          "set": [MockFunction],
                        },
                      },
                      "client": Object {
                        "trackingIdBase": "testTrackingIdBase",
                      },
                      "config": Object {
                        "trackingIdPrefix": "testTrackingIdPrefix",
                      },
                      "credentials": Object {
                        "authorization": Object {},
                        "federation": true,
                      },
                      "feature": Object {
                        "getFeature": [MockFunction],
                      },
                      "flagging": Object {
                        "flag": [MockFunction],
                        "mapToActivities": [MockFunction],
                      },
                      "internal": Object {
                        "conversation": Object {
                          "assign": [MockFunction],
                          "download": [MockFunction],
                          "get": [MockFunction],
                          "unassign": [MockFunction],
                          "update": [MockFunction],
                        },
                        "device": Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "encryption": Object {
                          "decryptScr": [MockFunction],
                          "decryptText": [MockFunction],
                          "download": [MockFunction],
                          "encryptText": [MockFunction],
                          "getUnusedKey": [MockFunction],
                          "keystore": Object {
                            "clear": [MockFunction],
                          },
                          "kms": Object {
                            "prepareRequest": [MockFunction],
                            "request": [MockFunction],
                          },
                        },
                        "mercury": Object {
                          "connect": [MockFunction],
                          "listen": [MockFunction],
                          "listenToAndRun": [MockFunction],
                          "on": [MockFunction],
                          "once": [MockFunction],
                          "stopListening": [MockFunction],
                        },
                        "user": Object {
                          "activate": [MockFunction],
                          "register": [MockFunction],
                        },
                      },
                      "isAuthenticated": false,
                      "isAuthenticating": false,
                      "listenToAndRun": [MockFunction] {
                        "calls": Array [
                          Array [
                            [Circular],
                            "change:canAuthorize",
                            [Function],
                          ],
                          Array [
                            [Circular],
                            "change:isAuthenticating",
                            [Function],
                          ],
                          Array [
                            Object {
                              "getServiceUrl": [MockFunction],
                              "register": [MockFunction],
                              "remove": [MockFunction],
                              "services": Object {
                                "roomServiceUrl": "https://example.com/devices/services/room/1",
                              },
                              "url": "https://example.com/devices/1",
                            },
                            "change:registered",
                            [Function],
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                        ],
                      },
                      "on": [MockFunction],
                      "ready": false,
                      "request": [MockFunction],
                      "search": Object {
                        "people": [MockFunction],
                        "search": [MockFunction],
                      },
                      "support": Object {
                        "submitCallLogs": [MockFunction],
                      },
                      "util": Object {
                        "html": Object {
                          "escapeSync": [MockFunction],
                          "filterSync": [MockFunction],
                        },
                      },
                    },
                    "status": Immutable.Record {
                      "authenticated": false,
                      "authenticating": false,
                      "registered": false,
                      "registerError": false,
                      "registering": false,
                    },
                  },
                  "storeSparkInstance": [Function],
                  "updateSparkStatus": [Function],
                },
                "run": [Function],
                "shouldComponentUpdate": false,
              },
              "setWrappedInstance": [Function],
              "state": Object {},
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "subscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
              "version": 1,
            },
            "tag": 1,
            "type": [Function],
            "updateQueue": null,
          },
          "pendingProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "ref": null,
          "return": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 5,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 5,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "addError": [MockFunction],
              "spark": Object {
                "authorization": "authorization",
                "internal": Object {
                  "conversation": "conversation",
                  "feature": "feature",
                  "flag": "flag",
                  "mercury": "mercury",
                  "presence": "presence",
                  "search": "search",
                  "team": "team",
                },
                "listenToAndRun": [MockFunction],
                "logger": "logger",
                "meetings": "meetings",
                "people": "people",
                "phone": "phone",
                "rooms": "rooms",
              },
              "storeSparkInstance": [MockFunction],
              "updateSparkStatus": [MockFunction],
            },
            "memoizedState": Object {},
            "mode": 0,
            "nextEffect": [Circular],
            "pendingProps": Object {
              "addError": [MockFunction],
              "spark": Object {
                "authorization": "authorization",
                "internal": Object {
                  "conversation": "conversation",
                  "feature": "feature",
                  "flag": "flag",
                  "mercury": "mercury",
                  "presence": "presence",
                  "search": "search",
                  "team": "team",
                },
                "listenToAndRun": [MockFunction],
                "logger": "logger",
                "meetings": "meetings",
                "people": "people",
                "phone": "phone",
                "rooms": "rooms",
              },
              "storeSparkInstance": [MockFunction],
              "updateSparkStatus": [MockFunction],
            },
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": Connect {
              "__reactInternalMemoizedMaskedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "__reactInternalMemoizedMergedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "unsubscribe": [Function],
                },
              },
              "__reactInternalMemoizedUnmaskedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "notifyNestedSubs": [Function],
              "props": Object {
                "addError": [MockFunction],
                "spark": Object {
                  "authorization": "authorization",
                  "internal": Object {
                    "conversation": "conversation",
                    "feature": "feature",
                    "flag": "flag",
                    "mercury": "mercury",
                    "presence": "presence",
                    "search": "search",
                    "team": "team",
                  },
                  "listenToAndRun": [MockFunction],
                  "logger": "logger",
                  "meetings": "meetings",
                  "people": "people",
                  "phone": "phone",
                  "rooms": "rooms",
                },
                "storeSparkInstance": [MockFunction],
                "updateSparkStatus": [MockFunction],
              },
              "propsMode": false,
              "refs": Object {},
              "renderCount": 0,
              "selector": Object {
                "error": null,
                "props": Object {
                  "addError": [Function],
                  "registerDevice": [Function],
                  "spark": Immutable.Map {
                    "error": null,
                    "spark": Object {
                      "authenticate": [MockFunction],
                      "board": Object {
                        "decryptContents": [MockFunction],
                        "decryptSingleContent": [MockFunction],
                        "encryptContents": [MockFunction],
                        "encryptSingleContent": [MockFunction],
                        "persistence": Object {
                          "addContent": [MockFunction],
                          "addImage": [MockFunction],
                          "createChannel": [MockFunction],
                          "deleteAllContent": [MockFunction],
                          "deleteContent": [MockFunction],
                          "getAllContent": [MockFunction],
                          "getChannel": [MockFunction],
                          "getChannels": [MockFunction],
                          "ping": [MockFunction],
                          "register": [MockFunction],
                        },
                        "realtime": Object {
                          "on": [MockFunction],
                          "once": [MockFunction],
                          "publish": [MockFunction],
                          "set": [MockFunction],
                        },
                      },
                      "client": Object {
                        "trackingIdBase": "testTrackingIdBase",
                      },
                      "config": Object {
                        "trackingIdPrefix": "testTrackingIdPrefix",
                      },
                      "credentials": Object {
                        "authorization": Object {},
                        "federation": true,
                      },
                      "feature": Object {
                        "getFeature": [MockFunction],
                      },
                      "flagging": Object {
                        "flag": [MockFunction],
                        "mapToActivities": [MockFunction],
                      },
                      "internal": Object {
                        "conversation": Object {
                          "assign": [MockFunction],
                          "download": [MockFunction],
                          "get": [MockFunction],
                          "unassign": [MockFunction],
                          "update": [MockFunction],
                        },
                        "device": Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "encryption": Object {
                          "decryptScr": [MockFunction],
                          "decryptText": [MockFunction],
                          "download": [MockFunction],
                          "encryptText": [MockFunction],
                          "getUnusedKey": [MockFunction],
                          "keystore": Object {
                            "clear": [MockFunction],
                          },
                          "kms": Object {
                            "prepareRequest": [MockFunction],
                            "request": [MockFunction],
                          },
                        },
                        "mercury": Object {
                          "connect": [MockFunction],
                          "listen": [MockFunction],
                          "listenToAndRun": [MockFunction],
                          "on": [MockFunction],
                          "once": [MockFunction],
                          "stopListening": [MockFunction],
                        },
                        "user": Object {
                          "activate": [MockFunction],
                          "register": [MockFunction],
                        },
                      },
                      "isAuthenticated": false,
                      "isAuthenticating": false,
                      "listenToAndRun": [MockFunction] {
                        "calls": Array [
                          Array [
                            [Circular],
                            "change:canAuthorize",
                            [Function],
                          ],
                          Array [
                            [Circular],
                            "change:isAuthenticating",
                            [Function],
                          ],
                          Array [
                            Object {
                              "getServiceUrl": [MockFunction],
                              "register": [MockFunction],
                              "remove": [MockFunction],
                              "services": Object {
                                "roomServiceUrl": "https://example.com/devices/services/room/1",
                              },
                              "url": "https://example.com/devices/1",
                            },
                            "change:registered",
                            [Function],
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                        ],
                      },
                      "on": [MockFunction],
                      "ready": false,
                      "request": [MockFunction],
                      "search": Object {
                        "people": [MockFunction],
                        "search": [MockFunction],
                      },
                      "support": Object {
                        "submitCallLogs": [MockFunction],
                      },
                      "util": Object {
                        "html": Object {
                          "escapeSync": [MockFunction],
                          "filterSync": [MockFunction],
                        },
                      },
                    },
                    "status": Immutable.Record {
                      "authenticated": false,
                      "authenticating": false,
                      "registered": false,
                      "registerError": false,
                      "registering": false,
                    },
                  },
                  "storeSparkInstance": [Function],
                  "updateSparkStatus": [Function],
                },
                "run": [Function],
                "shouldComponentUpdate": false,
              },
              "setWrappedInstance": [Function],
              "state": Object {},
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "subscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
              "version": 1,
            },
            "tag": 1,
            "type": [Function],
            "updateQueue": null,
          },
          "sibling": null,
          "stateNode": SparkComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "accessToken": "",
              "addError": [Function],
              "guestToken": "",
              "registerDevice": [Function],
              "sdkInstance": undefined,
              "spark": Immutable.Map {
                "error": null,
                "spark": Object {
                  "authenticate": [MockFunction],
                  "board": Object {
                    "decryptContents": [MockFunction],
                    "decryptSingleContent": [MockFunction],
                    "encryptContents": [MockFunction],
                    "encryptSingleContent": [MockFunction],
                    "persistence": Object {
                      "addContent": [MockFunction],
                      "addImage": [MockFunction],
                      "createChannel": [MockFunction],
                      "deleteAllContent": [MockFunction],
                      "deleteContent": [MockFunction],
                      "getAllContent": [MockFunction],
                      "getChannel": [MockFunction],
                      "getChannels": [MockFunction],
                      "ping": [MockFunction],
                      "register": [MockFunction],
                    },
                    "realtime": Object {
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "publish": [MockFunction],
                      "set": [MockFunction],
                    },
                  },
                  "client": Object {
                    "trackingIdBase": "testTrackingIdBase",
                  },
                  "config": Object {
                    "trackingIdPrefix": "testTrackingIdPrefix",
                  },
                  "credentials": Object {
                    "authorization": Object {},
                    "federation": true,
                  },
                  "feature": Object {
                    "getFeature": [MockFunction],
                  },
                  "flagging": Object {
                    "flag": [MockFunction],
                    "mapToActivities": [MockFunction],
                  },
                  "internal": Object {
                    "conversation": Object {
                      "assign": [MockFunction],
                      "download": [MockFunction],
                      "get": [MockFunction],
                      "unassign": [MockFunction],
                      "update": [MockFunction],
                    },
                    "device": Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "encryption": Object {
                      "decryptScr": [MockFunction],
                      "decryptText": [MockFunction],
                      "download": [MockFunction],
                      "encryptText": [MockFunction],
                      "getUnusedKey": [MockFunction],
                      "keystore": Object {
                        "clear": [MockFunction],
                      },
                      "kms": Object {
                        "prepareRequest": [MockFunction],
                        "request": [MockFunction],
                      },
                    },
                    "mercury": Object {
                      "connect": [MockFunction],
                      "listen": [MockFunction],
                      "listenToAndRun": [MockFunction],
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "stopListening": [MockFunction],
                    },
                    "user": Object {
                      "activate": [MockFunction],
                      "register": [MockFunction],
                    },
                  },
                  "isAuthenticated": false,
                  "isAuthenticating": false,
                  "listenToAndRun": [MockFunction] {
                    "calls": Array [
                      Array [
                        [Circular],
                        "change:canAuthorize",
                        [Function],
                      ],
                      Array [
                        [Circular],
                        "change:isAuthenticating",
                        [Function],
                      ],
                      Array [
                        Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "change:registered",
                        [Function],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                    ],
                  },
                  "on": [MockFunction],
                  "ready": false,
                  "request": [MockFunction],
                  "search": Object {
                    "people": [MockFunction],
                    "search": [MockFunction],
                  },
                  "support": Object {
                    "submitCallLogs": [MockFunction],
                  },
                  "util": Object {
                    "html": Object {
                      "escapeSync": [MockFunction],
                      "filterSync": [MockFunction],
                    },
                  },
                },
                "status": Immutable.Record {
                  "authenticated": false,
                  "authenticating": false,
                  "registered": false,
                  "registerError": false,
                  "registering": false,
                },
              },
              "storeSparkInstance": [Function],
              "updateSparkStatus": [Function],
            },
            "refs": Object {},
            "state": null,
            "storeSDKInstance": [Function],
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "type": [Function],
          "updateQueue": null,
        },
        "index": 0,
        "key": null,
        "lastEffect": [Circular],
        "memoizedProps": null,
        "memoizedState": Object {
          "element": <Provider
            store={
              Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
          >
            <Connect(SparkComponent)
              addError={[MockFunction]}
              spark={
                Object {
                  "authorization": "authorization",
                  "internal": Object {
                    "conversation": "conversation",
                    "feature": "feature",
                    "flag": "flag",
                    "mercury": "mercury",
                    "presence": "presence",
                    "search": "search",
                    "team": "team",
                  },
                  "listenToAndRun": [MockFunction],
                  "logger": "logger",
                  "meetings": "meetings",
                  "people": "people",
                  "phone": "phone",
                  "rooms": "rooms",
                }
              }
              storeSparkInstance={[MockFunction]}
              updateSparkStatus={[MockFunction]}
            />
          </Provider>,
        },
        "mode": 0,
        "nextEffect": null,
        "pendingProps": null,
        "ref": null,
        "return": null,
        "sibling": null,
        "stateNode": Object {
          "containerInfo": Object {
            "children": Array [],
            "createNodeMock": [Function],
            "tag": "CONTAINER",
          },
          "context": Object {},
          "current": [Circular],
          "didError": false,
          "earliestPendingTime": 0,
          "earliestSuspendedTime": 0,
          "expirationTime": 0,
          "finishedWork": null,
          "firstBatch": null,
          "hydrate": false,
          "latestPendingTime": 0,
          "latestPingedTime": 0,
          "latestSuspendedTime": 0,
          "nextExpirationTimeToWorkOn": 0,
          "nextScheduledRoot": null,
          "pendingChildren": null,
          "pendingCommitExpirationTime": 0,
          "pendingContext": null,
          "pingCache": null,
          "timeoutHandle": -1,
        },
        "tag": 3,
        "type": null,
        "updateQueue": Object {
          "baseState": Object {
            "element": <Provider
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
            >
              <Connect(SparkComponent)
                addError={[MockFunction]}
                spark={
                  Object {
                    "authorization": "authorization",
                    "internal": Object {
                      "conversation": "conversation",
                      "feature": "feature",
                      "flag": "flag",
                      "mercury": "mercury",
                      "presence": "presence",
                      "search": "search",
                      "team": "team",
                    },
                    "listenToAndRun": [MockFunction],
                    "logger": "logger",
                    "meetings": "meetings",
                    "people": "people",
                    "phone": "phone",
                    "rooms": "rooms",
                  }
                }
                storeSparkInstance={[MockFunction]}
                updateSparkStatus={[MockFunction]}
              />
            </Provider>,
          },
          "firstCapturedEffect": null,
          "firstCapturedUpdate": null,
          "firstEffect": null,
          "firstUpdate": null,
          "lastCapturedEffect": null,
          "lastCapturedUpdate": null,
          "lastEffect": null,
          "lastUpdate": null,
        },
      },
      "sibling": null,
      "stateNode": [Circular],
      "tag": 1,
      "type": [Function],
      "updateQueue": null,
    },
    "_reactInternalInstance": Object {},
    "context": Object {},
    "props": Object {
      "children": <Connect(SparkComponent)
        addError={[MockFunction]}
        spark={
          Object {
            "authorization": "authorization",
            "internal": Object {
              "conversation": "conversation",
              "feature": "feature",
              "flag": "flag",
              "mercury": "mercury",
              "presence": "presence",
              "search": "search",
              "team": "team",
            },
            "listenToAndRun": [MockFunction],
            "logger": "logger",
            "meetings": "meetings",
            "people": "people",
            "phone": "phone",
            "rooms": "rooms",
          }
        }
        storeSparkInstance={[MockFunction]}
        updateSparkStatus={[MockFunction]}
      />,
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
    "refs": Object {},
    "state": null,
    "store": Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    },
    "updater": Object {
      "enqueueForceUpdate": [Function],
      "enqueueReplaceState": [Function],
      "enqueueSetState": [Function],
      "isMounted": [Function],
    },
  },
  "nodeType": "component",
  "props": Object {
    "children": <Connect(SparkComponent)
      addError={[MockFunction]}
      spark={
        Object {
          "authorization": "authorization",
          "internal": Object {
            "conversation": "conversation",
            "feature": "feature",
            "flag": "flag",
            "mercury": "mercury",
            "presence": "presence",
            "search": "search",
            "team": "team",
          },
          "listenToAndRun": [MockFunction],
          "logger": "logger",
          "meetings": "meetings",
          "people": "people",
          "phone": "phone",
          "rooms": "rooms",
        }
      }
      storeSparkInstance={[MockFunction]}
      updateSparkStatus={[MockFunction]}
    />,
    "store": Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    },
  },
  "rendered": Object {
    "instance": Connect {
      "__reactInternalMemoizedMaskedChildContext": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "storeSubscription": null,
      },
      "__reactInternalMemoizedMergedChildContext": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "storeSubscription": Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": null,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        },
      },
      "__reactInternalMemoizedUnmaskedChildContext": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "storeSubscription": null,
      },
      "_reactInternalFiber": FiberNode {
        "_debugHookTypes": null,
        "_debugID": 5,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": null,
        "_debugSource": null,
        "alternate": null,
        "child": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "alternate": null,
          "child": null,
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 5,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": [Circular],
          "pendingProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": SparkComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "accessToken": "",
              "addError": [Function],
              "guestToken": "",
              "registerDevice": [Function],
              "sdkInstance": undefined,
              "spark": Immutable.Map {
                "error": null,
                "spark": Object {
                  "authenticate": [MockFunction],
                  "board": Object {
                    "decryptContents": [MockFunction],
                    "decryptSingleContent": [MockFunction],
                    "encryptContents": [MockFunction],
                    "encryptSingleContent": [MockFunction],
                    "persistence": Object {
                      "addContent": [MockFunction],
                      "addImage": [MockFunction],
                      "createChannel": [MockFunction],
                      "deleteAllContent": [MockFunction],
                      "deleteContent": [MockFunction],
                      "getAllContent": [MockFunction],
                      "getChannel": [MockFunction],
                      "getChannels": [MockFunction],
                      "ping": [MockFunction],
                      "register": [MockFunction],
                    },
                    "realtime": Object {
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "publish": [MockFunction],
                      "set": [MockFunction],
                    },
                  },
                  "client": Object {
                    "trackingIdBase": "testTrackingIdBase",
                  },
                  "config": Object {
                    "trackingIdPrefix": "testTrackingIdPrefix",
                  },
                  "credentials": Object {
                    "authorization": Object {},
                    "federation": true,
                  },
                  "feature": Object {
                    "getFeature": [MockFunction],
                  },
                  "flagging": Object {
                    "flag": [MockFunction],
                    "mapToActivities": [MockFunction],
                  },
                  "internal": Object {
                    "conversation": Object {
                      "assign": [MockFunction],
                      "download": [MockFunction],
                      "get": [MockFunction],
                      "unassign": [MockFunction],
                      "update": [MockFunction],
                    },
                    "device": Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "encryption": Object {
                      "decryptScr": [MockFunction],
                      "decryptText": [MockFunction],
                      "download": [MockFunction],
                      "encryptText": [MockFunction],
                      "getUnusedKey": [MockFunction],
                      "keystore": Object {
                        "clear": [MockFunction],
                      },
                      "kms": Object {
                        "prepareRequest": [MockFunction],
                        "request": [MockFunction],
                      },
                    },
                    "mercury": Object {
                      "connect": [MockFunction],
                      "listen": [MockFunction],
                      "listenToAndRun": [MockFunction],
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "stopListening": [MockFunction],
                    },
                    "user": Object {
                      "activate": [MockFunction],
                      "register": [MockFunction],
                    },
                  },
                  "isAuthenticated": false,
                  "isAuthenticating": false,
                  "listenToAndRun": [MockFunction] {
                    "calls": Array [
                      Array [
                        [Circular],
                        "change:canAuthorize",
                        [Function],
                      ],
                      Array [
                        [Circular],
                        "change:isAuthenticating",
                        [Function],
                      ],
                      Array [
                        Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "change:registered",
                        [Function],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                    ],
                  },
                  "on": [MockFunction],
                  "ready": false,
                  "request": [MockFunction],
                  "search": Object {
                    "people": [MockFunction],
                    "search": [MockFunction],
                  },
                  "support": Object {
                    "submitCallLogs": [MockFunction],
                  },
                  "util": Object {
                    "html": Object {
                      "escapeSync": [MockFunction],
                      "filterSync": [MockFunction],
                    },
                  },
                },
                "status": Immutable.Record {
                  "authenticated": false,
                  "authenticating": false,
                  "registered": false,
                  "registerError": false,
                  "registering": false,
                },
              },
              "storeSparkInstance": [Function],
              "updateSparkStatus": [Function],
            },
            "refs": Object {},
            "state": null,
            "storeSDKInstance": [Function],
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "type": [Function],
          "updateQueue": null,
        },
        "childExpirationTime": 0,
        "contextDependencies": null,
        "effectTag": 5,
        "elementType": [Function],
        "expirationTime": 0,
        "firstEffect": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "alternate": null,
          "child": null,
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 5,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": [Circular],
          "pendingProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": SparkComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "accessToken": "",
              "addError": [Function],
              "guestToken": "",
              "registerDevice": [Function],
              "sdkInstance": undefined,
              "spark": Immutable.Map {
                "error": null,
                "spark": Object {
                  "authenticate": [MockFunction],
                  "board": Object {
                    "decryptContents": [MockFunction],
                    "decryptSingleContent": [MockFunction],
                    "encryptContents": [MockFunction],
                    "encryptSingleContent": [MockFunction],
                    "persistence": Object {
                      "addContent": [MockFunction],
                      "addImage": [MockFunction],
                      "createChannel": [MockFunction],
                      "deleteAllContent": [MockFunction],
                      "deleteContent": [MockFunction],
                      "getAllContent": [MockFunction],
                      "getChannel": [MockFunction],
                      "getChannels": [MockFunction],
                      "ping": [MockFunction],
                      "register": [MockFunction],
                    },
                    "realtime": Object {
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "publish": [MockFunction],
                      "set": [MockFunction],
                    },
                  },
                  "client": Object {
                    "trackingIdBase": "testTrackingIdBase",
                  },
                  "config": Object {
                    "trackingIdPrefix": "testTrackingIdPrefix",
                  },
                  "credentials": Object {
                    "authorization": Object {},
                    "federation": true,
                  },
                  "feature": Object {
                    "getFeature": [MockFunction],
                  },
                  "flagging": Object {
                    "flag": [MockFunction],
                    "mapToActivities": [MockFunction],
                  },
                  "internal": Object {
                    "conversation": Object {
                      "assign": [MockFunction],
                      "download": [MockFunction],
                      "get": [MockFunction],
                      "unassign": [MockFunction],
                      "update": [MockFunction],
                    },
                    "device": Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "encryption": Object {
                      "decryptScr": [MockFunction],
                      "decryptText": [MockFunction],
                      "download": [MockFunction],
                      "encryptText": [MockFunction],
                      "getUnusedKey": [MockFunction],
                      "keystore": Object {
                        "clear": [MockFunction],
                      },
                      "kms": Object {
                        "prepareRequest": [MockFunction],
                        "request": [MockFunction],
                      },
                    },
                    "mercury": Object {
                      "connect": [MockFunction],
                      "listen": [MockFunction],
                      "listenToAndRun": [MockFunction],
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "stopListening": [MockFunction],
                    },
                    "user": Object {
                      "activate": [MockFunction],
                      "register": [MockFunction],
                    },
                  },
                  "isAuthenticated": false,
                  "isAuthenticating": false,
                  "listenToAndRun": [MockFunction] {
                    "calls": Array [
                      Array [
                        [Circular],
                        "change:canAuthorize",
                        [Function],
                      ],
                      Array [
                        [Circular],
                        "change:isAuthenticating",
                        [Function],
                      ],
                      Array [
                        Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "change:registered",
                        [Function],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                    ],
                  },
                  "on": [MockFunction],
                  "ready": false,
                  "request": [MockFunction],
                  "search": Object {
                    "people": [MockFunction],
                    "search": [MockFunction],
                  },
                  "support": Object {
                    "submitCallLogs": [MockFunction],
                  },
                  "util": Object {
                    "html": Object {
                      "escapeSync": [MockFunction],
                      "filterSync": [MockFunction],
                    },
                  },
                },
                "status": Immutable.Record {
                  "authenticated": false,
                  "authenticating": false,
                  "registered": false,
                  "registerError": false,
                  "registering": false,
                },
              },
              "storeSparkInstance": [Function],
              "updateSparkStatus": [Function],
            },
            "refs": Object {},
            "state": null,
            "storeSDKInstance": [Function],
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "type": [Function],
          "updateQueue": null,
        },
        "index": 0,
        "key": null,
        "lastEffect": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "alternate": null,
          "child": null,
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 5,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": [Circular],
          "pendingProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": SparkComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "accessToken": "",
              "addError": [Function],
              "guestToken": "",
              "registerDevice": [Function],
              "sdkInstance": undefined,
              "spark": Immutable.Map {
                "error": null,
                "spark": Object {
                  "authenticate": [MockFunction],
                  "board": Object {
                    "decryptContents": [MockFunction],
                    "decryptSingleContent": [MockFunction],
                    "encryptContents": [MockFunction],
                    "encryptSingleContent": [MockFunction],
                    "persistence": Object {
                      "addContent": [MockFunction],
                      "addImage": [MockFunction],
                      "createChannel": [MockFunction],
                      "deleteAllContent": [MockFunction],
                      "deleteContent": [MockFunction],
                      "getAllContent": [MockFunction],
                      "getChannel": [MockFunction],
                      "getChannels": [MockFunction],
                      "ping": [MockFunction],
                      "register": [MockFunction],
                    },
                    "realtime": Object {
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "publish": [MockFunction],
                      "set": [MockFunction],
                    },
                  },
                  "client": Object {
                    "trackingIdBase": "testTrackingIdBase",
                  },
                  "config": Object {
                    "trackingIdPrefix": "testTrackingIdPrefix",
                  },
                  "credentials": Object {
                    "authorization": Object {},
                    "federation": true,
                  },
                  "feature": Object {
                    "getFeature": [MockFunction],
                  },
                  "flagging": Object {
                    "flag": [MockFunction],
                    "mapToActivities": [MockFunction],
                  },
                  "internal": Object {
                    "conversation": Object {
                      "assign": [MockFunction],
                      "download": [MockFunction],
                      "get": [MockFunction],
                      "unassign": [MockFunction],
                      "update": [MockFunction],
                    },
                    "device": Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "encryption": Object {
                      "decryptScr": [MockFunction],
                      "decryptText": [MockFunction],
                      "download": [MockFunction],
                      "encryptText": [MockFunction],
                      "getUnusedKey": [MockFunction],
                      "keystore": Object {
                        "clear": [MockFunction],
                      },
                      "kms": Object {
                        "prepareRequest": [MockFunction],
                        "request": [MockFunction],
                      },
                    },
                    "mercury": Object {
                      "connect": [MockFunction],
                      "listen": [MockFunction],
                      "listenToAndRun": [MockFunction],
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "stopListening": [MockFunction],
                    },
                    "user": Object {
                      "activate": [MockFunction],
                      "register": [MockFunction],
                    },
                  },
                  "isAuthenticated": false,
                  "isAuthenticating": false,
                  "listenToAndRun": [MockFunction] {
                    "calls": Array [
                      Array [
                        [Circular],
                        "change:canAuthorize",
                        [Function],
                      ],
                      Array [
                        [Circular],
                        "change:isAuthenticating",
                        [Function],
                      ],
                      Array [
                        Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "change:registered",
                        [Function],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                    ],
                  },
                  "on": [MockFunction],
                  "ready": false,
                  "request": [MockFunction],
                  "search": Object {
                    "people": [MockFunction],
                    "search": [MockFunction],
                  },
                  "support": Object {
                    "submitCallLogs": [MockFunction],
                  },
                  "util": Object {
                    "html": Object {
                      "escapeSync": [MockFunction],
                      "filterSync": [MockFunction],
                    },
                  },
                },
                "status": Immutable.Record {
                  "authenticated": false,
                  "authenticating": false,
                  "registered": false,
                  "registerError": false,
                  "registering": false,
                },
              },
              "storeSparkInstance": [Function],
              "updateSparkStatus": [Function],
            },
            "refs": Object {},
            "state": null,
            "storeSDKInstance": [Function],
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "type": [Function],
          "updateQueue": null,
        },
        "memoizedProps": Object {
          "addError": [MockFunction],
          "spark": Object {
            "authorization": "authorization",
            "internal": Object {
              "conversation": "conversation",
              "feature": "feature",
              "flag": "flag",
              "mercury": "mercury",
              "presence": "presence",
              "search": "search",
              "team": "team",
            },
            "listenToAndRun": [MockFunction],
            "logger": "logger",
            "meetings": "meetings",
            "people": "people",
            "phone": "phone",
            "rooms": "rooms",
          },
          "storeSparkInstance": [MockFunction],
          "updateSparkStatus": [MockFunction],
        },
        "memoizedState": Object {},
        "mode": 0,
        "nextEffect": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 4,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 1,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "alternate": null,
            "child": null,
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 5,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "accessToken": "",
              "addError": [Function],
              "guestToken": "",
              "registerDevice": [Function],
              "sdkInstance": undefined,
              "spark": Immutable.Map {
                "error": null,
                "spark": Object {
                  "authenticate": [MockFunction],
                  "board": Object {
                    "decryptContents": [MockFunction],
                    "decryptSingleContent": [MockFunction],
                    "encryptContents": [MockFunction],
                    "encryptSingleContent": [MockFunction],
                    "persistence": Object {
                      "addContent": [MockFunction],
                      "addImage": [MockFunction],
                      "createChannel": [MockFunction],
                      "deleteAllContent": [MockFunction],
                      "deleteContent": [MockFunction],
                      "getAllContent": [MockFunction],
                      "getChannel": [MockFunction],
                      "getChannels": [MockFunction],
                      "ping": [MockFunction],
                      "register": [MockFunction],
                    },
                    "realtime": Object {
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "publish": [MockFunction],
                      "set": [MockFunction],
                    },
                  },
                  "client": Object {
                    "trackingIdBase": "testTrackingIdBase",
                  },
                  "config": Object {
                    "trackingIdPrefix": "testTrackingIdPrefix",
                  },
                  "credentials": Object {
                    "authorization": Object {},
                    "federation": true,
                  },
                  "feature": Object {
                    "getFeature": [MockFunction],
                  },
                  "flagging": Object {
                    "flag": [MockFunction],
                    "mapToActivities": [MockFunction],
                  },
                  "internal": Object {
                    "conversation": Object {
                      "assign": [MockFunction],
                      "download": [MockFunction],
                      "get": [MockFunction],
                      "unassign": [MockFunction],
                      "update": [MockFunction],
                    },
                    "device": Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "encryption": Object {
                      "decryptScr": [MockFunction],
                      "decryptText": [MockFunction],
                      "download": [MockFunction],
                      "encryptText": [MockFunction],
                      "getUnusedKey": [MockFunction],
                      "keystore": Object {
                        "clear": [MockFunction],
                      },
                      "kms": Object {
                        "prepareRequest": [MockFunction],
                        "request": [MockFunction],
                      },
                    },
                    "mercury": Object {
                      "connect": [MockFunction],
                      "listen": [MockFunction],
                      "listenToAndRun": [MockFunction],
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "stopListening": [MockFunction],
                    },
                    "user": Object {
                      "activate": [MockFunction],
                      "register": [MockFunction],
                    },
                  },
                  "isAuthenticated": false,
                  "isAuthenticating": false,
                  "listenToAndRun": [MockFunction] {
                    "calls": Array [
                      Array [
                        [Circular],
                        "change:canAuthorize",
                        [Function],
                      ],
                      Array [
                        [Circular],
                        "change:isAuthenticating",
                        [Function],
                      ],
                      Array [
                        Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "change:registered",
                        [Function],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                    ],
                  },
                  "on": [MockFunction],
                  "ready": false,
                  "request": [MockFunction],
                  "search": Object {
                    "people": [MockFunction],
                    "search": [MockFunction],
                  },
                  "support": Object {
                    "submitCallLogs": [MockFunction],
                  },
                  "util": Object {
                    "html": Object {
                      "escapeSync": [MockFunction],
                      "filterSync": [MockFunction],
                    },
                  },
                },
                "status": Immutable.Record {
                  "authenticated": false,
                  "authenticating": false,
                  "registered": false,
                  "registerError": false,
                  "registering": false,
                },
              },
              "storeSparkInstance": [Function],
              "updateSparkStatus": [Function],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": [Circular],
            "pendingProps": Object {
              "accessToken": "",
              "addError": [Function],
              "guestToken": "",
              "registerDevice": [Function],
              "sdkInstance": undefined,
              "spark": Immutable.Map {
                "error": null,
                "spark": Object {
                  "authenticate": [MockFunction],
                  "board": Object {
                    "decryptContents": [MockFunction],
                    "decryptSingleContent": [MockFunction],
                    "encryptContents": [MockFunction],
                    "encryptSingleContent": [MockFunction],
                    "persistence": Object {
                      "addContent": [MockFunction],
                      "addImage": [MockFunction],
                      "createChannel": [MockFunction],
                      "deleteAllContent": [MockFunction],
                      "deleteContent": [MockFunction],
                      "getAllContent": [MockFunction],
                      "getChannel": [MockFunction],
                      "getChannels": [MockFunction],
                      "ping": [MockFunction],
                      "register": [MockFunction],
                    },
                    "realtime": Object {
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "publish": [MockFunction],
                      "set": [MockFunction],
                    },
                  },
                  "client": Object {
                    "trackingIdBase": "testTrackingIdBase",
                  },
                  "config": Object {
                    "trackingIdPrefix": "testTrackingIdPrefix",
                  },
                  "credentials": Object {
                    "authorization": Object {},
                    "federation": true,
                  },
                  "feature": Object {
                    "getFeature": [MockFunction],
                  },
                  "flagging": Object {
                    "flag": [MockFunction],
                    "mapToActivities": [MockFunction],
                  },
                  "internal": Object {
                    "conversation": Object {
                      "assign": [MockFunction],
                      "download": [MockFunction],
                      "get": [MockFunction],
                      "unassign": [MockFunction],
                      "update": [MockFunction],
                    },
                    "device": Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "encryption": Object {
                      "decryptScr": [MockFunction],
                      "decryptText": [MockFunction],
                      "download": [MockFunction],
                      "encryptText": [MockFunction],
                      "getUnusedKey": [MockFunction],
                      "keystore": Object {
                        "clear": [MockFunction],
                      },
                      "kms": Object {
                        "prepareRequest": [MockFunction],
                        "request": [MockFunction],
                      },
                    },
                    "mercury": Object {
                      "connect": [MockFunction],
                      "listen": [MockFunction],
                      "listenToAndRun": [MockFunction],
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "stopListening": [MockFunction],
                    },
                    "user": Object {
                      "activate": [MockFunction],
                      "register": [MockFunction],
                    },
                  },
                  "isAuthenticated": false,
                  "isAuthenticating": false,
                  "listenToAndRun": [MockFunction] {
                    "calls": Array [
                      Array [
                        [Circular],
                        "change:canAuthorize",
                        [Function],
                      ],
                      Array [
                        [Circular],
                        "change:isAuthenticating",
                        [Function],
                      ],
                      Array [
                        Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "change:registered",
                        [Function],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                    ],
                  },
                  "on": [MockFunction],
                  "ready": false,
                  "request": [MockFunction],
                  "search": Object {
                    "people": [MockFunction],
                    "search": [MockFunction],
                  },
                  "support": Object {
                    "submitCallLogs": [MockFunction],
                  },
                  "util": Object {
                    "html": Object {
                      "escapeSync": [MockFunction],
                      "filterSync": [MockFunction],
                    },
                  },
                },
                "status": Immutable.Record {
                  "authenticated": false,
                  "authenticating": false,
                  "registered": false,
                  "registerError": false,
                  "registering": false,
                },
              },
              "storeSparkInstance": [Function],
              "updateSparkStatus": [Function],
            },
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": SparkComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "accessToken": "",
                "addError": [Function],
                "guestToken": "",
                "registerDevice": [Function],
                "sdkInstance": undefined,
                "spark": Immutable.Map {
                  "error": null,
                  "spark": Object {
                    "authenticate": [MockFunction],
                    "board": Object {
                      "decryptContents": [MockFunction],
                      "decryptSingleContent": [MockFunction],
                      "encryptContents": [MockFunction],
                      "encryptSingleContent": [MockFunction],
                      "persistence": Object {
                        "addContent": [MockFunction],
                        "addImage": [MockFunction],
                        "createChannel": [MockFunction],
                        "deleteAllContent": [MockFunction],
                        "deleteContent": [MockFunction],
                        "getAllContent": [MockFunction],
                        "getChannel": [MockFunction],
                        "getChannels": [MockFunction],
                        "ping": [MockFunction],
                        "register": [MockFunction],
                      },
                      "realtime": Object {
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "publish": [MockFunction],
                        "set": [MockFunction],
                      },
                    },
                    "client": Object {
                      "trackingIdBase": "testTrackingIdBase",
                    },
                    "config": Object {
                      "trackingIdPrefix": "testTrackingIdPrefix",
                    },
                    "credentials": Object {
                      "authorization": Object {},
                      "federation": true,
                    },
                    "feature": Object {
                      "getFeature": [MockFunction],
                    },
                    "flagging": Object {
                      "flag": [MockFunction],
                      "mapToActivities": [MockFunction],
                    },
                    "internal": Object {
                      "conversation": Object {
                        "assign": [MockFunction],
                        "download": [MockFunction],
                        "get": [MockFunction],
                        "unassign": [MockFunction],
                        "update": [MockFunction],
                      },
                      "device": Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "encryption": Object {
                        "decryptScr": [MockFunction],
                        "decryptText": [MockFunction],
                        "download": [MockFunction],
                        "encryptText": [MockFunction],
                        "getUnusedKey": [MockFunction],
                        "keystore": Object {
                          "clear": [MockFunction],
                        },
                        "kms": Object {
                          "prepareRequest": [MockFunction],
                          "request": [MockFunction],
                        },
                      },
                      "mercury": Object {
                        "connect": [MockFunction],
                        "listen": [MockFunction],
                        "listenToAndRun": [MockFunction],
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "stopListening": [MockFunction],
                      },
                      "user": Object {
                        "activate": [MockFunction],
                        "register": [MockFunction],
                      },
                    },
                    "isAuthenticated": false,
                    "isAuthenticating": false,
                    "listenToAndRun": [MockFunction] {
                      "calls": Array [
                        Array [
                          [Circular],
                          "change:canAuthorize",
                          [Function],
                        ],
                        Array [
                          [Circular],
                          "change:isAuthenticating",
                          [Function],
                        ],
                        Array [
                          Object {
                            "getServiceUrl": [MockFunction],
                            "register": [MockFunction],
                            "remove": [MockFunction],
                            "services": Object {
                              "roomServiceUrl": "https://example.com/devices/services/room/1",
                            },
                            "url": "https://example.com/devices/1",
                          },
                          "change:registered",
                          [Function],
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                      ],
                    },
                    "on": [MockFunction],
                    "ready": false,
                    "request": [MockFunction],
                    "search": Object {
                      "people": [MockFunction],
                      "search": [MockFunction],
                    },
                    "support": Object {
                      "submitCallLogs": [MockFunction],
                    },
                    "util": Object {
                      "html": Object {
                        "escapeSync": [MockFunction],
                        "filterSync": [MockFunction],
                      },
                    },
                  },
                  "status": Immutable.Record {
                    "authenticated": false,
                    "authenticating": false,
                    "registered": false,
                    "registerError": false,
                    "registering": false,
                  },
                },
                "storeSparkInstance": [Function],
                "updateSparkStatus": [Function],
              },
              "refs": Object {},
              "state": null,
              "storeSDKInstance": [Function],
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 1,
            "type": [Function],
            "updateQueue": null,
          },
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "children": <Connect(SparkComponent)
              addError={[MockFunction]}
              spark={
                Object {
                  "authorization": "authorization",
                  "internal": Object {
                    "conversation": "conversation",
                    "feature": "feature",
                    "flag": "flag",
                    "mercury": "mercury",
                    "presence": "presence",
                    "search": "search",
                    "team": "team",
                  },
                  "listenToAndRun": [MockFunction],
                  "logger": "logger",
                  "meetings": "meetings",
                  "people": "people",
                  "phone": "phone",
                  "rooms": "rooms",
                }
              }
              storeSparkInstance={[MockFunction]}
              updateSparkStatus={[MockFunction]}
            />,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": <Connect(SparkComponent)
              addError={[MockFunction]}
              spark={
                Object {
                  "authorization": "authorization",
                  "internal": Object {
                    "conversation": "conversation",
                    "feature": "feature",
                    "flag": "flag",
                    "mercury": "mercury",
                    "presence": "presence",
                    "search": "search",
                    "team": "team",
                  },
                  "listenToAndRun": [MockFunction],
                  "logger": "logger",
                  "meetings": "meetings",
                  "people": "people",
                  "phone": "phone",
                  "rooms": "rooms",
                }
              }
              storeSparkInstance={[MockFunction]}
              updateSparkStatus={[MockFunction]}
            />,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 2,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 2,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": Object {
                  "children": Array [],
                  "createNodeMock": [Function],
                  "tag": "CONTAINER",
                },
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <Provider
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    >
                      <Connect(SparkComponent)
                        addError={[MockFunction]}
                        spark={
                          Object {
                            "authorization": "authorization",
                            "internal": Object {
                              "conversation": "conversation",
                              "feature": "feature",
                              "flag": "flag",
                              "mercury": "mercury",
                              "presence": "presence",
                              "search": "search",
                              "team": "team",
                            },
                            "listenToAndRun": [MockFunction],
                            "logger": "logger",
                            "meetings": "meetings",
                            "people": "people",
                            "phone": "phone",
                            "rooms": "rooms",
                          }
                        }
                        storeSparkInstance={[MockFunction]}
                        updateSparkStatus={[MockFunction]}
                      />
                    </Provider>,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <Provider
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    >
                      <Connect(SparkComponent)
                        addError={[MockFunction]}
                        spark={
                          Object {
                            "authorization": "authorization",
                            "internal": Object {
                              "conversation": "conversation",
                              "feature": "feature",
                              "flag": "flag",
                              "mercury": "mercury",
                              "presence": "presence",
                              "search": "search",
                              "team": "team",
                            },
                            "listenToAndRun": [MockFunction],
                            "logger": "logger",
                            "meetings": "meetings",
                            "people": "people",
                            "phone": "phone",
                            "rooms": "rooms",
                          }
                        }
                        storeSparkInstance={[MockFunction]}
                        updateSparkStatus={[MockFunction]}
                      />
                    </Provider>,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 0,
            "elementType": null,
            "expirationTime": 0,
            "firstEffect": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": null,
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 5,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "accessToken": "",
                "addError": [Function],
                "guestToken": "",
                "registerDevice": [Function],
                "sdkInstance": undefined,
                "spark": Immutable.Map {
                  "error": null,
                  "spark": Object {
                    "authenticate": [MockFunction],
                    "board": Object {
                      "decryptContents": [MockFunction],
                      "decryptSingleContent": [MockFunction],
                      "encryptContents": [MockFunction],
                      "encryptSingleContent": [MockFunction],
                      "persistence": Object {
                        "addContent": [MockFunction],
                        "addImage": [MockFunction],
                        "createChannel": [MockFunction],
                        "deleteAllContent": [MockFunction],
                        "deleteContent": [MockFunction],
                        "getAllContent": [MockFunction],
                        "getChannel": [MockFunction],
                        "getChannels": [MockFunction],
                        "ping": [MockFunction],
                        "register": [MockFunction],
                      },
                      "realtime": Object {
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "publish": [MockFunction],
                        "set": [MockFunction],
                      },
                    },
                    "client": Object {
                      "trackingIdBase": "testTrackingIdBase",
                    },
                    "config": Object {
                      "trackingIdPrefix": "testTrackingIdPrefix",
                    },
                    "credentials": Object {
                      "authorization": Object {},
                      "federation": true,
                    },
                    "feature": Object {
                      "getFeature": [MockFunction],
                    },
                    "flagging": Object {
                      "flag": [MockFunction],
                      "mapToActivities": [MockFunction],
                    },
                    "internal": Object {
                      "conversation": Object {
                        "assign": [MockFunction],
                        "download": [MockFunction],
                        "get": [MockFunction],
                        "unassign": [MockFunction],
                        "update": [MockFunction],
                      },
                      "device": Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "encryption": Object {
                        "decryptScr": [MockFunction],
                        "decryptText": [MockFunction],
                        "download": [MockFunction],
                        "encryptText": [MockFunction],
                        "getUnusedKey": [MockFunction],
                        "keystore": Object {
                          "clear": [MockFunction],
                        },
                        "kms": Object {
                          "prepareRequest": [MockFunction],
                          "request": [MockFunction],
                        },
                      },
                      "mercury": Object {
                        "connect": [MockFunction],
                        "listen": [MockFunction],
                        "listenToAndRun": [MockFunction],
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "stopListening": [MockFunction],
                      },
                      "user": Object {
                        "activate": [MockFunction],
                        "register": [MockFunction],
                      },
                    },
                    "isAuthenticated": false,
                    "isAuthenticating": false,
                    "listenToAndRun": [MockFunction] {
                      "calls": Array [
                        Array [
                          [Circular],
                          "change:canAuthorize",
                          [Function],
                        ],
                        Array [
                          [Circular],
                          "change:isAuthenticating",
                          [Function],
                        ],
                        Array [
                          Object {
                            "getServiceUrl": [MockFunction],
                            "register": [MockFunction],
                            "remove": [MockFunction],
                            "services": Object {
                              "roomServiceUrl": "https://example.com/devices/services/room/1",
                            },
                            "url": "https://example.com/devices/1",
                          },
                          "change:registered",
                          [Function],
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                      ],
                    },
                    "on": [MockFunction],
                    "ready": false,
                    "request": [MockFunction],
                    "search": Object {
                      "people": [MockFunction],
                      "search": [MockFunction],
                    },
                    "support": Object {
                      "submitCallLogs": [MockFunction],
                    },
                    "util": Object {
                      "html": Object {
                        "escapeSync": [MockFunction],
                        "filterSync": [MockFunction],
                      },
                    },
                  },
                  "status": Immutable.Record {
                    "authenticated": false,
                    "authenticating": false,
                    "registered": false,
                    "registerError": false,
                    "registering": false,
                  },
                },
                "storeSparkInstance": [Function],
                "updateSparkStatus": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": [Circular],
              "pendingProps": Object {
                "accessToken": "",
                "addError": [Function],
                "guestToken": "",
                "registerDevice": [Function],
                "sdkInstance": undefined,
                "spark": Immutable.Map {
                  "error": null,
                  "spark": Object {
                    "authenticate": [MockFunction],
                    "board": Object {
                      "decryptContents": [MockFunction],
                      "decryptSingleContent": [MockFunction],
                      "encryptContents": [MockFunction],
                      "encryptSingleContent": [MockFunction],
                      "persistence": Object {
                        "addContent": [MockFunction],
                        "addImage": [MockFunction],
                        "createChannel": [MockFunction],
                        "deleteAllContent": [MockFunction],
                        "deleteContent": [MockFunction],
                        "getAllContent": [MockFunction],
                        "getChannel": [MockFunction],
                        "getChannels": [MockFunction],
                        "ping": [MockFunction],
                        "register": [MockFunction],
                      },
                      "realtime": Object {
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "publish": [MockFunction],
                        "set": [MockFunction],
                      },
                    },
                    "client": Object {
                      "trackingIdBase": "testTrackingIdBase",
                    },
                    "config": Object {
                      "trackingIdPrefix": "testTrackingIdPrefix",
                    },
                    "credentials": Object {
                      "authorization": Object {},
                      "federation": true,
                    },
                    "feature": Object {
                      "getFeature": [MockFunction],
                    },
                    "flagging": Object {
                      "flag": [MockFunction],
                      "mapToActivities": [MockFunction],
                    },
                    "internal": Object {
                      "conversation": Object {
                        "assign": [MockFunction],
                        "download": [MockFunction],
                        "get": [MockFunction],
                        "unassign": [MockFunction],
                        "update": [MockFunction],
                      },
                      "device": Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "encryption": Object {
                        "decryptScr": [MockFunction],
                        "decryptText": [MockFunction],
                        "download": [MockFunction],
                        "encryptText": [MockFunction],
                        "getUnusedKey": [MockFunction],
                        "keystore": Object {
                          "clear": [MockFunction],
                        },
                        "kms": Object {
                          "prepareRequest": [MockFunction],
                          "request": [MockFunction],
                        },
                      },
                      "mercury": Object {
                        "connect": [MockFunction],
                        "listen": [MockFunction],
                        "listenToAndRun": [MockFunction],
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "stopListening": [MockFunction],
                      },
                      "user": Object {
                        "activate": [MockFunction],
                        "register": [MockFunction],
                      },
                    },
                    "isAuthenticated": false,
                    "isAuthenticating": false,
                    "listenToAndRun": [MockFunction] {
                      "calls": Array [
                        Array [
                          [Circular],
                          "change:canAuthorize",
                          [Function],
                        ],
                        Array [
                          [Circular],
                          "change:isAuthenticating",
                          [Function],
                        ],
                        Array [
                          Object {
                            "getServiceUrl": [MockFunction],
                            "register": [MockFunction],
                            "remove": [MockFunction],
                            "services": Object {
                              "roomServiceUrl": "https://example.com/devices/services/room/1",
                            },
                            "url": "https://example.com/devices/1",
                          },
                          "change:registered",
                          [Function],
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                      ],
                    },
                    "on": [MockFunction],
                    "ready": false,
                    "request": [MockFunction],
                    "search": Object {
                      "people": [MockFunction],
                      "search": [MockFunction],
                    },
                    "support": Object {
                      "submitCallLogs": [MockFunction],
                    },
                    "util": Object {
                      "html": Object {
                        "escapeSync": [MockFunction],
                        "filterSync": [MockFunction],
                      },
                    },
                  },
                  "status": Immutable.Record {
                    "authenticated": false,
                    "authenticating": false,
                    "registered": false,
                    "registerError": false,
                    "registering": false,
                  },
                },
                "storeSparkInstance": [Function],
                "updateSparkStatus": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": SparkComponent {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "accessToken": "",
                  "addError": [Function],
                  "guestToken": "",
                  "registerDevice": [Function],
                  "sdkInstance": undefined,
                  "spark": Immutable.Map {
                    "error": null,
                    "spark": Object {
                      "authenticate": [MockFunction],
                      "board": Object {
                        "decryptContents": [MockFunction],
                        "decryptSingleContent": [MockFunction],
                        "encryptContents": [MockFunction],
                        "encryptSingleContent": [MockFunction],
                        "persistence": Object {
                          "addContent": [MockFunction],
                          "addImage": [MockFunction],
                          "createChannel": [MockFunction],
                          "deleteAllContent": [MockFunction],
                          "deleteContent": [MockFunction],
                          "getAllContent": [MockFunction],
                          "getChannel": [MockFunction],
                          "getChannels": [MockFunction],
                          "ping": [MockFunction],
                          "register": [MockFunction],
                        },
                        "realtime": Object {
                          "on": [MockFunction],
                          "once": [MockFunction],
                          "publish": [MockFunction],
                          "set": [MockFunction],
                        },
                      },
                      "client": Object {
                        "trackingIdBase": "testTrackingIdBase",
                      },
                      "config": Object {
                        "trackingIdPrefix": "testTrackingIdPrefix",
                      },
                      "credentials": Object {
                        "authorization": Object {},
                        "federation": true,
                      },
                      "feature": Object {
                        "getFeature": [MockFunction],
                      },
                      "flagging": Object {
                        "flag": [MockFunction],
                        "mapToActivities": [MockFunction],
                      },
                      "internal": Object {
                        "conversation": Object {
                          "assign": [MockFunction],
                          "download": [MockFunction],
                          "get": [MockFunction],
                          "unassign": [MockFunction],
                          "update": [MockFunction],
                        },
                        "device": Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "encryption": Object {
                          "decryptScr": [MockFunction],
                          "decryptText": [MockFunction],
                          "download": [MockFunction],
                          "encryptText": [MockFunction],
                          "getUnusedKey": [MockFunction],
                          "keystore": Object {
                            "clear": [MockFunction],
                          },
                          "kms": Object {
                            "prepareRequest": [MockFunction],
                            "request": [MockFunction],
                          },
                        },
                        "mercury": Object {
                          "connect": [MockFunction],
                          "listen": [MockFunction],
                          "listenToAndRun": [MockFunction],
                          "on": [MockFunction],
                          "once": [MockFunction],
                          "stopListening": [MockFunction],
                        },
                        "user": Object {
                          "activate": [MockFunction],
                          "register": [MockFunction],
                        },
                      },
                      "isAuthenticated": false,
                      "isAuthenticating": false,
                      "listenToAndRun": [MockFunction] {
                        "calls": Array [
                          Array [
                            [Circular],
                            "change:canAuthorize",
                            [Function],
                          ],
                          Array [
                            [Circular],
                            "change:isAuthenticating",
                            [Function],
                          ],
                          Array [
                            Object {
                              "getServiceUrl": [MockFunction],
                              "register": [MockFunction],
                              "remove": [MockFunction],
                              "services": Object {
                                "roomServiceUrl": "https://example.com/devices/services/room/1",
                              },
                              "url": "https://example.com/devices/1",
                            },
                            "change:registered",
                            [Function],
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                        ],
                      },
                      "on": [MockFunction],
                      "ready": false,
                      "request": [MockFunction],
                      "search": Object {
                        "people": [MockFunction],
                        "search": [MockFunction],
                      },
                      "support": Object {
                        "submitCallLogs": [MockFunction],
                      },
                      "util": Object {
                        "html": Object {
                          "escapeSync": [MockFunction],
                          "filterSync": [MockFunction],
                        },
                      },
                    },
                    "status": Immutable.Record {
                      "authenticated": false,
                      "authenticating": false,
                      "registered": false,
                      "registerError": false,
                      "registering": false,
                    },
                  },
                  "storeSparkInstance": [Function],
                  "updateSparkStatus": [Function],
                },
                "refs": Object {},
                "state": null,
                "storeSDKInstance": [Function],
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "type": [Function],
              "updateQueue": null,
            },
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <Provider
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              >
                <Connect(SparkComponent)
                  addError={[MockFunction]}
                  spark={
                    Object {
                      "authorization": "authorization",
                      "internal": Object {
                        "conversation": "conversation",
                        "feature": "feature",
                        "flag": "flag",
                        "mercury": "mercury",
                        "presence": "presence",
                        "search": "search",
                        "team": "team",
                      },
                      "listenToAndRun": [MockFunction],
                      "logger": "logger",
                      "meetings": "meetings",
                      "people": "people",
                      "phone": "phone",
                      "rooms": "rooms",
                    }
                  }
                  storeSparkInstance={[MockFunction]}
                  updateSparkStatus={[MockFunction]}
                />
              </Provider>,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": Object {
                "children": Array [],
                "createNodeMock": [Function],
                "tag": "CONTAINER",
              },
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <Provider
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                >
                  <Connect(SparkComponent)
                    addError={[MockFunction]}
                    spark={
                      Object {
                        "authorization": "authorization",
                        "internal": Object {
                          "conversation": "conversation",
                          "feature": "feature",
                          "flag": "flag",
                          "mercury": "mercury",
                          "presence": "presence",
                          "search": "search",
                          "team": "team",
                        },
                        "listenToAndRun": [MockFunction],
                        "logger": "logger",
                        "meetings": "meetings",
                        "people": "people",
                        "phone": "phone",
                        "rooms": "rooms",
                      }
                    }
                    storeSparkInstance={[MockFunction]}
                    updateSparkStatus={[MockFunction]}
                  />
                </Provider>,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "sibling": null,
          "stateNode": Provider {
            "__reactInternalMemoizedMergedChildContext": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": null,
            },
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "children": <Connect(SparkComponent)
                addError={[MockFunction]}
                spark={
                  Object {
                    "authorization": "authorization",
                    "internal": Object {
                      "conversation": "conversation",
                      "feature": "feature",
                      "flag": "flag",
                      "mercury": "mercury",
                      "presence": "presence",
                      "search": "search",
                      "team": "team",
                    },
                    "listenToAndRun": [MockFunction],
                    "logger": "logger",
                    "meetings": "meetings",
                    "people": "people",
                    "phone": "phone",
                    "rooms": "rooms",
                  }
                }
                storeSparkInstance={[MockFunction]}
                updateSparkStatus={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
            "refs": Object {},
            "state": null,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "type": [Function],
          "updateQueue": null,
        },
        "pendingProps": Object {
          "addError": [MockFunction],
          "spark": Object {
            "authorization": "authorization",
            "internal": Object {
              "conversation": "conversation",
              "feature": "feature",
              "flag": "flag",
              "mercury": "mercury",
              "presence": "presence",
              "search": "search",
              "team": "team",
            },
            "listenToAndRun": [MockFunction],
            "logger": "logger",
            "meetings": "meetings",
            "people": "people",
            "phone": "phone",
            "rooms": "rooms",
          },
          "storeSparkInstance": [MockFunction],
          "updateSparkStatus": [MockFunction],
        },
        "ref": null,
        "return": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 4,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 1,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "alternate": null,
            "child": null,
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 5,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "accessToken": "",
              "addError": [Function],
              "guestToken": "",
              "registerDevice": [Function],
              "sdkInstance": undefined,
              "spark": Immutable.Map {
                "error": null,
                "spark": Object {
                  "authenticate": [MockFunction],
                  "board": Object {
                    "decryptContents": [MockFunction],
                    "decryptSingleContent": [MockFunction],
                    "encryptContents": [MockFunction],
                    "encryptSingleContent": [MockFunction],
                    "persistence": Object {
                      "addContent": [MockFunction],
                      "addImage": [MockFunction],
                      "createChannel": [MockFunction],
                      "deleteAllContent": [MockFunction],
                      "deleteContent": [MockFunction],
                      "getAllContent": [MockFunction],
                      "getChannel": [MockFunction],
                      "getChannels": [MockFunction],
                      "ping": [MockFunction],
                      "register": [MockFunction],
                    },
                    "realtime": Object {
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "publish": [MockFunction],
                      "set": [MockFunction],
                    },
                  },
                  "client": Object {
                    "trackingIdBase": "testTrackingIdBase",
                  },
                  "config": Object {
                    "trackingIdPrefix": "testTrackingIdPrefix",
                  },
                  "credentials": Object {
                    "authorization": Object {},
                    "federation": true,
                  },
                  "feature": Object {
                    "getFeature": [MockFunction],
                  },
                  "flagging": Object {
                    "flag": [MockFunction],
                    "mapToActivities": [MockFunction],
                  },
                  "internal": Object {
                    "conversation": Object {
                      "assign": [MockFunction],
                      "download": [MockFunction],
                      "get": [MockFunction],
                      "unassign": [MockFunction],
                      "update": [MockFunction],
                    },
                    "device": Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "encryption": Object {
                      "decryptScr": [MockFunction],
                      "decryptText": [MockFunction],
                      "download": [MockFunction],
                      "encryptText": [MockFunction],
                      "getUnusedKey": [MockFunction],
                      "keystore": Object {
                        "clear": [MockFunction],
                      },
                      "kms": Object {
                        "prepareRequest": [MockFunction],
                        "request": [MockFunction],
                      },
                    },
                    "mercury": Object {
                      "connect": [MockFunction],
                      "listen": [MockFunction],
                      "listenToAndRun": [MockFunction],
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "stopListening": [MockFunction],
                    },
                    "user": Object {
                      "activate": [MockFunction],
                      "register": [MockFunction],
                    },
                  },
                  "isAuthenticated": false,
                  "isAuthenticating": false,
                  "listenToAndRun": [MockFunction] {
                    "calls": Array [
                      Array [
                        [Circular],
                        "change:canAuthorize",
                        [Function],
                      ],
                      Array [
                        [Circular],
                        "change:isAuthenticating",
                        [Function],
                      ],
                      Array [
                        Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "change:registered",
                        [Function],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                    ],
                  },
                  "on": [MockFunction],
                  "ready": false,
                  "request": [MockFunction],
                  "search": Object {
                    "people": [MockFunction],
                    "search": [MockFunction],
                  },
                  "support": Object {
                    "submitCallLogs": [MockFunction],
                  },
                  "util": Object {
                    "html": Object {
                      "escapeSync": [MockFunction],
                      "filterSync": [MockFunction],
                    },
                  },
                },
                "status": Immutable.Record {
                  "authenticated": false,
                  "authenticating": false,
                  "registered": false,
                  "registerError": false,
                  "registering": false,
                },
              },
              "storeSparkInstance": [Function],
              "updateSparkStatus": [Function],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": [Circular],
            "pendingProps": Object {
              "accessToken": "",
              "addError": [Function],
              "guestToken": "",
              "registerDevice": [Function],
              "sdkInstance": undefined,
              "spark": Immutable.Map {
                "error": null,
                "spark": Object {
                  "authenticate": [MockFunction],
                  "board": Object {
                    "decryptContents": [MockFunction],
                    "decryptSingleContent": [MockFunction],
                    "encryptContents": [MockFunction],
                    "encryptSingleContent": [MockFunction],
                    "persistence": Object {
                      "addContent": [MockFunction],
                      "addImage": [MockFunction],
                      "createChannel": [MockFunction],
                      "deleteAllContent": [MockFunction],
                      "deleteContent": [MockFunction],
                      "getAllContent": [MockFunction],
                      "getChannel": [MockFunction],
                      "getChannels": [MockFunction],
                      "ping": [MockFunction],
                      "register": [MockFunction],
                    },
                    "realtime": Object {
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "publish": [MockFunction],
                      "set": [MockFunction],
                    },
                  },
                  "client": Object {
                    "trackingIdBase": "testTrackingIdBase",
                  },
                  "config": Object {
                    "trackingIdPrefix": "testTrackingIdPrefix",
                  },
                  "credentials": Object {
                    "authorization": Object {},
                    "federation": true,
                  },
                  "feature": Object {
                    "getFeature": [MockFunction],
                  },
                  "flagging": Object {
                    "flag": [MockFunction],
                    "mapToActivities": [MockFunction],
                  },
                  "internal": Object {
                    "conversation": Object {
                      "assign": [MockFunction],
                      "download": [MockFunction],
                      "get": [MockFunction],
                      "unassign": [MockFunction],
                      "update": [MockFunction],
                    },
                    "device": Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "encryption": Object {
                      "decryptScr": [MockFunction],
                      "decryptText": [MockFunction],
                      "download": [MockFunction],
                      "encryptText": [MockFunction],
                      "getUnusedKey": [MockFunction],
                      "keystore": Object {
                        "clear": [MockFunction],
                      },
                      "kms": Object {
                        "prepareRequest": [MockFunction],
                        "request": [MockFunction],
                      },
                    },
                    "mercury": Object {
                      "connect": [MockFunction],
                      "listen": [MockFunction],
                      "listenToAndRun": [MockFunction],
                      "on": [MockFunction],
                      "once": [MockFunction],
                      "stopListening": [MockFunction],
                    },
                    "user": Object {
                      "activate": [MockFunction],
                      "register": [MockFunction],
                    },
                  },
                  "isAuthenticated": false,
                  "isAuthenticating": false,
                  "listenToAndRun": [MockFunction] {
                    "calls": Array [
                      Array [
                        [Circular],
                        "change:canAuthorize",
                        [Function],
                      ],
                      Array [
                        [Circular],
                        "change:isAuthenticating",
                        [Function],
                      ],
                      Array [
                        Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "change:registered",
                        [Function],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                      Object {
                        "isThrow": false,
                        "value": Promise {},
                      },
                    ],
                  },
                  "on": [MockFunction],
                  "ready": false,
                  "request": [MockFunction],
                  "search": Object {
                    "people": [MockFunction],
                    "search": [MockFunction],
                  },
                  "support": Object {
                    "submitCallLogs": [MockFunction],
                  },
                  "util": Object {
                    "html": Object {
                      "escapeSync": [MockFunction],
                      "filterSync": [MockFunction],
                    },
                  },
                },
                "status": Immutable.Record {
                  "authenticated": false,
                  "authenticating": false,
                  "registered": false,
                  "registerError": false,
                  "registering": false,
                },
              },
              "storeSparkInstance": [Function],
              "updateSparkStatus": [Function],
            },
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": SparkComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "accessToken": "",
                "addError": [Function],
                "guestToken": "",
                "registerDevice": [Function],
                "sdkInstance": undefined,
                "spark": Immutable.Map {
                  "error": null,
                  "spark": Object {
                    "authenticate": [MockFunction],
                    "board": Object {
                      "decryptContents": [MockFunction],
                      "decryptSingleContent": [MockFunction],
                      "encryptContents": [MockFunction],
                      "encryptSingleContent": [MockFunction],
                      "persistence": Object {
                        "addContent": [MockFunction],
                        "addImage": [MockFunction],
                        "createChannel": [MockFunction],
                        "deleteAllContent": [MockFunction],
                        "deleteContent": [MockFunction],
                        "getAllContent": [MockFunction],
                        "getChannel": [MockFunction],
                        "getChannels": [MockFunction],
                        "ping": [MockFunction],
                        "register": [MockFunction],
                      },
                      "realtime": Object {
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "publish": [MockFunction],
                        "set": [MockFunction],
                      },
                    },
                    "client": Object {
                      "trackingIdBase": "testTrackingIdBase",
                    },
                    "config": Object {
                      "trackingIdPrefix": "testTrackingIdPrefix",
                    },
                    "credentials": Object {
                      "authorization": Object {},
                      "federation": true,
                    },
                    "feature": Object {
                      "getFeature": [MockFunction],
                    },
                    "flagging": Object {
                      "flag": [MockFunction],
                      "mapToActivities": [MockFunction],
                    },
                    "internal": Object {
                      "conversation": Object {
                        "assign": [MockFunction],
                        "download": [MockFunction],
                        "get": [MockFunction],
                        "unassign": [MockFunction],
                        "update": [MockFunction],
                      },
                      "device": Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "encryption": Object {
                        "decryptScr": [MockFunction],
                        "decryptText": [MockFunction],
                        "download": [MockFunction],
                        "encryptText": [MockFunction],
                        "getUnusedKey": [MockFunction],
                        "keystore": Object {
                          "clear": [MockFunction],
                        },
                        "kms": Object {
                          "prepareRequest": [MockFunction],
                          "request": [MockFunction],
                        },
                      },
                      "mercury": Object {
                        "connect": [MockFunction],
                        "listen": [MockFunction],
                        "listenToAndRun": [MockFunction],
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "stopListening": [MockFunction],
                      },
                      "user": Object {
                        "activate": [MockFunction],
                        "register": [MockFunction],
                      },
                    },
                    "isAuthenticated": false,
                    "isAuthenticating": false,
                    "listenToAndRun": [MockFunction] {
                      "calls": Array [
                        Array [
                          [Circular],
                          "change:canAuthorize",
                          [Function],
                        ],
                        Array [
                          [Circular],
                          "change:isAuthenticating",
                          [Function],
                        ],
                        Array [
                          Object {
                            "getServiceUrl": [MockFunction],
                            "register": [MockFunction],
                            "remove": [MockFunction],
                            "services": Object {
                              "roomServiceUrl": "https://example.com/devices/services/room/1",
                            },
                            "url": "https://example.com/devices/1",
                          },
                          "change:registered",
                          [Function],
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                      ],
                    },
                    "on": [MockFunction],
                    "ready": false,
                    "request": [MockFunction],
                    "search": Object {
                      "people": [MockFunction],
                      "search": [MockFunction],
                    },
                    "support": Object {
                      "submitCallLogs": [MockFunction],
                    },
                    "util": Object {
                      "html": Object {
                        "escapeSync": [MockFunction],
                        "filterSync": [MockFunction],
                      },
                    },
                  },
                  "status": Immutable.Record {
                    "authenticated": false,
                    "authenticating": false,
                    "registered": false,
                    "registerError": false,
                    "registering": false,
                  },
                },
                "storeSparkInstance": [Function],
                "updateSparkStatus": [Function],
              },
              "refs": Object {},
              "state": null,
              "storeSDKInstance": [Function],
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 1,
            "type": [Function],
            "updateQueue": null,
          },
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "children": <Connect(SparkComponent)
              addError={[MockFunction]}
              spark={
                Object {
                  "authorization": "authorization",
                  "internal": Object {
                    "conversation": "conversation",
                    "feature": "feature",
                    "flag": "flag",
                    "mercury": "mercury",
                    "presence": "presence",
                    "search": "search",
                    "team": "team",
                  },
                  "listenToAndRun": [MockFunction],
                  "logger": "logger",
                  "meetings": "meetings",
                  "people": "people",
                  "phone": "phone",
                  "rooms": "rooms",
                }
              }
              storeSparkInstance={[MockFunction]}
              updateSparkStatus={[MockFunction]}
            />,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": <Connect(SparkComponent)
              addError={[MockFunction]}
              spark={
                Object {
                  "authorization": "authorization",
                  "internal": Object {
                    "conversation": "conversation",
                    "feature": "feature",
                    "flag": "flag",
                    "mercury": "mercury",
                    "presence": "presence",
                    "search": "search",
                    "team": "team",
                  },
                  "listenToAndRun": [MockFunction],
                  "logger": "logger",
                  "meetings": "meetings",
                  "people": "people",
                  "phone": "phone",
                  "rooms": "rooms",
                }
              }
              storeSparkInstance={[MockFunction]}
              updateSparkStatus={[MockFunction]}
            />,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 2,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 2,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": Object {
                  "children": Array [],
                  "createNodeMock": [Function],
                  "tag": "CONTAINER",
                },
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <Provider
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    >
                      <Connect(SparkComponent)
                        addError={[MockFunction]}
                        spark={
                          Object {
                            "authorization": "authorization",
                            "internal": Object {
                              "conversation": "conversation",
                              "feature": "feature",
                              "flag": "flag",
                              "mercury": "mercury",
                              "presence": "presence",
                              "search": "search",
                              "team": "team",
                            },
                            "listenToAndRun": [MockFunction],
                            "logger": "logger",
                            "meetings": "meetings",
                            "people": "people",
                            "phone": "phone",
                            "rooms": "rooms",
                          }
                        }
                        storeSparkInstance={[MockFunction]}
                        updateSparkStatus={[MockFunction]}
                      />
                    </Provider>,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <Provider
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    >
                      <Connect(SparkComponent)
                        addError={[MockFunction]}
                        spark={
                          Object {
                            "authorization": "authorization",
                            "internal": Object {
                              "conversation": "conversation",
                              "feature": "feature",
                              "flag": "flag",
                              "mercury": "mercury",
                              "presence": "presence",
                              "search": "search",
                              "team": "team",
                            },
                            "listenToAndRun": [MockFunction],
                            "logger": "logger",
                            "meetings": "meetings",
                            "people": "people",
                            "phone": "phone",
                            "rooms": "rooms",
                          }
                        }
                        storeSparkInstance={[MockFunction]}
                        updateSparkStatus={[MockFunction]}
                      />
                    </Provider>,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 0,
            "elementType": null,
            "expirationTime": 0,
            "firstEffect": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": null,
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 5,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "accessToken": "",
                "addError": [Function],
                "guestToken": "",
                "registerDevice": [Function],
                "sdkInstance": undefined,
                "spark": Immutable.Map {
                  "error": null,
                  "spark": Object {
                    "authenticate": [MockFunction],
                    "board": Object {
                      "decryptContents": [MockFunction],
                      "decryptSingleContent": [MockFunction],
                      "encryptContents": [MockFunction],
                      "encryptSingleContent": [MockFunction],
                      "persistence": Object {
                        "addContent": [MockFunction],
                        "addImage": [MockFunction],
                        "createChannel": [MockFunction],
                        "deleteAllContent": [MockFunction],
                        "deleteContent": [MockFunction],
                        "getAllContent": [MockFunction],
                        "getChannel": [MockFunction],
                        "getChannels": [MockFunction],
                        "ping": [MockFunction],
                        "register": [MockFunction],
                      },
                      "realtime": Object {
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "publish": [MockFunction],
                        "set": [MockFunction],
                      },
                    },
                    "client": Object {
                      "trackingIdBase": "testTrackingIdBase",
                    },
                    "config": Object {
                      "trackingIdPrefix": "testTrackingIdPrefix",
                    },
                    "credentials": Object {
                      "authorization": Object {},
                      "federation": true,
                    },
                    "feature": Object {
                      "getFeature": [MockFunction],
                    },
                    "flagging": Object {
                      "flag": [MockFunction],
                      "mapToActivities": [MockFunction],
                    },
                    "internal": Object {
                      "conversation": Object {
                        "assign": [MockFunction],
                        "download": [MockFunction],
                        "get": [MockFunction],
                        "unassign": [MockFunction],
                        "update": [MockFunction],
                      },
                      "device": Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "encryption": Object {
                        "decryptScr": [MockFunction],
                        "decryptText": [MockFunction],
                        "download": [MockFunction],
                        "encryptText": [MockFunction],
                        "getUnusedKey": [MockFunction],
                        "keystore": Object {
                          "clear": [MockFunction],
                        },
                        "kms": Object {
                          "prepareRequest": [MockFunction],
                          "request": [MockFunction],
                        },
                      },
                      "mercury": Object {
                        "connect": [MockFunction],
                        "listen": [MockFunction],
                        "listenToAndRun": [MockFunction],
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "stopListening": [MockFunction],
                      },
                      "user": Object {
                        "activate": [MockFunction],
                        "register": [MockFunction],
                      },
                    },
                    "isAuthenticated": false,
                    "isAuthenticating": false,
                    "listenToAndRun": [MockFunction] {
                      "calls": Array [
                        Array [
                          [Circular],
                          "change:canAuthorize",
                          [Function],
                        ],
                        Array [
                          [Circular],
                          "change:isAuthenticating",
                          [Function],
                        ],
                        Array [
                          Object {
                            "getServiceUrl": [MockFunction],
                            "register": [MockFunction],
                            "remove": [MockFunction],
                            "services": Object {
                              "roomServiceUrl": "https://example.com/devices/services/room/1",
                            },
                            "url": "https://example.com/devices/1",
                          },
                          "change:registered",
                          [Function],
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                      ],
                    },
                    "on": [MockFunction],
                    "ready": false,
                    "request": [MockFunction],
                    "search": Object {
                      "people": [MockFunction],
                      "search": [MockFunction],
                    },
                    "support": Object {
                      "submitCallLogs": [MockFunction],
                    },
                    "util": Object {
                      "html": Object {
                        "escapeSync": [MockFunction],
                        "filterSync": [MockFunction],
                      },
                    },
                  },
                  "status": Immutable.Record {
                    "authenticated": false,
                    "authenticating": false,
                    "registered": false,
                    "registerError": false,
                    "registering": false,
                  },
                },
                "storeSparkInstance": [Function],
                "updateSparkStatus": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": [Circular],
              "pendingProps": Object {
                "accessToken": "",
                "addError": [Function],
                "guestToken": "",
                "registerDevice": [Function],
                "sdkInstance": undefined,
                "spark": Immutable.Map {
                  "error": null,
                  "spark": Object {
                    "authenticate": [MockFunction],
                    "board": Object {
                      "decryptContents": [MockFunction],
                      "decryptSingleContent": [MockFunction],
                      "encryptContents": [MockFunction],
                      "encryptSingleContent": [MockFunction],
                      "persistence": Object {
                        "addContent": [MockFunction],
                        "addImage": [MockFunction],
                        "createChannel": [MockFunction],
                        "deleteAllContent": [MockFunction],
                        "deleteContent": [MockFunction],
                        "getAllContent": [MockFunction],
                        "getChannel": [MockFunction],
                        "getChannels": [MockFunction],
                        "ping": [MockFunction],
                        "register": [MockFunction],
                      },
                      "realtime": Object {
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "publish": [MockFunction],
                        "set": [MockFunction],
                      },
                    },
                    "client": Object {
                      "trackingIdBase": "testTrackingIdBase",
                    },
                    "config": Object {
                      "trackingIdPrefix": "testTrackingIdPrefix",
                    },
                    "credentials": Object {
                      "authorization": Object {},
                      "federation": true,
                    },
                    "feature": Object {
                      "getFeature": [MockFunction],
                    },
                    "flagging": Object {
                      "flag": [MockFunction],
                      "mapToActivities": [MockFunction],
                    },
                    "internal": Object {
                      "conversation": Object {
                        "assign": [MockFunction],
                        "download": [MockFunction],
                        "get": [MockFunction],
                        "unassign": [MockFunction],
                        "update": [MockFunction],
                      },
                      "device": Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "encryption": Object {
                        "decryptScr": [MockFunction],
                        "decryptText": [MockFunction],
                        "download": [MockFunction],
                        "encryptText": [MockFunction],
                        "getUnusedKey": [MockFunction],
                        "keystore": Object {
                          "clear": [MockFunction],
                        },
                        "kms": Object {
                          "prepareRequest": [MockFunction],
                          "request": [MockFunction],
                        },
                      },
                      "mercury": Object {
                        "connect": [MockFunction],
                        "listen": [MockFunction],
                        "listenToAndRun": [MockFunction],
                        "on": [MockFunction],
                        "once": [MockFunction],
                        "stopListening": [MockFunction],
                      },
                      "user": Object {
                        "activate": [MockFunction],
                        "register": [MockFunction],
                      },
                    },
                    "isAuthenticated": false,
                    "isAuthenticating": false,
                    "listenToAndRun": [MockFunction] {
                      "calls": Array [
                        Array [
                          [Circular],
                          "change:canAuthorize",
                          [Function],
                        ],
                        Array [
                          [Circular],
                          "change:isAuthenticating",
                          [Function],
                        ],
                        Array [
                          Object {
                            "getServiceUrl": [MockFunction],
                            "register": [MockFunction],
                            "remove": [MockFunction],
                            "services": Object {
                              "roomServiceUrl": "https://example.com/devices/services/room/1",
                            },
                            "url": "https://example.com/devices/1",
                          },
                          "change:registered",
                          [Function],
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                      ],
                    },
                    "on": [MockFunction],
                    "ready": false,
                    "request": [MockFunction],
                    "search": Object {
                      "people": [MockFunction],
                      "search": [MockFunction],
                    },
                    "support": Object {
                      "submitCallLogs": [MockFunction],
                    },
                    "util": Object {
                      "html": Object {
                        "escapeSync": [MockFunction],
                        "filterSync": [MockFunction],
                      },
                    },
                  },
                  "status": Immutable.Record {
                    "authenticated": false,
                    "authenticating": false,
                    "registered": false,
                    "registerError": false,
                    "registering": false,
                  },
                },
                "storeSparkInstance": [Function],
                "updateSparkStatus": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": SparkComponent {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "accessToken": "",
                  "addError": [Function],
                  "guestToken": "",
                  "registerDevice": [Function],
                  "sdkInstance": undefined,
                  "spark": Immutable.Map {
                    "error": null,
                    "spark": Object {
                      "authenticate": [MockFunction],
                      "board": Object {
                        "decryptContents": [MockFunction],
                        "decryptSingleContent": [MockFunction],
                        "encryptContents": [MockFunction],
                        "encryptSingleContent": [MockFunction],
                        "persistence": Object {
                          "addContent": [MockFunction],
                          "addImage": [MockFunction],
                          "createChannel": [MockFunction],
                          "deleteAllContent": [MockFunction],
                          "deleteContent": [MockFunction],
                          "getAllContent": [MockFunction],
                          "getChannel": [MockFunction],
                          "getChannels": [MockFunction],
                          "ping": [MockFunction],
                          "register": [MockFunction],
                        },
                        "realtime": Object {
                          "on": [MockFunction],
                          "once": [MockFunction],
                          "publish": [MockFunction],
                          "set": [MockFunction],
                        },
                      },
                      "client": Object {
                        "trackingIdBase": "testTrackingIdBase",
                      },
                      "config": Object {
                        "trackingIdPrefix": "testTrackingIdPrefix",
                      },
                      "credentials": Object {
                        "authorization": Object {},
                        "federation": true,
                      },
                      "feature": Object {
                        "getFeature": [MockFunction],
                      },
                      "flagging": Object {
                        "flag": [MockFunction],
                        "mapToActivities": [MockFunction],
                      },
                      "internal": Object {
                        "conversation": Object {
                          "assign": [MockFunction],
                          "download": [MockFunction],
                          "get": [MockFunction],
                          "unassign": [MockFunction],
                          "update": [MockFunction],
                        },
                        "device": Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "encryption": Object {
                          "decryptScr": [MockFunction],
                          "decryptText": [MockFunction],
                          "download": [MockFunction],
                          "encryptText": [MockFunction],
                          "getUnusedKey": [MockFunction],
                          "keystore": Object {
                            "clear": [MockFunction],
                          },
                          "kms": Object {
                            "prepareRequest": [MockFunction],
                            "request": [MockFunction],
                          },
                        },
                        "mercury": Object {
                          "connect": [MockFunction],
                          "listen": [MockFunction],
                          "listenToAndRun": [MockFunction],
                          "on": [MockFunction],
                          "once": [MockFunction],
                          "stopListening": [MockFunction],
                        },
                        "user": Object {
                          "activate": [MockFunction],
                          "register": [MockFunction],
                        },
                      },
                      "isAuthenticated": false,
                      "isAuthenticating": false,
                      "listenToAndRun": [MockFunction] {
                        "calls": Array [
                          Array [
                            [Circular],
                            "change:canAuthorize",
                            [Function],
                          ],
                          Array [
                            [Circular],
                            "change:isAuthenticating",
                            [Function],
                          ],
                          Array [
                            Object {
                              "getServiceUrl": [MockFunction],
                              "register": [MockFunction],
                              "remove": [MockFunction],
                              "services": Object {
                                "roomServiceUrl": "https://example.com/devices/services/room/1",
                              },
                              "url": "https://example.com/devices/1",
                            },
                            "change:registered",
                            [Function],
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                        ],
                      },
                      "on": [MockFunction],
                      "ready": false,
                      "request": [MockFunction],
                      "search": Object {
                        "people": [MockFunction],
                        "search": [MockFunction],
                      },
                      "support": Object {
                        "submitCallLogs": [MockFunction],
                      },
                      "util": Object {
                        "html": Object {
                          "escapeSync": [MockFunction],
                          "filterSync": [MockFunction],
                        },
                      },
                    },
                    "status": Immutable.Record {
                      "authenticated": false,
                      "authenticating": false,
                      "registered": false,
                      "registerError": false,
                      "registering": false,
                    },
                  },
                  "storeSparkInstance": [Function],
                  "updateSparkStatus": [Function],
                },
                "refs": Object {},
                "state": null,
                "storeSDKInstance": [Function],
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "type": [Function],
              "updateQueue": null,
            },
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <Provider
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              >
                <Connect(SparkComponent)
                  addError={[MockFunction]}
                  spark={
                    Object {
                      "authorization": "authorization",
                      "internal": Object {
                        "conversation": "conversation",
                        "feature": "feature",
                        "flag": "flag",
                        "mercury": "mercury",
                        "presence": "presence",
                        "search": "search",
                        "team": "team",
                      },
                      "listenToAndRun": [MockFunction],
                      "logger": "logger",
                      "meetings": "meetings",
                      "people": "people",
                      "phone": "phone",
                      "rooms": "rooms",
                    }
                  }
                  storeSparkInstance={[MockFunction]}
                  updateSparkStatus={[MockFunction]}
                />
              </Provider>,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": Object {
                "children": Array [],
                "createNodeMock": [Function],
                "tag": "CONTAINER",
              },
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <Provider
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                >
                  <Connect(SparkComponent)
                    addError={[MockFunction]}
                    spark={
                      Object {
                        "authorization": "authorization",
                        "internal": Object {
                          "conversation": "conversation",
                          "feature": "feature",
                          "flag": "flag",
                          "mercury": "mercury",
                          "presence": "presence",
                          "search": "search",
                          "team": "team",
                        },
                        "listenToAndRun": [MockFunction],
                        "logger": "logger",
                        "meetings": "meetings",
                        "people": "people",
                        "phone": "phone",
                        "rooms": "rooms",
                      }
                    }
                    storeSparkInstance={[MockFunction]}
                    updateSparkStatus={[MockFunction]}
                  />
                </Provider>,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "sibling": null,
          "stateNode": Provider {
            "__reactInternalMemoizedMergedChildContext": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": null,
            },
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "children": <Connect(SparkComponent)
                addError={[MockFunction]}
                spark={
                  Object {
                    "authorization": "authorization",
                    "internal": Object {
                      "conversation": "conversation",
                      "feature": "feature",
                      "flag": "flag",
                      "mercury": "mercury",
                      "presence": "presence",
                      "search": "search",
                      "team": "team",
                    },
                    "listenToAndRun": [MockFunction],
                    "logger": "logger",
                    "meetings": "meetings",
                    "people": "people",
                    "phone": "phone",
                    "rooms": "rooms",
                  }
                }
                storeSparkInstance={[MockFunction]}
                updateSparkStatus={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
            "refs": Object {},
            "state": null,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "type": [Function],
          "updateQueue": null,
        },
        "sibling": null,
        "stateNode": [Circular],
        "tag": 1,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "storeSubscription": null,
      },
      "notifyNestedSubs": [Function],
      "props": Object {
        "addError": [MockFunction],
        "spark": Object {
          "authorization": "authorization",
          "internal": Object {
            "conversation": "conversation",
            "feature": "feature",
            "flag": "flag",
            "mercury": "mercury",
            "presence": "presence",
            "search": "search",
            "team": "team",
          },
          "listenToAndRun": [MockFunction],
          "logger": "logger",
          "meetings": "meetings",
          "people": "people",
          "phone": "phone",
          "rooms": "rooms",
        },
        "storeSparkInstance": [MockFunction],
        "updateSparkStatus": [MockFunction],
      },
      "propsMode": false,
      "refs": Object {},
      "renderCount": 0,
      "selector": Object {
        "error": null,
        "props": Object {
          "addError": [Function],
          "registerDevice": [Function],
          "spark": Immutable.Map {
            "error": null,
            "spark": Object {
              "authenticate": [MockFunction],
              "board": Object {
                "decryptContents": [MockFunction],
                "decryptSingleContent": [MockFunction],
                "encryptContents": [MockFunction],
                "encryptSingleContent": [MockFunction],
                "persistence": Object {
                  "addContent": [MockFunction],
                  "addImage": [MockFunction],
                  "createChannel": [MockFunction],
                  "deleteAllContent": [MockFunction],
                  "deleteContent": [MockFunction],
                  "getAllContent": [MockFunction],
                  "getChannel": [MockFunction],
                  "getChannels": [MockFunction],
                  "ping": [MockFunction],
                  "register": [MockFunction],
                },
                "realtime": Object {
                  "on": [MockFunction],
                  "once": [MockFunction],
                  "publish": [MockFunction],
                  "set": [MockFunction],
                },
              },
              "client": Object {
                "trackingIdBase": "testTrackingIdBase",
              },
              "config": Object {
                "trackingIdPrefix": "testTrackingIdPrefix",
              },
              "credentials": Object {
                "authorization": Object {},
                "federation": true,
              },
              "feature": Object {
                "getFeature": [MockFunction],
              },
              "flagging": Object {
                "flag": [MockFunction],
                "mapToActivities": [MockFunction],
              },
              "internal": Object {
                "conversation": Object {
                  "assign": [MockFunction],
                  "download": [MockFunction],
                  "get": [MockFunction],
                  "unassign": [MockFunction],
                  "update": [MockFunction],
                },
                "device": Object {
                  "getServiceUrl": [MockFunction],
                  "register": [MockFunction],
                  "remove": [MockFunction],
                  "services": Object {
                    "roomServiceUrl": "https://example.com/devices/services/room/1",
                  },
                  "url": "https://example.com/devices/1",
                },
                "encryption": Object {
                  "decryptScr": [MockFunction],
                  "decryptText": [MockFunction],
                  "download": [MockFunction],
                  "encryptText": [MockFunction],
                  "getUnusedKey": [MockFunction],
                  "keystore": Object {
                    "clear": [MockFunction],
                  },
                  "kms": Object {
                    "prepareRequest": [MockFunction],
                    "request": [MockFunction],
                  },
                },
                "mercury": Object {
                  "connect": [MockFunction],
                  "listen": [MockFunction],
                  "listenToAndRun": [MockFunction],
                  "on": [MockFunction],
                  "once": [MockFunction],
                  "stopListening": [MockFunction],
                },
                "user": Object {
                  "activate": [MockFunction],
                  "register": [MockFunction],
                },
              },
              "isAuthenticated": false,
              "isAuthenticating": false,
              "listenToAndRun": [MockFunction] {
                "calls": Array [
                  Array [
                    [Circular],
                    "change:canAuthorize",
                    [Function],
                  ],
                  Array [
                    [Circular],
                    "change:isAuthenticating",
                    [Function],
                  ],
                  Array [
                    Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "change:registered",
                    [Function],
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                ],
              },
              "on": [MockFunction],
              "ready": false,
              "request": [MockFunction],
              "search": Object {
                "people": [MockFunction],
                "search": [MockFunction],
              },
              "support": Object {
                "submitCallLogs": [MockFunction],
              },
              "util": Object {
                "html": Object {
                  "escapeSync": [MockFunction],
                  "filterSync": [MockFunction],
                },
              },
            },
            "status": Immutable.Record {
              "authenticated": false,
              "authenticating": false,
              "registered": false,
              "registerError": false,
              "registering": false,
            },
          },
          "storeSparkInstance": [Function],
          "updateSparkStatus": [Function],
        },
        "run": [Function],
        "shouldComponentUpdate": false,
      },
      "setWrappedInstance": [Function],
      "state": Object {},
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": null,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      },
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
      "version": 1,
    },
    "nodeType": "component",
    "props": Object {
      "addError": [MockFunction],
      "spark": Object {
        "authorization": "authorization",
        "internal": Object {
          "conversation": "conversation",
          "feature": "feature",
          "flag": "flag",
          "mercury": "mercury",
          "presence": "presence",
          "search": "search",
          "team": "team",
        },
        "listenToAndRun": [MockFunction],
        "logger": "logger",
        "meetings": "meetings",
        "people": "people",
        "phone": "phone",
        "rooms": "rooms",
      },
      "storeSparkInstance": [MockFunction],
      "updateSparkStatus": [MockFunction],
    },
    "rendered": Object {
      "instance": SparkComponent {
        "_reactInternalFiber": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 5,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 5,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "addError": [MockFunction],
              "spark": Object {
                "authorization": "authorization",
                "internal": Object {
                  "conversation": "conversation",
                  "feature": "feature",
                  "flag": "flag",
                  "mercury": "mercury",
                  "presence": "presence",
                  "search": "search",
                  "team": "team",
                },
                "listenToAndRun": [MockFunction],
                "logger": "logger",
                "meetings": "meetings",
                "people": "people",
                "phone": "phone",
                "rooms": "rooms",
              },
              "storeSparkInstance": [MockFunction],
              "updateSparkStatus": [MockFunction],
            },
            "memoizedState": Object {},
            "mode": 0,
            "nextEffect": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 4,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 1,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": Object {
                "children": <Connect(SparkComponent)
                  addError={[MockFunction]}
                  spark={
                    Object {
                      "authorization": "authorization",
                      "internal": Object {
                        "conversation": "conversation",
                        "feature": "feature",
                        "flag": "flag",
                        "mercury": "mercury",
                        "presence": "presence",
                        "search": "search",
                        "team": "team",
                      },
                      "listenToAndRun": [MockFunction],
                      "logger": "logger",
                      "meetings": "meetings",
                      "people": "people",
                      "phone": "phone",
                      "rooms": "rooms",
                    }
                  }
                  storeSparkInstance={[MockFunction]}
                  updateSparkStatus={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <Connect(SparkComponent)
                  addError={[MockFunction]}
                  spark={
                    Object {
                      "authorization": "authorization",
                      "internal": Object {
                        "conversation": "conversation",
                        "feature": "feature",
                        "flag": "flag",
                        "mercury": "mercury",
                        "presence": "presence",
                        "search": "search",
                        "team": "team",
                      },
                      "listenToAndRun": [MockFunction],
                      "logger": "logger",
                      "meetings": "meetings",
                      "people": "people",
                      "phone": "phone",
                      "rooms": "rooms",
                    }
                  }
                  storeSparkInstance={[MockFunction]}
                  updateSparkStatus={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 2,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 2,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": [Circular],
                  "child": null,
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": null,
                  "expirationTime": 1073741823,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": Object {
                      "children": Array [],
                      "createNodeMock": [Function],
                      "tag": "CONTAINER",
                    },
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": Object {
                      "callback": null,
                      "expirationTime": 1073741823,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <Provider
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <Connect(SparkComponent)
                            addError={[MockFunction]}
                            spark={
                              Object {
                                "authorization": "authorization",
                                "internal": Object {
                                  "conversation": "conversation",
                                  "feature": "feature",
                                  "flag": "flag",
                                  "mercury": "mercury",
                                  "presence": "presence",
                                  "search": "search",
                                  "team": "team",
                                },
                                "listenToAndRun": [MockFunction],
                                "logger": "logger",
                                "meetings": "meetings",
                                "people": "people",
                                "phone": "phone",
                                "rooms": "rooms",
                              }
                            }
                            storeSparkInstance={[MockFunction]}
                            updateSparkStatus={[MockFunction]}
                          />
                        </Provider>,
                      },
                      "tag": 0,
                    },
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": Object {
                      "callback": null,
                      "expirationTime": 1073741823,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <Provider
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <Connect(SparkComponent)
                            addError={[MockFunction]}
                            spark={
                              Object {
                                "authorization": "authorization",
                                "internal": Object {
                                  "conversation": "conversation",
                                  "feature": "feature",
                                  "flag": "flag",
                                  "mercury": "mercury",
                                  "presence": "presence",
                                  "search": "search",
                                  "team": "team",
                                },
                                "listenToAndRun": [MockFunction],
                                "logger": "logger",
                                "meetings": "meetings",
                                "people": "people",
                                "phone": "phone",
                                "rooms": "rooms",
                              }
                            }
                            storeSparkInstance={[MockFunction]}
                            updateSparkStatus={[MockFunction]}
                          />
                        </Provider>,
                      },
                      "tag": 0,
                    },
                  },
                },
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <Provider
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  >
                    <Connect(SparkComponent)
                      addError={[MockFunction]}
                      spark={
                        Object {
                          "authorization": "authorization",
                          "internal": Object {
                            "conversation": "conversation",
                            "feature": "feature",
                            "flag": "flag",
                            "mercury": "mercury",
                            "presence": "presence",
                            "search": "search",
                            "team": "team",
                          },
                          "listenToAndRun": [MockFunction],
                          "logger": "logger",
                          "meetings": "meetings",
                          "people": "people",
                          "phone": "phone",
                          "rooms": "rooms",
                        }
                      }
                      storeSparkInstance={[MockFunction]}
                      updateSparkStatus={[MockFunction]}
                    />
                  </Provider>,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": Object {
                    "children": Array [],
                    "createNodeMock": [Function],
                    "tag": "CONTAINER",
                  },
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <Provider
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    >
                      <Connect(SparkComponent)
                        addError={[MockFunction]}
                        spark={
                          Object {
                            "authorization": "authorization",
                            "internal": Object {
                              "conversation": "conversation",
                              "feature": "feature",
                              "flag": "flag",
                              "mercury": "mercury",
                              "presence": "presence",
                              "search": "search",
                              "team": "team",
                            },
                            "listenToAndRun": [MockFunction],
                            "logger": "logger",
                            "meetings": "meetings",
                            "people": "people",
                            "phone": "phone",
                            "rooms": "rooms",
                          }
                        }
                        storeSparkInstance={[MockFunction]}
                        updateSparkStatus={[MockFunction]}
                      />
                    </Provider>,
                  },
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": null,
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": null,
                },
              },
              "sibling": null,
              "stateNode": Provider {
                "__reactInternalMemoizedMergedChildContext": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeSubscription": null,
                },
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "children": <Connect(SparkComponent)
                    addError={[MockFunction]}
                    spark={
                      Object {
                        "authorization": "authorization",
                        "internal": Object {
                          "conversation": "conversation",
                          "feature": "feature",
                          "flag": "flag",
                          "mercury": "mercury",
                          "presence": "presence",
                          "search": "search",
                          "team": "team",
                        },
                        "listenToAndRun": [MockFunction],
                        "logger": "logger",
                        "meetings": "meetings",
                        "people": "people",
                        "phone": "phone",
                        "rooms": "rooms",
                      }
                    }
                    storeSparkInstance={[MockFunction]}
                    updateSparkStatus={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "refs": Object {},
                "state": null,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "type": [Function],
              "updateQueue": null,
            },
            "pendingProps": Object {
              "addError": [MockFunction],
              "spark": Object {
                "authorization": "authorization",
                "internal": Object {
                  "conversation": "conversation",
                  "feature": "feature",
                  "flag": "flag",
                  "mercury": "mercury",
                  "presence": "presence",
                  "search": "search",
                  "team": "team",
                },
                "listenToAndRun": [MockFunction],
                "logger": "logger",
                "meetings": "meetings",
                "people": "people",
                "phone": "phone",
                "rooms": "rooms",
              },
              "storeSparkInstance": [MockFunction],
              "updateSparkStatus": [MockFunction],
            },
            "ref": null,
            "return": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 4,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 1,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": Object {
                "children": <Connect(SparkComponent)
                  addError={[MockFunction]}
                  spark={
                    Object {
                      "authorization": "authorization",
                      "internal": Object {
                        "conversation": "conversation",
                        "feature": "feature",
                        "flag": "flag",
                        "mercury": "mercury",
                        "presence": "presence",
                        "search": "search",
                        "team": "team",
                      },
                      "listenToAndRun": [MockFunction],
                      "logger": "logger",
                      "meetings": "meetings",
                      "people": "people",
                      "phone": "phone",
                      "rooms": "rooms",
                    }
                  }
                  storeSparkInstance={[MockFunction]}
                  updateSparkStatus={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <Connect(SparkComponent)
                  addError={[MockFunction]}
                  spark={
                    Object {
                      "authorization": "authorization",
                      "internal": Object {
                        "conversation": "conversation",
                        "feature": "feature",
                        "flag": "flag",
                        "mercury": "mercury",
                        "presence": "presence",
                        "search": "search",
                        "team": "team",
                      },
                      "listenToAndRun": [MockFunction],
                      "logger": "logger",
                      "meetings": "meetings",
                      "people": "people",
                      "phone": "phone",
                      "rooms": "rooms",
                    }
                  }
                  storeSparkInstance={[MockFunction]}
                  updateSparkStatus={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 2,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 2,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": [Circular],
                  "child": null,
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": null,
                  "expirationTime": 1073741823,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": Object {
                      "children": Array [],
                      "createNodeMock": [Function],
                      "tag": "CONTAINER",
                    },
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": Object {
                      "callback": null,
                      "expirationTime": 1073741823,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <Provider
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <Connect(SparkComponent)
                            addError={[MockFunction]}
                            spark={
                              Object {
                                "authorization": "authorization",
                                "internal": Object {
                                  "conversation": "conversation",
                                  "feature": "feature",
                                  "flag": "flag",
                                  "mercury": "mercury",
                                  "presence": "presence",
                                  "search": "search",
                                  "team": "team",
                                },
                                "listenToAndRun": [MockFunction],
                                "logger": "logger",
                                "meetings": "meetings",
                                "people": "people",
                                "phone": "phone",
                                "rooms": "rooms",
                              }
                            }
                            storeSparkInstance={[MockFunction]}
                            updateSparkStatus={[MockFunction]}
                          />
                        </Provider>,
                      },
                      "tag": 0,
                    },
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": Object {
                      "callback": null,
                      "expirationTime": 1073741823,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <Provider
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <Connect(SparkComponent)
                            addError={[MockFunction]}
                            spark={
                              Object {
                                "authorization": "authorization",
                                "internal": Object {
                                  "conversation": "conversation",
                                  "feature": "feature",
                                  "flag": "flag",
                                  "mercury": "mercury",
                                  "presence": "presence",
                                  "search": "search",
                                  "team": "team",
                                },
                                "listenToAndRun": [MockFunction],
                                "logger": "logger",
                                "meetings": "meetings",
                                "people": "people",
                                "phone": "phone",
                                "rooms": "rooms",
                              }
                            }
                            storeSparkInstance={[MockFunction]}
                            updateSparkStatus={[MockFunction]}
                          />
                        </Provider>,
                      },
                      "tag": 0,
                    },
                  },
                },
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <Provider
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  >
                    <Connect(SparkComponent)
                      addError={[MockFunction]}
                      spark={
                        Object {
                          "authorization": "authorization",
                          "internal": Object {
                            "conversation": "conversation",
                            "feature": "feature",
                            "flag": "flag",
                            "mercury": "mercury",
                            "presence": "presence",
                            "search": "search",
                            "team": "team",
                          },
                          "listenToAndRun": [MockFunction],
                          "logger": "logger",
                          "meetings": "meetings",
                          "people": "people",
                          "phone": "phone",
                          "rooms": "rooms",
                        }
                      }
                      storeSparkInstance={[MockFunction]}
                      updateSparkStatus={[MockFunction]}
                    />
                  </Provider>,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": Object {
                    "children": Array [],
                    "createNodeMock": [Function],
                    "tag": "CONTAINER",
                  },
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <Provider
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    >
                      <Connect(SparkComponent)
                        addError={[MockFunction]}
                        spark={
                          Object {
                            "authorization": "authorization",
                            "internal": Object {
                              "conversation": "conversation",
                              "feature": "feature",
                              "flag": "flag",
                              "mercury": "mercury",
                              "presence": "presence",
                              "search": "search",
                              "team": "team",
                            },
                            "listenToAndRun": [MockFunction],
                            "logger": "logger",
                            "meetings": "meetings",
                            "people": "people",
                            "phone": "phone",
                            "rooms": "rooms",
                          }
                        }
                        storeSparkInstance={[MockFunction]}
                        updateSparkStatus={[MockFunction]}
                      />
                    </Provider>,
                  },
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": null,
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": null,
                },
              },
              "sibling": null,
              "stateNode": Provider {
                "__reactInternalMemoizedMergedChildContext": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeSubscription": null,
                },
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "children": <Connect(SparkComponent)
                    addError={[MockFunction]}
                    spark={
                      Object {
                        "authorization": "authorization",
                        "internal": Object {
                          "conversation": "conversation",
                          "feature": "feature",
                          "flag": "flag",
                          "mercury": "mercury",
                          "presence": "presence",
                          "search": "search",
                          "team": "team",
                        },
                        "listenToAndRun": [MockFunction],
                        "logger": "logger",
                        "meetings": "meetings",
                        "people": "people",
                        "phone": "phone",
                        "rooms": "rooms",
                      }
                    }
                    storeSparkInstance={[MockFunction]}
                    updateSparkStatus={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "refs": Object {},
                "state": null,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "type": [Function],
              "updateQueue": null,
            },
            "sibling": null,
            "stateNode": Connect {
              "__reactInternalMemoizedMaskedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "__reactInternalMemoizedMergedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "unsubscribe": [Function],
                },
              },
              "__reactInternalMemoizedUnmaskedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "notifyNestedSubs": [Function],
              "props": Object {
                "addError": [MockFunction],
                "spark": Object {
                  "authorization": "authorization",
                  "internal": Object {
                    "conversation": "conversation",
                    "feature": "feature",
                    "flag": "flag",
                    "mercury": "mercury",
                    "presence": "presence",
                    "search": "search",
                    "team": "team",
                  },
                  "listenToAndRun": [MockFunction],
                  "logger": "logger",
                  "meetings": "meetings",
                  "people": "people",
                  "phone": "phone",
                  "rooms": "rooms",
                },
                "storeSparkInstance": [MockFunction],
                "updateSparkStatus": [MockFunction],
              },
              "propsMode": false,
              "refs": Object {},
              "renderCount": 0,
              "selector": Object {
                "error": null,
                "props": Object {
                  "addError": [Function],
                  "registerDevice": [Function],
                  "spark": Immutable.Map {
                    "error": null,
                    "spark": Object {
                      "authenticate": [MockFunction],
                      "board": Object {
                        "decryptContents": [MockFunction],
                        "decryptSingleContent": [MockFunction],
                        "encryptContents": [MockFunction],
                        "encryptSingleContent": [MockFunction],
                        "persistence": Object {
                          "addContent": [MockFunction],
                          "addImage": [MockFunction],
                          "createChannel": [MockFunction],
                          "deleteAllContent": [MockFunction],
                          "deleteContent": [MockFunction],
                          "getAllContent": [MockFunction],
                          "getChannel": [MockFunction],
                          "getChannels": [MockFunction],
                          "ping": [MockFunction],
                          "register": [MockFunction],
                        },
                        "realtime": Object {
                          "on": [MockFunction],
                          "once": [MockFunction],
                          "publish": [MockFunction],
                          "set": [MockFunction],
                        },
                      },
                      "client": Object {
                        "trackingIdBase": "testTrackingIdBase",
                      },
                      "config": Object {
                        "trackingIdPrefix": "testTrackingIdPrefix",
                      },
                      "credentials": Object {
                        "authorization": Object {},
                        "federation": true,
                      },
                      "feature": Object {
                        "getFeature": [MockFunction],
                      },
                      "flagging": Object {
                        "flag": [MockFunction],
                        "mapToActivities": [MockFunction],
                      },
                      "internal": Object {
                        "conversation": Object {
                          "assign": [MockFunction],
                          "download": [MockFunction],
                          "get": [MockFunction],
                          "unassign": [MockFunction],
                          "update": [MockFunction],
                        },
                        "device": Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "encryption": Object {
                          "decryptScr": [MockFunction],
                          "decryptText": [MockFunction],
                          "download": [MockFunction],
                          "encryptText": [MockFunction],
                          "getUnusedKey": [MockFunction],
                          "keystore": Object {
                            "clear": [MockFunction],
                          },
                          "kms": Object {
                            "prepareRequest": [MockFunction],
                            "request": [MockFunction],
                          },
                        },
                        "mercury": Object {
                          "connect": [MockFunction],
                          "listen": [MockFunction],
                          "listenToAndRun": [MockFunction],
                          "on": [MockFunction],
                          "once": [MockFunction],
                          "stopListening": [MockFunction],
                        },
                        "user": Object {
                          "activate": [MockFunction],
                          "register": [MockFunction],
                        },
                      },
                      "isAuthenticated": false,
                      "isAuthenticating": false,
                      "listenToAndRun": [MockFunction] {
                        "calls": Array [
                          Array [
                            [Circular],
                            "change:canAuthorize",
                            [Function],
                          ],
                          Array [
                            [Circular],
                            "change:isAuthenticating",
                            [Function],
                          ],
                          Array [
                            Object {
                              "getServiceUrl": [MockFunction],
                              "register": [MockFunction],
                              "remove": [MockFunction],
                              "services": Object {
                                "roomServiceUrl": "https://example.com/devices/services/room/1",
                              },
                              "url": "https://example.com/devices/1",
                            },
                            "change:registered",
                            [Function],
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                        ],
                      },
                      "on": [MockFunction],
                      "ready": false,
                      "request": [MockFunction],
                      "search": Object {
                        "people": [MockFunction],
                        "search": [MockFunction],
                      },
                      "support": Object {
                        "submitCallLogs": [MockFunction],
                      },
                      "util": Object {
                        "html": Object {
                          "escapeSync": [MockFunction],
                          "filterSync": [MockFunction],
                        },
                      },
                    },
                    "status": Immutable.Record {
                      "authenticated": false,
                      "authenticating": false,
                      "registered": false,
                      "registerError": false,
                      "registering": false,
                    },
                  },
                  "storeSparkInstance": [Function],
                  "updateSparkStatus": [Function],
                },
                "run": [Function],
                "shouldComponentUpdate": false,
              },
              "setWrappedInstance": [Function],
              "state": Object {},
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "subscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
              "version": 1,
            },
            "tag": 1,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "alternate": null,
          "child": null,
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 5,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 5,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 5,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "addError": [MockFunction],
              "spark": Object {
                "authorization": "authorization",
                "internal": Object {
                  "conversation": "conversation",
                  "feature": "feature",
                  "flag": "flag",
                  "mercury": "mercury",
                  "presence": "presence",
                  "search": "search",
                  "team": "team",
                },
                "listenToAndRun": [MockFunction],
                "logger": "logger",
                "meetings": "meetings",
                "people": "people",
                "phone": "phone",
                "rooms": "rooms",
              },
              "storeSparkInstance": [MockFunction],
              "updateSparkStatus": [MockFunction],
            },
            "memoizedState": Object {},
            "mode": 0,
            "nextEffect": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 4,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 1,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": Object {
                "children": <Connect(SparkComponent)
                  addError={[MockFunction]}
                  spark={
                    Object {
                      "authorization": "authorization",
                      "internal": Object {
                        "conversation": "conversation",
                        "feature": "feature",
                        "flag": "flag",
                        "mercury": "mercury",
                        "presence": "presence",
                        "search": "search",
                        "team": "team",
                      },
                      "listenToAndRun": [MockFunction],
                      "logger": "logger",
                      "meetings": "meetings",
                      "people": "people",
                      "phone": "phone",
                      "rooms": "rooms",
                    }
                  }
                  storeSparkInstance={[MockFunction]}
                  updateSparkStatus={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <Connect(SparkComponent)
                  addError={[MockFunction]}
                  spark={
                    Object {
                      "authorization": "authorization",
                      "internal": Object {
                        "conversation": "conversation",
                        "feature": "feature",
                        "flag": "flag",
                        "mercury": "mercury",
                        "presence": "presence",
                        "search": "search",
                        "team": "team",
                      },
                      "listenToAndRun": [MockFunction],
                      "logger": "logger",
                      "meetings": "meetings",
                      "people": "people",
                      "phone": "phone",
                      "rooms": "rooms",
                    }
                  }
                  storeSparkInstance={[MockFunction]}
                  updateSparkStatus={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 2,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 2,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": [Circular],
                  "child": null,
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": null,
                  "expirationTime": 1073741823,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": Object {
                      "children": Array [],
                      "createNodeMock": [Function],
                      "tag": "CONTAINER",
                    },
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": Object {
                      "callback": null,
                      "expirationTime": 1073741823,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <Provider
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <Connect(SparkComponent)
                            addError={[MockFunction]}
                            spark={
                              Object {
                                "authorization": "authorization",
                                "internal": Object {
                                  "conversation": "conversation",
                                  "feature": "feature",
                                  "flag": "flag",
                                  "mercury": "mercury",
                                  "presence": "presence",
                                  "search": "search",
                                  "team": "team",
                                },
                                "listenToAndRun": [MockFunction],
                                "logger": "logger",
                                "meetings": "meetings",
                                "people": "people",
                                "phone": "phone",
                                "rooms": "rooms",
                              }
                            }
                            storeSparkInstance={[MockFunction]}
                            updateSparkStatus={[MockFunction]}
                          />
                        </Provider>,
                      },
                      "tag": 0,
                    },
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": Object {
                      "callback": null,
                      "expirationTime": 1073741823,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <Provider
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <Connect(SparkComponent)
                            addError={[MockFunction]}
                            spark={
                              Object {
                                "authorization": "authorization",
                                "internal": Object {
                                  "conversation": "conversation",
                                  "feature": "feature",
                                  "flag": "flag",
                                  "mercury": "mercury",
                                  "presence": "presence",
                                  "search": "search",
                                  "team": "team",
                                },
                                "listenToAndRun": [MockFunction],
                                "logger": "logger",
                                "meetings": "meetings",
                                "people": "people",
                                "phone": "phone",
                                "rooms": "rooms",
                              }
                            }
                            storeSparkInstance={[MockFunction]}
                            updateSparkStatus={[MockFunction]}
                          />
                        </Provider>,
                      },
                      "tag": 0,
                    },
                  },
                },
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <Provider
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  >
                    <Connect(SparkComponent)
                      addError={[MockFunction]}
                      spark={
                        Object {
                          "authorization": "authorization",
                          "internal": Object {
                            "conversation": "conversation",
                            "feature": "feature",
                            "flag": "flag",
                            "mercury": "mercury",
                            "presence": "presence",
                            "search": "search",
                            "team": "team",
                          },
                          "listenToAndRun": [MockFunction],
                          "logger": "logger",
                          "meetings": "meetings",
                          "people": "people",
                          "phone": "phone",
                          "rooms": "rooms",
                        }
                      }
                      storeSparkInstance={[MockFunction]}
                      updateSparkStatus={[MockFunction]}
                    />
                  </Provider>,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": Object {
                    "children": Array [],
                    "createNodeMock": [Function],
                    "tag": "CONTAINER",
                  },
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <Provider
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    >
                      <Connect(SparkComponent)
                        addError={[MockFunction]}
                        spark={
                          Object {
                            "authorization": "authorization",
                            "internal": Object {
                              "conversation": "conversation",
                              "feature": "feature",
                              "flag": "flag",
                              "mercury": "mercury",
                              "presence": "presence",
                              "search": "search",
                              "team": "team",
                            },
                            "listenToAndRun": [MockFunction],
                            "logger": "logger",
                            "meetings": "meetings",
                            "people": "people",
                            "phone": "phone",
                            "rooms": "rooms",
                          }
                        }
                        storeSparkInstance={[MockFunction]}
                        updateSparkStatus={[MockFunction]}
                      />
                    </Provider>,
                  },
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": null,
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": null,
                },
              },
              "sibling": null,
              "stateNode": Provider {
                "__reactInternalMemoizedMergedChildContext": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeSubscription": null,
                },
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "children": <Connect(SparkComponent)
                    addError={[MockFunction]}
                    spark={
                      Object {
                        "authorization": "authorization",
                        "internal": Object {
                          "conversation": "conversation",
                          "feature": "feature",
                          "flag": "flag",
                          "mercury": "mercury",
                          "presence": "presence",
                          "search": "search",
                          "team": "team",
                        },
                        "listenToAndRun": [MockFunction],
                        "logger": "logger",
                        "meetings": "meetings",
                        "people": "people",
                        "phone": "phone",
                        "rooms": "rooms",
                      }
                    }
                    storeSparkInstance={[MockFunction]}
                    updateSparkStatus={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "refs": Object {},
                "state": null,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "type": [Function],
              "updateQueue": null,
            },
            "pendingProps": Object {
              "addError": [MockFunction],
              "spark": Object {
                "authorization": "authorization",
                "internal": Object {
                  "conversation": "conversation",
                  "feature": "feature",
                  "flag": "flag",
                  "mercury": "mercury",
                  "presence": "presence",
                  "search": "search",
                  "team": "team",
                },
                "listenToAndRun": [MockFunction],
                "logger": "logger",
                "meetings": "meetings",
                "people": "people",
                "phone": "phone",
                "rooms": "rooms",
              },
              "storeSparkInstance": [MockFunction],
              "updateSparkStatus": [MockFunction],
            },
            "ref": null,
            "return": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 4,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 1,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": Object {
                "children": <Connect(SparkComponent)
                  addError={[MockFunction]}
                  spark={
                    Object {
                      "authorization": "authorization",
                      "internal": Object {
                        "conversation": "conversation",
                        "feature": "feature",
                        "flag": "flag",
                        "mercury": "mercury",
                        "presence": "presence",
                        "search": "search",
                        "team": "team",
                      },
                      "listenToAndRun": [MockFunction],
                      "logger": "logger",
                      "meetings": "meetings",
                      "people": "people",
                      "phone": "phone",
                      "rooms": "rooms",
                    }
                  }
                  storeSparkInstance={[MockFunction]}
                  updateSparkStatus={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <Connect(SparkComponent)
                  addError={[MockFunction]}
                  spark={
                    Object {
                      "authorization": "authorization",
                      "internal": Object {
                        "conversation": "conversation",
                        "feature": "feature",
                        "flag": "flag",
                        "mercury": "mercury",
                        "presence": "presence",
                        "search": "search",
                        "team": "team",
                      },
                      "listenToAndRun": [MockFunction],
                      "logger": "logger",
                      "meetings": "meetings",
                      "people": "people",
                      "phone": "phone",
                      "rooms": "rooms",
                    }
                  }
                  storeSparkInstance={[MockFunction]}
                  updateSparkStatus={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 2,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 2,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": [Circular],
                  "child": null,
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": null,
                  "expirationTime": 1073741823,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": Object {
                      "children": Array [],
                      "createNodeMock": [Function],
                      "tag": "CONTAINER",
                    },
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": Object {
                      "callback": null,
                      "expirationTime": 1073741823,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <Provider
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <Connect(SparkComponent)
                            addError={[MockFunction]}
                            spark={
                              Object {
                                "authorization": "authorization",
                                "internal": Object {
                                  "conversation": "conversation",
                                  "feature": "feature",
                                  "flag": "flag",
                                  "mercury": "mercury",
                                  "presence": "presence",
                                  "search": "search",
                                  "team": "team",
                                },
                                "listenToAndRun": [MockFunction],
                                "logger": "logger",
                                "meetings": "meetings",
                                "people": "people",
                                "phone": "phone",
                                "rooms": "rooms",
                              }
                            }
                            storeSparkInstance={[MockFunction]}
                            updateSparkStatus={[MockFunction]}
                          />
                        </Provider>,
                      },
                      "tag": 0,
                    },
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": Object {
                      "callback": null,
                      "expirationTime": 1073741823,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <Provider
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <Connect(SparkComponent)
                            addError={[MockFunction]}
                            spark={
                              Object {
                                "authorization": "authorization",
                                "internal": Object {
                                  "conversation": "conversation",
                                  "feature": "feature",
                                  "flag": "flag",
                                  "mercury": "mercury",
                                  "presence": "presence",
                                  "search": "search",
                                  "team": "team",
                                },
                                "listenToAndRun": [MockFunction],
                                "logger": "logger",
                                "meetings": "meetings",
                                "people": "people",
                                "phone": "phone",
                                "rooms": "rooms",
                              }
                            }
                            storeSparkInstance={[MockFunction]}
                            updateSparkStatus={[MockFunction]}
                          />
                        </Provider>,
                      },
                      "tag": 0,
                    },
                  },
                },
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <Provider
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  >
                    <Connect(SparkComponent)
                      addError={[MockFunction]}
                      spark={
                        Object {
                          "authorization": "authorization",
                          "internal": Object {
                            "conversation": "conversation",
                            "feature": "feature",
                            "flag": "flag",
                            "mercury": "mercury",
                            "presence": "presence",
                            "search": "search",
                            "team": "team",
                          },
                          "listenToAndRun": [MockFunction],
                          "logger": "logger",
                          "meetings": "meetings",
                          "people": "people",
                          "phone": "phone",
                          "rooms": "rooms",
                        }
                      }
                      storeSparkInstance={[MockFunction]}
                      updateSparkStatus={[MockFunction]}
                    />
                  </Provider>,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": Object {
                    "children": Array [],
                    "createNodeMock": [Function],
                    "tag": "CONTAINER",
                  },
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <Provider
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    >
                      <Connect(SparkComponent)
                        addError={[MockFunction]}
                        spark={
                          Object {
                            "authorization": "authorization",
                            "internal": Object {
                              "conversation": "conversation",
                              "feature": "feature",
                              "flag": "flag",
                              "mercury": "mercury",
                              "presence": "presence",
                              "search": "search",
                              "team": "team",
                            },
                            "listenToAndRun": [MockFunction],
                            "logger": "logger",
                            "meetings": "meetings",
                            "people": "people",
                            "phone": "phone",
                            "rooms": "rooms",
                          }
                        }
                        storeSparkInstance={[MockFunction]}
                        updateSparkStatus={[MockFunction]}
                      />
                    </Provider>,
                  },
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": null,
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": null,
                },
              },
              "sibling": null,
              "stateNode": Provider {
                "__reactInternalMemoizedMergedChildContext": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeSubscription": null,
                },
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "children": <Connect(SparkComponent)
                    addError={[MockFunction]}
                    spark={
                      Object {
                        "authorization": "authorization",
                        "internal": Object {
                          "conversation": "conversation",
                          "feature": "feature",
                          "flag": "flag",
                          "mercury": "mercury",
                          "presence": "presence",
                          "search": "search",
                          "team": "team",
                        },
                        "listenToAndRun": [MockFunction],
                        "logger": "logger",
                        "meetings": "meetings",
                        "people": "people",
                        "phone": "phone",
                        "rooms": "rooms",
                      }
                    }
                    storeSparkInstance={[MockFunction]}
                    updateSparkStatus={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "refs": Object {},
                "state": null,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "type": [Function],
              "updateQueue": null,
            },
            "sibling": null,
            "stateNode": Connect {
              "__reactInternalMemoizedMaskedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "__reactInternalMemoizedMergedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "unsubscribe": [Function],
                },
              },
              "__reactInternalMemoizedUnmaskedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "notifyNestedSubs": [Function],
              "props": Object {
                "addError": [MockFunction],
                "spark": Object {
                  "authorization": "authorization",
                  "internal": Object {
                    "conversation": "conversation",
                    "feature": "feature",
                    "flag": "flag",
                    "mercury": "mercury",
                    "presence": "presence",
                    "search": "search",
                    "team": "team",
                  },
                  "listenToAndRun": [MockFunction],
                  "logger": "logger",
                  "meetings": "meetings",
                  "people": "people",
                  "phone": "phone",
                  "rooms": "rooms",
                },
                "storeSparkInstance": [MockFunction],
                "updateSparkStatus": [MockFunction],
              },
              "propsMode": false,
              "refs": Object {},
              "renderCount": 0,
              "selector": Object {
                "error": null,
                "props": Object {
                  "addError": [Function],
                  "registerDevice": [Function],
                  "spark": Immutable.Map {
                    "error": null,
                    "spark": Object {
                      "authenticate": [MockFunction],
                      "board": Object {
                        "decryptContents": [MockFunction],
                        "decryptSingleContent": [MockFunction],
                        "encryptContents": [MockFunction],
                        "encryptSingleContent": [MockFunction],
                        "persistence": Object {
                          "addContent": [MockFunction],
                          "addImage": [MockFunction],
                          "createChannel": [MockFunction],
                          "deleteAllContent": [MockFunction],
                          "deleteContent": [MockFunction],
                          "getAllContent": [MockFunction],
                          "getChannel": [MockFunction],
                          "getChannels": [MockFunction],
                          "ping": [MockFunction],
                          "register": [MockFunction],
                        },
                        "realtime": Object {
                          "on": [MockFunction],
                          "once": [MockFunction],
                          "publish": [MockFunction],
                          "set": [MockFunction],
                        },
                      },
                      "client": Object {
                        "trackingIdBase": "testTrackingIdBase",
                      },
                      "config": Object {
                        "trackingIdPrefix": "testTrackingIdPrefix",
                      },
                      "credentials": Object {
                        "authorization": Object {},
                        "federation": true,
                      },
                      "feature": Object {
                        "getFeature": [MockFunction],
                      },
                      "flagging": Object {
                        "flag": [MockFunction],
                        "mapToActivities": [MockFunction],
                      },
                      "internal": Object {
                        "conversation": Object {
                          "assign": [MockFunction],
                          "download": [MockFunction],
                          "get": [MockFunction],
                          "unassign": [MockFunction],
                          "update": [MockFunction],
                        },
                        "device": Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "encryption": Object {
                          "decryptScr": [MockFunction],
                          "decryptText": [MockFunction],
                          "download": [MockFunction],
                          "encryptText": [MockFunction],
                          "getUnusedKey": [MockFunction],
                          "keystore": Object {
                            "clear": [MockFunction],
                          },
                          "kms": Object {
                            "prepareRequest": [MockFunction],
                            "request": [MockFunction],
                          },
                        },
                        "mercury": Object {
                          "connect": [MockFunction],
                          "listen": [MockFunction],
                          "listenToAndRun": [MockFunction],
                          "on": [MockFunction],
                          "once": [MockFunction],
                          "stopListening": [MockFunction],
                        },
                        "user": Object {
                          "activate": [MockFunction],
                          "register": [MockFunction],
                        },
                      },
                      "isAuthenticated": false,
                      "isAuthenticating": false,
                      "listenToAndRun": [MockFunction] {
                        "calls": Array [
                          Array [
                            [Circular],
                            "change:canAuthorize",
                            [Function],
                          ],
                          Array [
                            [Circular],
                            "change:isAuthenticating",
                            [Function],
                          ],
                          Array [
                            Object {
                              "getServiceUrl": [MockFunction],
                              "register": [MockFunction],
                              "remove": [MockFunction],
                              "services": Object {
                                "roomServiceUrl": "https://example.com/devices/services/room/1",
                              },
                              "url": "https://example.com/devices/1",
                            },
                            "change:registered",
                            [Function],
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                        ],
                      },
                      "on": [MockFunction],
                      "ready": false,
                      "request": [MockFunction],
                      "search": Object {
                        "people": [MockFunction],
                        "search": [MockFunction],
                      },
                      "support": Object {
                        "submitCallLogs": [MockFunction],
                      },
                      "util": Object {
                        "html": Object {
                          "escapeSync": [MockFunction],
                          "filterSync": [MockFunction],
                        },
                      },
                    },
                    "status": Immutable.Record {
                      "authenticated": false,
                      "authenticating": false,
                      "registered": false,
                      "registerError": false,
                      "registering": false,
                    },
                  },
                  "storeSparkInstance": [Function],
                  "updateSparkStatus": [Function],
                },
                "run": [Function],
                "shouldComponentUpdate": false,
              },
              "setWrappedInstance": [Function],
              "state": Object {},
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "subscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
              "version": 1,
            },
            "tag": 1,
            "type": [Function],
            "updateQueue": null,
          },
          "pendingProps": Object {
            "accessToken": "",
            "addError": [Function],
            "guestToken": "",
            "registerDevice": [Function],
            "sdkInstance": undefined,
            "spark": Immutable.Map {
              "error": null,
              "spark": Object {
                "authenticate": [MockFunction],
                "board": Object {
                  "decryptContents": [MockFunction],
                  "decryptSingleContent": [MockFunction],
                  "encryptContents": [MockFunction],
                  "encryptSingleContent": [MockFunction],
                  "persistence": Object {
                    "addContent": [MockFunction],
                    "addImage": [MockFunction],
                    "createChannel": [MockFunction],
                    "deleteAllContent": [MockFunction],
                    "deleteContent": [MockFunction],
                    "getAllContent": [MockFunction],
                    "getChannel": [MockFunction],
                    "getChannels": [MockFunction],
                    "ping": [MockFunction],
                    "register": [MockFunction],
                  },
                  "realtime": Object {
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "publish": [MockFunction],
                    "set": [MockFunction],
                  },
                },
                "client": Object {
                  "trackingIdBase": "testTrackingIdBase",
                },
                "config": Object {
                  "trackingIdPrefix": "testTrackingIdPrefix",
                },
                "credentials": Object {
                  "authorization": Object {},
                  "federation": true,
                },
                "feature": Object {
                  "getFeature": [MockFunction],
                },
                "flagging": Object {
                  "flag": [MockFunction],
                  "mapToActivities": [MockFunction],
                },
                "internal": Object {
                  "conversation": Object {
                    "assign": [MockFunction],
                    "download": [MockFunction],
                    "get": [MockFunction],
                    "unassign": [MockFunction],
                    "update": [MockFunction],
                  },
                  "device": Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "encryption": Object {
                    "decryptScr": [MockFunction],
                    "decryptText": [MockFunction],
                    "download": [MockFunction],
                    "encryptText": [MockFunction],
                    "getUnusedKey": [MockFunction],
                    "keystore": Object {
                      "clear": [MockFunction],
                    },
                    "kms": Object {
                      "prepareRequest": [MockFunction],
                      "request": [MockFunction],
                    },
                  },
                  "mercury": Object {
                    "connect": [MockFunction],
                    "listen": [MockFunction],
                    "listenToAndRun": [MockFunction],
                    "on": [MockFunction],
                    "once": [MockFunction],
                    "stopListening": [MockFunction],
                  },
                  "user": Object {
                    "activate": [MockFunction],
                    "register": [MockFunction],
                  },
                },
                "isAuthenticated": false,
                "isAuthenticating": false,
                "listenToAndRun": [MockFunction] {
                  "calls": Array [
                    Array [
                      [Circular],
                      "change:canAuthorize",
                      [Function],
                    ],
                    Array [
                      [Circular],
                      "change:isAuthenticating",
                      [Function],
                    ],
                    Array [
                      Object {
                        "getServiceUrl": [MockFunction],
                        "register": [MockFunction],
                        "remove": [MockFunction],
                        "services": Object {
                          "roomServiceUrl": "https://example.com/devices/services/room/1",
                        },
                        "url": "https://example.com/devices/1",
                      },
                      "change:registered",
                      [Function],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                },
                "on": [MockFunction],
                "ready": false,
                "request": [MockFunction],
                "search": Object {
                  "people": [MockFunction],
                  "search": [MockFunction],
                },
                "support": Object {
                  "submitCallLogs": [MockFunction],
                },
                "util": Object {
                  "html": Object {
                    "escapeSync": [MockFunction],
                    "filterSync": [MockFunction],
                  },
                },
              },
              "status": Immutable.Record {
                "authenticated": false,
                "authenticating": false,
                "registered": false,
                "registerError": false,
                "registering": false,
              },
            },
            "storeSparkInstance": [Function],
            "updateSparkStatus": [Function],
          },
          "ref": null,
          "return": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 5,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 5,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "addError": [MockFunction],
              "spark": Object {
                "authorization": "authorization",
                "internal": Object {
                  "conversation": "conversation",
                  "feature": "feature",
                  "flag": "flag",
                  "mercury": "mercury",
                  "presence": "presence",
                  "search": "search",
                  "team": "team",
                },
                "listenToAndRun": [MockFunction],
                "logger": "logger",
                "meetings": "meetings",
                "people": "people",
                "phone": "phone",
                "rooms": "rooms",
              },
              "storeSparkInstance": [MockFunction],
              "updateSparkStatus": [MockFunction],
            },
            "memoizedState": Object {},
            "mode": 0,
            "nextEffect": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 4,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 1,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": Object {
                "children": <Connect(SparkComponent)
                  addError={[MockFunction]}
                  spark={
                    Object {
                      "authorization": "authorization",
                      "internal": Object {
                        "conversation": "conversation",
                        "feature": "feature",
                        "flag": "flag",
                        "mercury": "mercury",
                        "presence": "presence",
                        "search": "search",
                        "team": "team",
                      },
                      "listenToAndRun": [MockFunction],
                      "logger": "logger",
                      "meetings": "meetings",
                      "people": "people",
                      "phone": "phone",
                      "rooms": "rooms",
                    }
                  }
                  storeSparkInstance={[MockFunction]}
                  updateSparkStatus={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <Connect(SparkComponent)
                  addError={[MockFunction]}
                  spark={
                    Object {
                      "authorization": "authorization",
                      "internal": Object {
                        "conversation": "conversation",
                        "feature": "feature",
                        "flag": "flag",
                        "mercury": "mercury",
                        "presence": "presence",
                        "search": "search",
                        "team": "team",
                      },
                      "listenToAndRun": [MockFunction],
                      "logger": "logger",
                      "meetings": "meetings",
                      "people": "people",
                      "phone": "phone",
                      "rooms": "rooms",
                    }
                  }
                  storeSparkInstance={[MockFunction]}
                  updateSparkStatus={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 2,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 2,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": [Circular],
                  "child": null,
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": null,
                  "expirationTime": 1073741823,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": Object {
                      "children": Array [],
                      "createNodeMock": [Function],
                      "tag": "CONTAINER",
                    },
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": Object {
                      "callback": null,
                      "expirationTime": 1073741823,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <Provider
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <Connect(SparkComponent)
                            addError={[MockFunction]}
                            spark={
                              Object {
                                "authorization": "authorization",
                                "internal": Object {
                                  "conversation": "conversation",
                                  "feature": "feature",
                                  "flag": "flag",
                                  "mercury": "mercury",
                                  "presence": "presence",
                                  "search": "search",
                                  "team": "team",
                                },
                                "listenToAndRun": [MockFunction],
                                "logger": "logger",
                                "meetings": "meetings",
                                "people": "people",
                                "phone": "phone",
                                "rooms": "rooms",
                              }
                            }
                            storeSparkInstance={[MockFunction]}
                            updateSparkStatus={[MockFunction]}
                          />
                        </Provider>,
                      },
                      "tag": 0,
                    },
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": Object {
                      "callback": null,
                      "expirationTime": 1073741823,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <Provider
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <Connect(SparkComponent)
                            addError={[MockFunction]}
                            spark={
                              Object {
                                "authorization": "authorization",
                                "internal": Object {
                                  "conversation": "conversation",
                                  "feature": "feature",
                                  "flag": "flag",
                                  "mercury": "mercury",
                                  "presence": "presence",
                                  "search": "search",
                                  "team": "team",
                                },
                                "listenToAndRun": [MockFunction],
                                "logger": "logger",
                                "meetings": "meetings",
                                "people": "people",
                                "phone": "phone",
                                "rooms": "rooms",
                              }
                            }
                            storeSparkInstance={[MockFunction]}
                            updateSparkStatus={[MockFunction]}
                          />
                        </Provider>,
                      },
                      "tag": 0,
                    },
                  },
                },
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <Provider
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  >
                    <Connect(SparkComponent)
                      addError={[MockFunction]}
                      spark={
                        Object {
                          "authorization": "authorization",
                          "internal": Object {
                            "conversation": "conversation",
                            "feature": "feature",
                            "flag": "flag",
                            "mercury": "mercury",
                            "presence": "presence",
                            "search": "search",
                            "team": "team",
                          },
                          "listenToAndRun": [MockFunction],
                          "logger": "logger",
                          "meetings": "meetings",
                          "people": "people",
                          "phone": "phone",
                          "rooms": "rooms",
                        }
                      }
                      storeSparkInstance={[MockFunction]}
                      updateSparkStatus={[MockFunction]}
                    />
                  </Provider>,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": Object {
                    "children": Array [],
                    "createNodeMock": [Function],
                    "tag": "CONTAINER",
                  },
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <Provider
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    >
                      <Connect(SparkComponent)
                        addError={[MockFunction]}
                        spark={
                          Object {
                            "authorization": "authorization",
                            "internal": Object {
                              "conversation": "conversation",
                              "feature": "feature",
                              "flag": "flag",
                              "mercury": "mercury",
                              "presence": "presence",
                              "search": "search",
                              "team": "team",
                            },
                            "listenToAndRun": [MockFunction],
                            "logger": "logger",
                            "meetings": "meetings",
                            "people": "people",
                            "phone": "phone",
                            "rooms": "rooms",
                          }
                        }
                        storeSparkInstance={[MockFunction]}
                        updateSparkStatus={[MockFunction]}
                      />
                    </Provider>,
                  },
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": null,
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": null,
                },
              },
              "sibling": null,
              "stateNode": Provider {
                "__reactInternalMemoizedMergedChildContext": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeSubscription": null,
                },
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "children": <Connect(SparkComponent)
                    addError={[MockFunction]}
                    spark={
                      Object {
                        "authorization": "authorization",
                        "internal": Object {
                          "conversation": "conversation",
                          "feature": "feature",
                          "flag": "flag",
                          "mercury": "mercury",
                          "presence": "presence",
                          "search": "search",
                          "team": "team",
                        },
                        "listenToAndRun": [MockFunction],
                        "logger": "logger",
                        "meetings": "meetings",
                        "people": "people",
                        "phone": "phone",
                        "rooms": "rooms",
                      }
                    }
                    storeSparkInstance={[MockFunction]}
                    updateSparkStatus={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "refs": Object {},
                "state": null,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "type": [Function],
              "updateQueue": null,
            },
            "pendingProps": Object {
              "addError": [MockFunction],
              "spark": Object {
                "authorization": "authorization",
                "internal": Object {
                  "conversation": "conversation",
                  "feature": "feature",
                  "flag": "flag",
                  "mercury": "mercury",
                  "presence": "presence",
                  "search": "search",
                  "team": "team",
                },
                "listenToAndRun": [MockFunction],
                "logger": "logger",
                "meetings": "meetings",
                "people": "people",
                "phone": "phone",
                "rooms": "rooms",
              },
              "storeSparkInstance": [MockFunction],
              "updateSparkStatus": [MockFunction],
            },
            "ref": null,
            "return": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 4,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 1,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": Object {
                "children": <Connect(SparkComponent)
                  addError={[MockFunction]}
                  spark={
                    Object {
                      "authorization": "authorization",
                      "internal": Object {
                        "conversation": "conversation",
                        "feature": "feature",
                        "flag": "flag",
                        "mercury": "mercury",
                        "presence": "presence",
                        "search": "search",
                        "team": "team",
                      },
                      "listenToAndRun": [MockFunction],
                      "logger": "logger",
                      "meetings": "meetings",
                      "people": "people",
                      "phone": "phone",
                      "rooms": "rooms",
                    }
                  }
                  storeSparkInstance={[MockFunction]}
                  updateSparkStatus={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <Connect(SparkComponent)
                  addError={[MockFunction]}
                  spark={
                    Object {
                      "authorization": "authorization",
                      "internal": Object {
                        "conversation": "conversation",
                        "feature": "feature",
                        "flag": "flag",
                        "mercury": "mercury",
                        "presence": "presence",
                        "search": "search",
                        "team": "team",
                      },
                      "listenToAndRun": [MockFunction],
                      "logger": "logger",
                      "meetings": "meetings",
                      "people": "people",
                      "phone": "phone",
                      "rooms": "rooms",
                    }
                  }
                  storeSparkInstance={[MockFunction]}
                  updateSparkStatus={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 2,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 2,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": [Circular],
                  "child": null,
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": null,
                  "expirationTime": 1073741823,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": Object {
                      "children": Array [],
                      "createNodeMock": [Function],
                      "tag": "CONTAINER",
                    },
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": Object {
                      "callback": null,
                      "expirationTime": 1073741823,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <Provider
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <Connect(SparkComponent)
                            addError={[MockFunction]}
                            spark={
                              Object {
                                "authorization": "authorization",
                                "internal": Object {
                                  "conversation": "conversation",
                                  "feature": "feature",
                                  "flag": "flag",
                                  "mercury": "mercury",
                                  "presence": "presence",
                                  "search": "search",
                                  "team": "team",
                                },
                                "listenToAndRun": [MockFunction],
                                "logger": "logger",
                                "meetings": "meetings",
                                "people": "people",
                                "phone": "phone",
                                "rooms": "rooms",
                              }
                            }
                            storeSparkInstance={[MockFunction]}
                            updateSparkStatus={[MockFunction]}
                          />
                        </Provider>,
                      },
                      "tag": 0,
                    },
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": Object {
                      "callback": null,
                      "expirationTime": 1073741823,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <Provider
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <Connect(SparkComponent)
                            addError={[MockFunction]}
                            spark={
                              Object {
                                "authorization": "authorization",
                                "internal": Object {
                                  "conversation": "conversation",
                                  "feature": "feature",
                                  "flag": "flag",
                                  "mercury": "mercury",
                                  "presence": "presence",
                                  "search": "search",
                                  "team": "team",
                                },
                                "listenToAndRun": [MockFunction],
                                "logger": "logger",
                                "meetings": "meetings",
                                "people": "people",
                                "phone": "phone",
                                "rooms": "rooms",
                              }
                            }
                            storeSparkInstance={[MockFunction]}
                            updateSparkStatus={[MockFunction]}
                          />
                        </Provider>,
                      },
                      "tag": 0,
                    },
                  },
                },
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <Provider
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  >
                    <Connect(SparkComponent)
                      addError={[MockFunction]}
                      spark={
                        Object {
                          "authorization": "authorization",
                          "internal": Object {
                            "conversation": "conversation",
                            "feature": "feature",
                            "flag": "flag",
                            "mercury": "mercury",
                            "presence": "presence",
                            "search": "search",
                            "team": "team",
                          },
                          "listenToAndRun": [MockFunction],
                          "logger": "logger",
                          "meetings": "meetings",
                          "people": "people",
                          "phone": "phone",
                          "rooms": "rooms",
                        }
                      }
                      storeSparkInstance={[MockFunction]}
                      updateSparkStatus={[MockFunction]}
                    />
                  </Provider>,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": Object {
                    "children": Array [],
                    "createNodeMock": [Function],
                    "tag": "CONTAINER",
                  },
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <Provider
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    >
                      <Connect(SparkComponent)
                        addError={[MockFunction]}
                        spark={
                          Object {
                            "authorization": "authorization",
                            "internal": Object {
                              "conversation": "conversation",
                              "feature": "feature",
                              "flag": "flag",
                              "mercury": "mercury",
                              "presence": "presence",
                              "search": "search",
                              "team": "team",
                            },
                            "listenToAndRun": [MockFunction],
                            "logger": "logger",
                            "meetings": "meetings",
                            "people": "people",
                            "phone": "phone",
                            "rooms": "rooms",
                          }
                        }
                        storeSparkInstance={[MockFunction]}
                        updateSparkStatus={[MockFunction]}
                      />
                    </Provider>,
                  },
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": null,
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": null,
                },
              },
              "sibling": null,
              "stateNode": Provider {
                "__reactInternalMemoizedMergedChildContext": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeSubscription": null,
                },
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "children": <Connect(SparkComponent)
                    addError={[MockFunction]}
                    spark={
                      Object {
                        "authorization": "authorization",
                        "internal": Object {
                          "conversation": "conversation",
                          "feature": "feature",
                          "flag": "flag",
                          "mercury": "mercury",
                          "presence": "presence",
                          "search": "search",
                          "team": "team",
                        },
                        "listenToAndRun": [MockFunction],
                        "logger": "logger",
                        "meetings": "meetings",
                        "people": "people",
                        "phone": "phone",
                        "rooms": "rooms",
                      }
                    }
                    storeSparkInstance={[MockFunction]}
                    updateSparkStatus={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "refs": Object {},
                "state": null,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "type": [Function],
              "updateQueue": null,
            },
            "sibling": null,
            "stateNode": Connect {
              "__reactInternalMemoizedMaskedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "__reactInternalMemoizedMergedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "unsubscribe": [Function],
                },
              },
              "__reactInternalMemoizedUnmaskedChildContext": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "notifyNestedSubs": [Function],
              "props": Object {
                "addError": [MockFunction],
                "spark": Object {
                  "authorization": "authorization",
                  "internal": Object {
                    "conversation": "conversation",
                    "feature": "feature",
                    "flag": "flag",
                    "mercury": "mercury",
                    "presence": "presence",
                    "search": "search",
                    "team": "team",
                  },
                  "listenToAndRun": [MockFunction],
                  "logger": "logger",
                  "meetings": "meetings",
                  "people": "people",
                  "phone": "phone",
                  "rooms": "rooms",
                },
                "storeSparkInstance": [MockFunction],
                "updateSparkStatus": [MockFunction],
              },
              "propsMode": false,
              "refs": Object {},
              "renderCount": 0,
              "selector": Object {
                "error": null,
                "props": Object {
                  "addError": [Function],
                  "registerDevice": [Function],
                  "spark": Immutable.Map {
                    "error": null,
                    "spark": Object {
                      "authenticate": [MockFunction],
                      "board": Object {
                        "decryptContents": [MockFunction],
                        "decryptSingleContent": [MockFunction],
                        "encryptContents": [MockFunction],
                        "encryptSingleContent": [MockFunction],
                        "persistence": Object {
                          "addContent": [MockFunction],
                          "addImage": [MockFunction],
                          "createChannel": [MockFunction],
                          "deleteAllContent": [MockFunction],
                          "deleteContent": [MockFunction],
                          "getAllContent": [MockFunction],
                          "getChannel": [MockFunction],
                          "getChannels": [MockFunction],
                          "ping": [MockFunction],
                          "register": [MockFunction],
                        },
                        "realtime": Object {
                          "on": [MockFunction],
                          "once": [MockFunction],
                          "publish": [MockFunction],
                          "set": [MockFunction],
                        },
                      },
                      "client": Object {
                        "trackingIdBase": "testTrackingIdBase",
                      },
                      "config": Object {
                        "trackingIdPrefix": "testTrackingIdPrefix",
                      },
                      "credentials": Object {
                        "authorization": Object {},
                        "federation": true,
                      },
                      "feature": Object {
                        "getFeature": [MockFunction],
                      },
                      "flagging": Object {
                        "flag": [MockFunction],
                        "mapToActivities": [MockFunction],
                      },
                      "internal": Object {
                        "conversation": Object {
                          "assign": [MockFunction],
                          "download": [MockFunction],
                          "get": [MockFunction],
                          "unassign": [MockFunction],
                          "update": [MockFunction],
                        },
                        "device": Object {
                          "getServiceUrl": [MockFunction],
                          "register": [MockFunction],
                          "remove": [MockFunction],
                          "services": Object {
                            "roomServiceUrl": "https://example.com/devices/services/room/1",
                          },
                          "url": "https://example.com/devices/1",
                        },
                        "encryption": Object {
                          "decryptScr": [MockFunction],
                          "decryptText": [MockFunction],
                          "download": [MockFunction],
                          "encryptText": [MockFunction],
                          "getUnusedKey": [MockFunction],
                          "keystore": Object {
                            "clear": [MockFunction],
                          },
                          "kms": Object {
                            "prepareRequest": [MockFunction],
                            "request": [MockFunction],
                          },
                        },
                        "mercury": Object {
                          "connect": [MockFunction],
                          "listen": [MockFunction],
                          "listenToAndRun": [MockFunction],
                          "on": [MockFunction],
                          "once": [MockFunction],
                          "stopListening": [MockFunction],
                        },
                        "user": Object {
                          "activate": [MockFunction],
                          "register": [MockFunction],
                        },
                      },
                      "isAuthenticated": false,
                      "isAuthenticating": false,
                      "listenToAndRun": [MockFunction] {
                        "calls": Array [
                          Array [
                            [Circular],
                            "change:canAuthorize",
                            [Function],
                          ],
                          Array [
                            [Circular],
                            "change:isAuthenticating",
                            [Function],
                          ],
                          Array [
                            Object {
                              "getServiceUrl": [MockFunction],
                              "register": [MockFunction],
                              "remove": [MockFunction],
                              "services": Object {
                                "roomServiceUrl": "https://example.com/devices/services/room/1",
                              },
                              "url": "https://example.com/devices/1",
                            },
                            "change:registered",
                            [Function],
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                          Object {
                            "isThrow": false,
                            "value": Promise {},
                          },
                        ],
                      },
                      "on": [MockFunction],
                      "ready": false,
                      "request": [MockFunction],
                      "search": Object {
                        "people": [MockFunction],
                        "search": [MockFunction],
                      },
                      "support": Object {
                        "submitCallLogs": [MockFunction],
                      },
                      "util": Object {
                        "html": Object {
                          "escapeSync": [MockFunction],
                          "filterSync": [MockFunction],
                        },
                      },
                    },
                    "status": Immutable.Record {
                      "authenticated": false,
                      "authenticating": false,
                      "registered": false,
                      "registerError": false,
                      "registering": false,
                    },
                  },
                  "storeSparkInstance": [Function],
                  "updateSparkStatus": [Function],
                },
                "run": [Function],
                "shouldComponentUpdate": false,
              },
              "setWrappedInstance": [Function],
              "state": Object {},
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "subscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
              "version": 1,
            },
            "tag": 1,
            "type": [Function],
            "updateQueue": null,
          },
          "sibling": null,
          "stateNode": [Circular],
          "tag": 1,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "props": Object {
          "accessToken": "",
          "addError": [Function],
          "guestToken": "",
          "registerDevice": [Function],
          "sdkInstance": undefined,
          "spark": Immutable.Map {
            "error": null,
            "spark": Object {
              "authenticate": [MockFunction],
              "board": Object {
                "decryptContents": [MockFunction],
                "decryptSingleContent": [MockFunction],
                "encryptContents": [MockFunction],
                "encryptSingleContent": [MockFunction],
                "persistence": Object {
                  "addContent": [MockFunction],
                  "addImage": [MockFunction],
                  "createChannel": [MockFunction],
                  "deleteAllContent": [MockFunction],
                  "deleteContent": [MockFunction],
                  "getAllContent": [MockFunction],
                  "getChannel": [MockFunction],
                  "getChannels": [MockFunction],
                  "ping": [MockFunction],
                  "register": [MockFunction],
                },
                "realtime": Object {
                  "on": [MockFunction],
                  "once": [MockFunction],
                  "publish": [MockFunction],
                  "set": [MockFunction],
                },
              },
              "client": Object {
                "trackingIdBase": "testTrackingIdBase",
              },
              "config": Object {
                "trackingIdPrefix": "testTrackingIdPrefix",
              },
              "credentials": Object {
                "authorization": Object {},
                "federation": true,
              },
              "feature": Object {
                "getFeature": [MockFunction],
              },
              "flagging": Object {
                "flag": [MockFunction],
                "mapToActivities": [MockFunction],
              },
              "internal": Object {
                "conversation": Object {
                  "assign": [MockFunction],
                  "download": [MockFunction],
                  "get": [MockFunction],
                  "unassign": [MockFunction],
                  "update": [MockFunction],
                },
                "device": Object {
                  "getServiceUrl": [MockFunction],
                  "register": [MockFunction],
                  "remove": [MockFunction],
                  "services": Object {
                    "roomServiceUrl": "https://example.com/devices/services/room/1",
                  },
                  "url": "https://example.com/devices/1",
                },
                "encryption": Object {
                  "decryptScr": [MockFunction],
                  "decryptText": [MockFunction],
                  "download": [MockFunction],
                  "encryptText": [MockFunction],
                  "getUnusedKey": [MockFunction],
                  "keystore": Object {
                    "clear": [MockFunction],
                  },
                  "kms": Object {
                    "prepareRequest": [MockFunction],
                    "request": [MockFunction],
                  },
                },
                "mercury": Object {
                  "connect": [MockFunction],
                  "listen": [MockFunction],
                  "listenToAndRun": [MockFunction],
                  "on": [MockFunction],
                  "once": [MockFunction],
                  "stopListening": [MockFunction],
                },
                "user": Object {
                  "activate": [MockFunction],
                  "register": [MockFunction],
                },
              },
              "isAuthenticated": false,
              "isAuthenticating": false,
              "listenToAndRun": [MockFunction] {
                "calls": Array [
                  Array [
                    [Circular],
                    "change:canAuthorize",
                    [Function],
                  ],
                  Array [
                    [Circular],
                    "change:isAuthenticating",
                    [Function],
                  ],
                  Array [
                    Object {
                      "getServiceUrl": [MockFunction],
                      "register": [MockFunction],
                      "remove": [MockFunction],
                      "services": Object {
                        "roomServiceUrl": "https://example.com/devices/services/room/1",
                      },
                      "url": "https://example.com/devices/1",
                    },
                    "change:registered",
                    [Function],
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                ],
              },
              "on": [MockFunction],
              "ready": false,
              "request": [MockFunction],
              "search": Object {
                "people": [MockFunction],
                "search": [MockFunction],
              },
              "support": Object {
                "submitCallLogs": [MockFunction],
              },
              "util": Object {
                "html": Object {
                  "escapeSync": [MockFunction],
                  "filterSync": [MockFunction],
                },
              },
            },
            "status": Immutable.Record {
              "authenticated": false,
              "authenticating": false,
              "registered": false,
              "registerError": false,
              "registering": false,
            },
          },
          "storeSparkInstance": [Function],
          "updateSparkStatus": [Function],
        },
        "refs": Object {},
        "state": null,
        "storeSDKInstance": [Function],
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "nodeType": "component",
      "props": Object {
        "accessToken": "",
        "addError": [Function],
        "guestToken": "",
        "registerDevice": [Function],
        "sdkInstance": undefined,
        "spark": Immutable.Map {
          "error": null,
          "spark": Object {
            "authenticate": [MockFunction],
            "board": Object {
              "decryptContents": [MockFunction],
              "decryptSingleContent": [MockFunction],
              "encryptContents": [MockFunction],
              "encryptSingleContent": [MockFunction],
              "persistence": Object {
                "addContent": [MockFunction],
                "addImage": [MockFunction],
                "createChannel": [MockFunction],
                "deleteAllContent": [MockFunction],
                "deleteContent": [MockFunction],
                "getAllContent": [MockFunction],
                "getChannel": [MockFunction],
                "getChannels": [MockFunction],
                "ping": [MockFunction],
                "register": [MockFunction],
              },
              "realtime": Object {
                "on": [MockFunction],
                "once": [MockFunction],
                "publish": [MockFunction],
                "set": [MockFunction],
              },
            },
            "client": Object {
              "trackingIdBase": "testTrackingIdBase",
            },
            "config": Object {
              "trackingIdPrefix": "testTrackingIdPrefix",
            },
            "credentials": Object {
              "authorization": Object {},
              "federation": true,
            },
            "feature": Object {
              "getFeature": [MockFunction],
            },
            "flagging": Object {
              "flag": [MockFunction],
              "mapToActivities": [MockFunction],
            },
            "internal": Object {
              "conversation": Object {
                "assign": [MockFunction],
                "download": [MockFunction],
                "get": [MockFunction],
                "unassign": [MockFunction],
                "update": [MockFunction],
              },
              "device": Object {
                "getServiceUrl": [MockFunction],
                "register": [MockFunction],
                "remove": [MockFunction],
                "services": Object {
                  "roomServiceUrl": "https://example.com/devices/services/room/1",
                },
                "url": "https://example.com/devices/1",
              },
              "encryption": Object {
                "decryptScr": [MockFunction],
                "decryptText": [MockFunction],
                "download": [MockFunction],
                "encryptText": [MockFunction],
                "getUnusedKey": [MockFunction],
                "keystore": Object {
                  "clear": [MockFunction],
                },
                "kms": Object {
                  "prepareRequest": [MockFunction],
                  "request": [MockFunction],
                },
              },
              "mercury": Object {
                "connect": [MockFunction],
                "listen": [MockFunction],
                "listenToAndRun": [MockFunction],
                "on": [MockFunction],
                "once": [MockFunction],
                "stopListening": [MockFunction],
              },
              "user": Object {
                "activate": [MockFunction],
                "register": [MockFunction],
              },
            },
            "isAuthenticated": false,
            "isAuthenticating": false,
            "listenToAndRun": [MockFunction] {
              "calls": Array [
                Array [
                  [Circular],
                  "change:canAuthorize",
                  [Function],
                ],
                Array [
                  [Circular],
                  "change:isAuthenticating",
                  [Function],
                ],
                Array [
                  Object {
                    "getServiceUrl": [MockFunction],
                    "register": [MockFunction],
                    "remove": [MockFunction],
                    "services": Object {
                      "roomServiceUrl": "https://example.com/devices/services/room/1",
                    },
                    "url": "https://example.com/devices/1",
                  },
                  "change:registered",
                  [Function],
                ],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": Promise {},
                },
                Object {
                  "isThrow": false,
                  "value": Promise {},
                },
                Object {
                  "isThrow": false,
                  "value": Promise {},
                },
              ],
            },
            "on": [MockFunction],
            "ready": false,
            "request": [MockFunction],
            "search": Object {
              "people": [MockFunction],
              "search": [MockFunction],
            },
            "support": Object {
              "submitCallLogs": [MockFunction],
            },
            "util": Object {
              "html": Object {
                "escapeSync": [MockFunction],
                "filterSync": [MockFunction],
              },
            },
          },
          "status": Immutable.Record {
            "authenticated": false,
            "authenticating": false,
            "registered": false,
            "registerError": false,
            "registering": false,
          },
        },
        "storeSparkInstance": [Function],
        "updateSparkStatus": [Function],
      },
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  "type": [Function],
}
`;
