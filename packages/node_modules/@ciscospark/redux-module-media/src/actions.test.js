import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';

import {initialState} from './reducer';
import * as actions from './actions';

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

let call, mockSpark, store;

describe('redux-module-media actions ', () => {
  beforeEach(() => {
    call = {
      hangup: jest.fn(() => Promise.resolve()),
      acknowledge: jest.fn(() => Promise.resolve()),
      reject: jest.fn(() => Promise.resolve()),
      answer: jest.fn(() => Promise.resolve()),
      once: jest.fn(),
      on: jest.fn((eventName, callback) => Promise.resolve({eventName, callback})),
      off: jest.fn(),
      locus: {
        url: 'https://locusUrl',
        fullState: {
          lastActive: 'Sun Feb 18 2018 18:21:05 GMT'
        }
      },
      direction: '',
      joined: '',
      joinedOnThisDevice: '',
      status: '',
      receivingAudio: '',
      sendingAudio: '',
      sendingVideo: '',
      remoteMediaStream: '',
      localMediaStream: '',
      remoteAudioMuted: '',
      remoteVideoMuted: '',
      remoteAudioStream: '',
      remoteVideoStream: ''
    };

    mockSpark = {
      phone: {
        createLocalMediaStream: jest.fn(() => Promise.resolve()),
        dial: jest.fn(() => call),
        listActiveCalls: jest.fn(() => Promise.resolve([call])),
        on: jest.fn((eventName, callback) => Promise.resolve({eventName, callback})),
        isCallingSupported: jest.fn(() => Promise.resolve(true)),
        register: jest.fn(() => Promise.resolve())
      }
    };

    store = mockStore(initialState);
  });

  it('has exported actions', () => {
    expect(actions).toMatchSnapshot();
  });

  describe('#acceptIncomingCall', () => {
    it('can successfully accept an incoming call', () =>
      store.dispatch(actions.acceptIncomingCall(call))
        .then(() => {
          expect(call.answer).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        }));
  });

  describe('#checkCurrentCalls', () => {
    it('should check existing locus and store calls found', () => {
      store.dispatch(actions.checkCurrentCalls(mockSpark))
        .then(() => {
          expect(mockSpark.phone.listActiveCalls).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        });
    });
  });

  describe('#checkWebRTCSupport', () => {
    it('can successfully check WebRTC support', () =>
      store.dispatch(actions.checkWebRTCSupport(mockSpark))
        .then(() => {
          expect(mockSpark.phone.isCallingSupported).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        }));
  });

  describe('#declineIncomingCall', () => {
    it('can successfully decline an incoming call', () => {
      store.dispatch(actions.declineIncomingCall(call));
      expect(call.reject).toHaveBeenCalled();
      expect(store.getActions()).toMatchSnapshot();
    });
  });

  describe('#dismissIncomingCall', () => {
    it('can successfully dismiss an incoming call', () => {
      store.dispatch(actions.dismissIncomingCall('abc-123'));
      expect(store.getActions()).toMatchSnapshot();
    });
  });

  describe('#hangupCall', () => {
    it('can successfully hangup active call', () =>
      store.dispatch(actions.hangupCall(call))
        .then(() => {
          expect(call.off).toHaveBeenCalled();
          expect(call.hangup).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        }));
  });

  describe('#listenForCalls', () => {
    it('can successfully attach call:incoming listener', () =>
      store.dispatch(actions.listenForCalls(mockSpark))
        .then(() => {
          expect(mockSpark.phone.on).toHaveBeenCalled();
          expect(mockSpark.phone.on.mock.calls[0][0]).toBe('call:incoming');
          expect(mockSpark.phone.on.mock.calls[1][0]).toBe('call:created');
          expect(store.getActions()).toMatchSnapshot();
        }));

    it('can successfully receive incoming call', () =>
      store.dispatch(actions.listenForCalls(mockSpark))
        .then(([{eventName, callback}]) => {
          expect(mockSpark.phone.on).toHaveBeenCalled();
          expect(eventName).toBe('call:incoming');
          return callback(call)
            .then(() => {
              expect(call.acknowledge).toHaveBeenCalled();
              expect(call.once.mock.calls[0][0]).toBe('inactive');
              expect(call.on.mock.calls[0][0]).toBe('membership:declined');
              expect(call.on.mock.calls[1][0]).toBe('membership:change');
              expect(store.getActions()).toMatchSnapshot();
            });
        }));

    it('can successfully handle created call', () =>
      store.dispatch(actions.listenForCalls(mockSpark))
        .then(([, {eventName, callback}]) => {
          expect(mockSpark.phone.on).toHaveBeenCalled();
          expect(eventName).toBe('call:created');
          return callback(call)
            .then(() => {
              expect(call.once.mock.calls[0][0]).toBe('inactive');
              expect(store.getActions()).toMatchSnapshot();
            });
        }));
  });

  describe('#placeCall', () => {
    it('can successfully call a user with email', () => {
      const options = {
        destination: 'test@ciscospark.com',
        locusUrl: 'https://locusUrl'
      };
      store.dispatch(actions.placeCall(options, mockSpark))
        .then(() => {
          expect(mockSpark.phone.dial).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        });
    });
  });

  describe('#registerClient', () => {
    it('can register a client with phone plugin', () => {
      store.dispatch(actions.registerClient(mockSpark))
        .then(() => {
          expect(mockSpark.phone.register).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        });
    });
  });

  describe('#connectCall', () => {
    it('connects a call', () => {
      store.dispatch(actions.connectCall(call));
      expect(store.getActions()).toMatchSnapshot();
    });
  });

  describe('#storeCall', () => {
    it('stores a call', () => {
      store.dispatch(actions.storeCall(call));
      expect(store.getActions()).toMatchSnapshot();
    });
  });
});
