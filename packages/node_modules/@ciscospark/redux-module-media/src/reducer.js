import {
  Record,
  Map,
  List
} from 'immutable';

import {
  ANSWERED_INCOMING_CALL,
  DISMISS_INCOMING_CALL,
  UPDATE_STATUS,
  UPDATE_CALL_STATUS,
  UPDATE_CALL_ERROR,
  CONNECT_CALL,
  REMOVE_CALL,
  STORE_CALL,
  CHECKING_WEB_RTC_SUPPORT,
  UPDATE_WEBRTC_SUPPORT
} from './actions';

const ErrorObject = Record({
  name: '',
  message: ''
});

export const CallRecord = Record({
  instance: null,
  activeParticipantsCount: 0,
  direction: '',
  startTime: null,
  remoteAudioStream: null,
  remoteVideoStream: null,
  remoteMediaStream: null,
  localMediaStream: null,
  error: null,
  memberships: new List(),
  locusUrl: '',
  id: '',
  isCall: false,
  isActive: false,
  isIncoming: false,
  isInitiated: false,
  isConnected: false,
  isAnswered: false,
  isDismissed: false,
  isRinging: false,
  isReceivingAudio: false,
  isReceivingVideo: false,
  isSendingAudio: false,
  isSendingVideo: false,
  remoteAudioMuted: false,
  remoteVideoMuted: false,
  hasJoinedOnThisDevice: false,
  hasError: false
});

const WebRTCStatus = Record({
  hasCheckedSupport: false,
  isSupported: null
});


const MediaStatus = Record({
  isListening: false,
  isListeningToIncoming: false,
  isRegistered: false
});

const InitialState = Record({
  byId: Map(),
  webRTC: WebRTCStatus(),
  status: MediaStatus()
});

export const initialState = new InitialState();

export default function reducer(state = initialState, action) {
  switch (action.type) {
    case UPDATE_STATUS:
      return state.mergeIn(['status'], action.payload.status);

    case STORE_CALL: {
      const {
        call,
        id
      } = action.payload;

      if (id) {
        return state.setIn(['byId', id], CallRecord(call));
      }
      return state;
    }

    case UPDATE_CALL_STATUS: {
      const {
        call,
        id
      } = action.payload;

      if (id) {
        return state.mergeIn(['byId', id], call);
      }
      return state;
    }

    case UPDATE_CALL_ERROR: {
      const {
        call,
        id,
        error
      } = action.payload;

      if (id) {
        return state.mergeIn(['byId', id], call)
          .setIn(['byId', id, 'error'], new ErrorObject(error));
      }
      return state;
    }

    case CONNECT_CALL: {
      const {
        call,
        id
      } = action.payload;
      if (id) {
        return state.mergeIn(['byId', id], call);
      }
      return state;
    }

    case DISMISS_INCOMING_CALL:
      return state.setIn(['byId', action.payload.callId, 'isDismissed'], true);

    case REMOVE_CALL:
      return state.deleteIn(['byId', action.payload.id]);

    case ANSWERED_INCOMING_CALL:
      return state.setIn(['byId', action.payload.callId, 'isAnswered'], true);

    case CHECKING_WEB_RTC_SUPPORT:
      return state.setIn(['webRTC', 'hasCheckedSupport'], true);

    case UPDATE_WEBRTC_SUPPORT:
      return state.setIn(['webRTC', 'isSupported'], action.payload.supported);

    default:
      return state;
  }
}
