import {fromJS} from 'immutable';

import {
  UPDATE_STATUS,
  UPDATE_CALL_STATE,
  CONNECT_CALL,
  REMOVE_CALL,
  STORE_CALL,
  CHECKING_WEB_RTC_SUPPORT,
  UPDATE_WEBRTC_SUPPORT
} from './actions';

const initialCallObject = fromJS({
  instance: null,
  spaceId: null,
  callState: {},
  startTime: null
});

export const initialState = fromJS({
  calls: {},
  webRTC: {
    hasCheckedSupport: false,
    isSupported: null
  },
  status: {
    isListening: false
  }
});


// eslint-disable-next-line complexity
export default function reducer(state = initialState, action) {
  switch (action.type) {

  case UPDATE_STATUS:
    return state.mergeIn([`status`], action.payload.status);

  case STORE_CALL: {
    const {call, callState, locusUrl} = action.payload;
    const id = locusUrl || call.locus && call.locus.url;
    if (id) {
      const callObject = initialCallObject
        .set(`instance`, call)
        .mergeIn([`callState`], callState);
      return state.setIn([`calls`, id], callObject);
    }
    return state;
  }

  case UPDATE_CALL_STATE: {
    const {call, callState, locusUrl} = action.payload;
    const id = locusUrl || call.locus && call.locus.url;
    if (id) {
      return state.mergeIn([`calls`, id, `callState`], callState);
    }
    return state;
  }

  case CONNECT_CALL: {
    const {call, callState} = action.payload;
    const locus = call.locus;
    if (locus && locus.url) {
      return state
        .set(`instance`, call)
        .mergeIn([`calls`, call.locus.url, `callState`], callState)
        .setIn([`calls`, call.locus.url, `callStartTime`], Date.parse(call.locus.fullState.lastActive));
    }
    return state;
  }

  case REMOVE_CALL: {
    const locus = action.payload.call.locus;
    if (locus && locus.url) {
      return state.deleteIn([`calls`, locus.url]);
    }
    return state;
  }

  case CHECKING_WEB_RTC_SUPPORT:
    return state.setIn([`webRTC`, `hasCheckedSupport`], true);

  case UPDATE_WEBRTC_SUPPORT:
    return state.setIn([`webRTC`, `isSupported`], action.payload.supported);

  default:
    return state;
  }
}
