import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import {compose, lifecycle} from 'recompose';

import {setWrappedDisplayName} from '@ciscospark/react-component-utils';

import {
  listenForIncomingCalls,
  checkWebRTCSupport
} from './actions';

function setupIncomingCallListener(props) {
  const {
    media,
    sparkInstance
  } = props;
  if (media.getIn(['webRTC', 'isSupported']) &&
    !media.getIn(['status', 'isListeningToIncoming'])) {
    props.listenForIncomingCalls(sparkInstance);
  }
}


export default compose(
  setWrappedDisplayName('WithMedia'),
  connect(
    (state) => ({
      sparkInstance: state.spark.get('spark'),
      media: state.media
    }),
    (dispatch) => bindActionCreators({
      listenForIncomingCalls,
      checkWebRTCSupport
    }, dispatch)
  ),
  lifecycle({
    componentWillReceiveProps(nextProps) {
      const {
        media,
        sparkInstance
      } = nextProps;

      if (sparkInstance && !media.getIn(['webRTC', 'hasCheckedSupport'])) {
        nextProps.checkWebRTCSupport(sparkInstance);
      }
      setupIncomingCallListener(nextProps);
    }
  })
);
