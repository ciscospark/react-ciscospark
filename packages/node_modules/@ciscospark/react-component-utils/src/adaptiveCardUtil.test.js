import {hasAdaptiveCard, getCardConfig, getAdaptiveCard} from './adaptiveCardUtil';

describe('Adaptive Card Util functions', () => {
  const activityWithCard = {
    object: {
      displayName: 'Hello World!',
      displayNameHTML: {
        __html: 'Hello World!'
      },
      cards: [
        '{"type":"AdaptiveCard","version":"1.0","body":[{"type":"TextBlock","text":"**Adaptive Cards**","separation":"none"}]}'
      ],
      objectType: 'comment'
    },
    verb: 'post'
  };
  const activityWithoutCard = {
    object: {
      displayName: 'Hello World!',
      displayNameHTML: {
        __html: 'Hello World!'
      },
      cards: [
      ],
      objectType: 'comment'
    },
    verb: 'post'
  };
  const sparkInstance = {};

  describe('#isAdaptiveCard', () => {
    it('should return true when message contains adaptive card', () => {
      expect(hasAdaptiveCard(activityWithCard.object.cards, sparkInstance)).toEqual(true);
    });

    it('should return false when message does not contains adaptive card', () => {
      expect(hasAdaptiveCard(activityWithoutCard.object.cards, sparkInstance)).toEqual(false);
    });
  });

  describe('#getAdaptiveCard', () => {
    it('returns a new adaptive card instance when the card config is received', () => {
      expect(getAdaptiveCard(activityWithCard.object.cards, sparkInstance)).not.toBe('Hello World!');
    });
  });

  describe('#getCardConfig', () => {
    it('returns the parsed card config when a strigified JSON is received', () => {
      expect(getCardConfig(activityWithCard.object.cards[0])).not.toBe(null);
    });
  });

  it('returns a proccesed adaptive card when the card json has markdown', () => {
    expect(getAdaptiveCard(activityWithCard.object.cards, sparkInstance)).toMatchSnapshot();
  });
});
