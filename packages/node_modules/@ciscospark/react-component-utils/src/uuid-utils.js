/**
 * Tests if a string is a UUID
 * @param {String} string
 * @returns {Boolean}
 */
export function isUuid(string) {
  const uuidRegExp = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;

  return uuidRegExp.test(string);
}

/**
 * Validates a string as a UUID or a hydra encoded UUID
 * @param {String} string
 * @returns {Boolean|String}
 */
export function validateAndDecodeId(string) {
  let resultId = false;
  if (isUuid(string)) {
    resultId = string;
  }
  else {
    let isEncodedUUID = false;
    let base64uuid;
    // Check for base 64 encoding
    try {
      base64uuid = atob(string).split(`/`).pop();
      isEncodedUUID = isUuid(base64uuid);
    }
    catch (e) {
      if (e.name !== `InvalidCharacterError`) {
        throw e;
      }
    }
    if (isEncodedUUID) {
      resultId = base64uuid;
    }
  }
  return resultId;
}
