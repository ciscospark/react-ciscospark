import {base64} from '@ciscospark/common';

/**
 * Tests if a string is a UUID
 * @param {String} string
 * @returns {Boolean}
 */
export function isUuid(string) {
  const uuidRegExp = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;

  return uuidRegExp.test(string);
}


/**
 * Takes a Conversation URL and returns the Uuid
 * @param {String} convoUrl
 * @returns {String|Boolean}
 */
export function getConvoIdFromUrl(convoUrl) {
  const id = convoUrl.split('/').pop();
  if (isUuid(id)) {
    return id;
  }
  return false;
}

/**
 * Validates a string as a UUID or a hydra encoded UUID
 * @param {String} string
 * @returns {Boolean|String}
 */
export function validateAndDecodeId(string) {
  let resultId = false;
  if (isUuid(string)) {
    resultId = string;
  }
  else {
    let isEncodedUUID = false;
    let base64uuid;
    // Check for base 64 encoding
    try {
      base64uuid = atob(string).split('/').pop();
      isEncodedUUID = isUuid(base64uuid);
    }
    catch (e) {
      if (e.name !== 'InvalidCharacterError') {
        throw e;
      }
    }
    if (isEncodedUUID) {
      resultId = base64uuid;
    }
  }
  return resultId;
}

/**
 * Constructs a hydra id for a given uuid and type
 *
 * @export
 * @param {string} type one of PEOPLE, TEAM, ROOM
 * @param {any} id
 * @returns {string}
 */
export function constructHydraId(type, id) {
  return base64.encode(`ciscospark://us/${type.toUpperCase()}/${id}`);
}

/**
 * Deconstructs a hydra id and provides the uuid
 *
 * @export
 * @param {String} id
 * @returns {String}
 */
export function deconstructHydraId(id) {
  const payload = base64.decode(id).split('/');
  return {
    id: payload.pop(),
    type: payload.pop()
  };
}

export const hydraTypes = {
  MESSAGE: 'MESSAGE',
  PEOPLE: 'PEOPLE',
  ROOM: 'ROOM',
  TEAM: 'TEAM'
};
