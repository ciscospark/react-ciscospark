import React, {Component, PropTypes} from 'react';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import {intlShape, injectIntl} from 'react-intl';
import classNames from 'classnames';
import autobind from 'autobind-decorator';

import {fetchCurrentUser, fetchToUser} from '@ciscospark/redux-module-user';
import {
  hangupCall,
  listenForIncomingCalls
} from '@ciscospark/redux-module-media';
import {injectSpark} from '@ciscospark/react-redux-spark';
import TitleBar from '@ciscospark/react-component-title-bar';
import Notifications from '@ciscospark/react-container-notifications';
import ActivityMenu from './components/activity-menu';
import LoadingScreen from '@ciscospark/react-component-loading-screen';
import {ConnectedMessageComponent} from '@ciscospark/widget-message';
import {ConnectedMeetComponent} from '@ciscospark/widget-meet';
import Button from '@ciscospark/react-component-button';
import Timer from '@ciscospark/react-component-timer';
import {ICON_TYPE_WAFFLE} from '@ciscospark/react-component-icon';
import {metrics} from '@ciscospark/react-component-utils';

import {
  removeWidget,
  setActivityMenuVisible,
  toggleActivityMenu,
  setActivityMeet,
  setActivityMessage,
  ACTIVITY_TYPE_MEET,
  ACTIVITY_TYPE_MESSAGE
} from './actions';
import styles from './styles.css';
import messages from './messages';

export const INITIAL_ACTIVITY_TYPE_MEET = `meet`;
export const INITIAL_ACTIVITY_TYPE_MESSAGE = `message`;
export const INITIAL_ACTIVITY_TYPE_MENU = `activity-menu`;

/**
 * MessageMeetWidget Component
 */
export class MessageMeetWidget extends Component {

  componentWillMount() {
    metrics.saveElapsedTimeToQueue(`widgetMessageMeet:mount`);
    if (this.props.initialActivity === INITIAL_ACTIVITY_TYPE_MEET || this.props.startCall) {
      this.props.setActivityMeet();
    }
    if (this.props.initialActivity === INITIAL_ACTIVITY_TYPE_MENU) {
      this.props.setActivityMenuVisible(true);
    }
  }

  componentWillReceiveProps(nextProps) { // eslint-disable-line complexity
    const {
      conversation,
      media,
      onEvent,
      user,
      spark,
      sparkState,
      mercury,
      toPersonEmail,
      toPersonId,
      widgetMessageMeet
    } = nextProps;

    const {
      authenticated,
      registered
    } = sparkState;

    const connected = mercury.getIn([`status`, `connected`]);

    if (spark && authenticated) {
      if (!user.get(`currentUser`) && !user.getIn([`status`, `isFetchingCurrentUser`])) {
        nextProps.fetchCurrentUser(spark);
      }
      if (!user.get(`toUser`) && !user.getIn([`status`, `isFetchingToUser`])) {
        nextProps.fetchToUser({toPersonEmail, toPersonId}, spark);
      }

      if (registered && connected) {
        if (!media.getIn([`status`, `isListening`]) && conversation.locusUrl) {
          nextProps.listenForIncomingCalls(spark, conversation.locusUrl, onEvent);
        }

        // When receivng an incoming call, switch to meet
        if (media.getIn([`status`, `isRinging`]) && widgetMessageMeet.get(`activityType`) !== ACTIVITY_TYPE_MEET) {
          nextProps.setActivityMeet();
        }
      }
    }

    // Reset back to message view after call ends
    if (!media.getIn([`status`, `isConnected`]) && this.props.media.getIn([`status`, `isConnected`])) {
      this.handleActivityMessage();
    }
  }

  shouldComponentUpdate(nextProps) {
    const props = this.props;

    return nextProps.mercury.getIn([`status`, `connected`]) !== props.mercury.getIn([`status`, `connected`])
      || nextProps.media.get(`callStartTime`) !== props.media.get(`callStartTime`)
      || nextProps.user !== props.user
      || nextProps.conversation !== props.conversation
      || nextProps.avatar !== props.avatar
      || nextProps.indicators !== props.indicators
      || nextProps.widgetMessageMeet !== props.widgetMessageMeet;
  }

  componentWillUnmount() {
    // Hang up active call (if there is one)
    const isConnected = this.props.media.getIn([`status`, `isConnected`]);
    const isDialing = this.props.media.getIn([`status`, `isDialing`]);
    if (isDialing || isConnected) {
      this.props.hangupCall(this.props.media.get(`call`));
    }

    metrics.sendElapsedTimeMetric(`widgetMessageMeet:unmount`, this.props.spark);

    this.props.spark.mercury.disconnect().then(() => this.props.removeWidget());
  }

  @autobind
  handleActivityMeet() {
    const props = this.props;
    props.setActivityMeet();
    props.setActivityMenuVisible(false);
  }

  @autobind
  handleActivityMessage() {
    const props = this.props;
    props.setActivityMessage();
    props.setActivityMenuVisible(false);
  }

  @autobind
  handleMenuClick() {
    const props = this.props;
    props.toggleActivityMenu();
  }

  @autobind
  handleEvent(name, data) {
    const {onEvent} = this.props;
    if (typeof onEvent === `function`) {
      this.props.onEvent(name, data);
    }
  }

  /**
   * Render
   *
   * @returns {Object}
   */
  render() {
    const props = this.props;
    const {
      avatar,
      conversation,
      media,
      spark,
      toPersonEmail,
      toPersonId,
      user,
      widgetMessageMeet
    } = props;
    const {formatMessage} = this.props.intl;

    const toUser = user.get(`toUser`);
    const activityMenuVisible = widgetMessageMeet.get(`activityMenuVisible`);
    const showMessage = widgetMessageMeet.get(`activityType`) === ACTIVITY_TYPE_MESSAGE;
    const showMeet = widgetMessageMeet.get(`activityType`) === ACTIVITY_TYPE_MEET;
    // Don't remove message component from DOM, just hide its display
    const messageComponentClassNames = showMessage ? `` : styles.hiddenComponent;

    const callStartTime = media.get(`callStartTime`);
    // Don't load widgets until we have spark loaded and info on the toUser
    if (spark && conversation) {
      const toUserAvatarUrl = toUser && toUser.id && avatar.getIn([`items`, toUser.id]);
      const toPersonName = toUser && toUser.displayName || toPersonEmail;
      return (
        <div className={classNames(`ciscospark-widget-message-meet`, styles.widgetMessageMeet)}>
          <div className={classNames(`ciscospark-banner`, styles.banner)} />
          <div className={classNames(`ciscospark-widget-message-meet-inner`, styles.widgetMessageMeetInner)}>
            {
              activityMenuVisible &&
              <div className={classNames(`ciscospark-activity-menu-wrapper`, styles.activityMenuWrapper)}>
                <ActivityMenu
                  onExit={this.handleMenuClick}
                  onMeet={this.handleActivityMeet}
                  onMessage={this.handleActivityMessage}
                />
              </div>
            }
            <div className={classNames(`ciscospark-activity-menu-button-wrapper`, styles.activityMenuButtonWrapper)}>
              <div className={classNames(`ciscospark-activity-menu-button`, styles.activityMenuButton)}>
                <Button iconType={ICON_TYPE_WAFFLE} onClick={this.handleMenuClick} />
              </div>
            </div>
            <div className={classNames(`ciscospark-title-bar-wrapper`, styles.titleBarWrapper)}>
              <TitleBar
                hasMenu
                image={toUserAvatarUrl}
                name={toPersonName}
                onMenuClick={this.handleMenuClick}
              >
                {
                  callStartTime &&
                  <div className={classNames(`ciscospark-title-bar-call-timer`, styles.callTimer)}>
                    <Timer startTime={callStartTime} />
                  </div>
                }
              </TitleBar>
            </div>
            {
              showMeet &&
              <div className={styles.activityComponentWrapper}>
                <ConnectedMeetComponent
                  onEvent={this.handleEvent}
                  shouldStartMeeting={props.startCall}
                  spark={spark}
                  toPersonAvatar={toUserAvatarUrl}
                  toPersonEmail={toPersonEmail}
                  toPersonId={toPersonId}
                  toPersonName={toPersonName}
                  user={user}
                />
              </div>
            }
            <div className={classNames(`ciscospark-message-component-wrapper`, styles.activityComponentWrapper, messageComponentClassNames)}>
              <ConnectedMessageComponent
                onEvent={this.handleEvent}
                spark={spark}
                toPersonEmail={toPersonEmail}
                toPersonId={toPersonId}
                user={user}
              />
            </div>
            <Notifications />
          </div>
        </div>
      );
    }
    // Show loading screen until spark is ready
    return <LoadingScreen loadingMessage={formatMessage(messages.loadingMessage)} />;
  }
}

const injectedPropTypes = {
  conversation: PropTypes.object.isRequired,
  fetchCurrentUser: PropTypes.func.isRequired,
  fetchToUser: PropTypes.func.isRequired,
  hangupCall: PropTypes.func.isRequired,
  listenForIncomingCalls: PropTypes.func.isRequired,
  media: PropTypes.object.isRequired,
  setActivityMenuVisible: PropTypes.func.isRequired,
  spark: PropTypes.object,
  sparkState: PropTypes.object.isRequired,
  toggleActivityMenu: PropTypes.func.isRequired,
  user: PropTypes.object.isRequired
};

MessageMeetWidget.propTypes = {
  initialActivity: PropTypes.string,
  intl: intlShape.isRequired,
  onEvent: PropTypes.func,
  startCall: PropTypes.bool,
  toPersonEmail: PropTypes.string,
  toPersonId: PropTypes.string,
  ...injectedPropTypes
};

function mapStateToProps(state) {
  return {
    avatar: state.avatar,
    conversation: state.conversation,
    media: state.media,
    mercury: state.mercury,
    spark: state.spark.get(`spark`),
    sparkState: state.spark.get(`status`).toJS(),
    user: state.user,
    indicators: state.indicators,
    widgetMessageMeet: state.widgetMessageMeet
  };
}

export default connect(
  mapStateToProps,
  (dispatch) => bindActionCreators({
    fetchCurrentUser,
    fetchToUser,
    hangupCall,
    listenForIncomingCalls,
    removeWidget,
    setActivityMeet,
    setActivityMessage,
    setActivityMenuVisible,
    toggleActivityMenu
  }, dispatch)
)(injectIntl(injectSpark(MessageMeetWidget)));
