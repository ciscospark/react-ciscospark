import React from 'react';
import ReactDOM from 'react-dom';

import Root from './root';
import {initStore} from './store';

import '@ciscospark/react-component-spark-fonts';
import {attachWidgetInit} from '@ciscospark/widget-base';

import './styles/main.css';

attachWidgetInit(`messageMeetWidget`, initMessageMeetWidget, removeMessageMeetWidget);

export function initMessageMeetWidget(element, {accessToken, onEvent, initialActivity, startCall, toPersonEmail, toPersonId}) {
  const store = initStore();
  ReactDOM.render(
    <Root
      accessToken={accessToken}
      initialActivity={initialActivity}
      onEvent={onEvent}
      startCall={startCall}
      store={store}
      toPersonEmail={toPersonEmail}
      toPersonId={toPersonId}
    />,
    element
  );
  return element;
}

export function removeMessageMeetWidget(el) {
  return ReactDOM.unmountComponentAtNode(el);
}

export default function loadAllWidgets() {
  // eslint-disable-line - TODO: Need to deprecate spark namespace and only use ciscospark
  const widgets = document.querySelectorAll(`[data-toggle="spark-message-meet"], [data-toggle="ciscospark-message-meet"]`);
  for (const widget of widgets) {
    window.ciscospark.widget(widget).messageMeetWidget({
      accessToken: widget.getAttribute(`data-access-token`) || undefined,
      initialActivity: widget.getAttribute(`data-initial-activity`) || undefined,
      startCall: widget.getAttribute(`data-start-call`) || undefined,
      toPersonEmail: widget.getAttribute(`data-to-person-email`) || undefined,
      toPersonId: widget.getAttribute(`data-to-person-id`) || undefined
    });
  }
}

if (module.hot) {
  module.hot.accept();
}

document.addEventListener(`DOMContentLoaded`, loadAllWidgets, false);
