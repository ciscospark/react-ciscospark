import React, {PropTypes} from 'react';
import classNames from 'classnames';

import Avatar from '@ciscospark/react-component-avatar';
import ActivityPostAction from '@ciscospark/react-component-activity-post-action';
import styles from './styles.css';

import {ICON_TYPE_DELETE, ICON_TYPE_FLAGGED_OUTLINE} from '@ciscospark/react-component-icon';


export default function ActivityItemBase(props) {

  const {
    avatarUrl,
    children,
    id,
    isAdditional,
    hasError,
    isFlagged,
    isPending,
    isSelf,
    name,
    onActivityDelete,
    onActivityFlag,
    onActivityRetry,
    timestamp
  } = props;

  let deleteAction;
  let flagAction;

  function handleOnDelete() {
    onActivityDelete(id);
  }

  function handleOnFlag() {
    onActivityFlag(id);
  }

  function handleOnRetry() {
    onActivityRetry(id);
  }

  function getActionClassNames(highlight) {
    const actionClassNames = [`activity-post-action`, styles.activityPostAction];
    if (highlight) {
      actionClassNames.push(`isHighlighted`, styles.isHighlighted);
    }
    return actionClassNames;
  }

  if (!isPending) {
    flagAction = ( // eslint-disable-line no-extra-parens
      <div className={classNames(getActionClassNames(isFlagged))}>
        <ActivityPostAction
          iconType={ICON_TYPE_FLAGGED_OUTLINE}
          onClick={handleOnFlag}
          title="Flag this message"
        />
      </div>
    );
    if (isSelf) {
      deleteAction = ( // eslint-disable-line no-extra-parens
        <div className={classNames(getActionClassNames())}>
          <ActivityPostAction
            iconType={ICON_TYPE_DELETE}
            onClick={handleOnDelete}
            title="Delete this message"
          />
        </div>
      );
    }
    else {
      deleteAction = ( // eslint-disable-line no-extra-parens
        <div className={classNames(getActionClassNames())}>
          <div className={classNames(`ciscospark-action-spacer`, styles.actionSpacer)} />
        </div>
      );
    }
  }

  const activityItemClasses = [
    `activity-item`,
    styles.activityItem,
    isAdditional ? styles.additional : ``,
    isPending ? styles.pending : ``
  ];

  return (
    <div className={classNames(activityItemClasses)}>
      <div className={classNames(`ciscospark-avatar-wrapper`, styles.avatarWrapper)}>
        <Avatar
          image={avatarUrl}
          isSelfAvatar={isSelf}
          name={name}
          size={`medium`}
        />
      </div>
      <div className={classNames(`ciscospark-content-container`, styles.contentContainer)}>
        <div className={classNames(`ciscospark-meta`, styles.meta)}>
          <div className={classNames(`ciscospark-display-name`, styles.displayName)} title="{name}">{name}</div>
          <div className={classNames(`ciscospark-published`, styles.published)}>{timestamp}</div>
        </div>
        <div className={classNames(`ciscospark-activity-content`, styles.content)}>
          {children}
        </div>
        {hasError &&
          <div
            className={classNames(`ciscospark-activity-error`, styles.error)}
            role="presentation"
          >
            <button onClick={handleOnRetry}>{`Unable to post. Click to retry`}</button>
          </div>
        }
      </div>
      <div className={classNames(`ciscospark-activity-post-actions`, styles.activityPostActions)} >
        {flagAction}
        {deleteAction}
      </div>
    </div>
  );
}

ActivityItemBase.propTypes = {
  avatarUrl: PropTypes.string,
  children: PropTypes.element.isRequired,
  hasError: PropTypes.bool,
  id: PropTypes.string.isRequired,
  isAdditional: PropTypes.bool,
  isFlagged: PropTypes.bool,
  isPending: PropTypes.bool,
  isSelf: PropTypes.bool,
  name: PropTypes.string.isRequired,
  onActivityDelete: PropTypes.func,
  onActivityFlag: PropTypes.func,
  onActivityRetry: PropTypes.func,
  timestamp: PropTypes.string
};
