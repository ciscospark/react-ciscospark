import {compose, lifecycle} from 'recompose';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import {fetchSpace} from '@ciscospark/redux-module-spaces';
import {getUser} from '@ciscospark/redux-module-users';
import {fetchAvatar} from '@ciscospark/redux-module-avatar';

import {storeMeetDetails} from '../actions';

import {destinationTypes} from './withDestinationType';

function getCallDetails(props) {
  const {
    widgetMeet,
    sparkInstance,
    avatar,
    spaces,
    users,
    currentUser
  } = props;

  const {
    spaceId,
    userId,
    toType,
    toValue
  } = widgetMeet;

  switch (toType) {
    case destinationTypes.EMAIL:
      if (toValue && !users.getIn(['byEmail', toValue])) {
        props.getUser({email: toValue}, sparkInstance);
      }
      break;
    case destinationTypes.USERID:
      if (userId && !users.getIn(['byId', userId])) {
        props.getUser({id: userId}, sparkInstance);
      }
      break;
    case destinationTypes.SPACEID:
      if (spaceId) {
        const space = spaces.getIn(['byId', spaceId]);
        if (!space) {
          props.fetchSpace(sparkInstance, spaceId)
            .then((s) => {
              if (s && s.locusUrl) {
                props.storeMeetDetails({callId: s.locusUrl});
              }
            });
        }
        else if (space && !space.isFetching && !avatar.hasIn(['items', spaceId])) {
          const otherUser = space.participants.find((p) => p !== currentUser.id);
          props.fetchAvatar({space, userId: otherUser}, sparkInstance);
        }
      }
      break;
    default:
  }
}

export default compose(
  connect(
    null,
    (dispatch) => bindActionCreators({
      fetchSpace,
      fetchAvatar,
      storeMeetDetails,
      getUser
    }, dispatch)
  ),
  lifecycle({
    componentWillReceiveProps(nextProps) {
      // check to see if we have gotten currentUser and device is registered
      if (nextProps.currentUser) {
        getCallDetails(nextProps);
      }
    }
  })
);
