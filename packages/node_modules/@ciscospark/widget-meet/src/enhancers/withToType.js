import {compose, lifecycle} from 'recompose';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import {
  deconstructHydraId,
  hydraTypes,
  validateSipUri,
  validateEmail
} from '@ciscospark/react-component-utils';

import {storeMeetDetails} from '../actions';


export const toTypes = {
  SIP: 'sipUri',
  EMAIL: 'email',
  USERID: 'userId',
  SPACEID: 'spaceId',
  PSTN: 'pstn' // currently ignoring PSTN
};

const toTypeNames = Object.values(toTypes);

function storeToType(props) {
  const {
    to,
    call,
    type
  } = props;
  const details = {};

  if (to && !call) {
    let toType = type;
    let toValue = to;

    if (!toType || !toTypeNames.includes(toType)) {
      const hydraObject = deconstructHydraId(to);
      if (validateSipUri(to)) {
        toType = toTypes.SIP;
        toValue = to.replace('sip:', '');
      }
      else if (hydraObject.id && hydraObject.type) {
        if (hydraObject.type === hydraTypes.PEOPLE) {
          toType = toTypes.USERID;
          toValue = hydraObject.id;
          details.userId = toValue;
        }
        else if (hydraObject.type === hydraTypes.ROOM) {
          toType = toTypes.SPACEID;
          toValue = hydraObject.id;
          details.spaceId = toValue;
        }
      }
      else if (validateEmail(to)) {
        toType = toTypes.EMAIL;
      }

      details.toType = toType;
      details.toValue = toValue;

      props.storeMeetDetails(details);
    }
  }
}

export default compose(
  connect(
    null,
    (dispatch) => bindActionCreators({
      storeMeetDetails
    }, dispatch)
  ),
  lifecycle({
    componentWillMount() {
      storeToType(this.props);
    }
  })
);
