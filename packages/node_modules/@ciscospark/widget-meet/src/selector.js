import {createSelector} from 'reselect';

const getWidget = (state) => state.widgetMeet;
const getMedia = (state) => state.media;
const getSparkInstance = (state, props) => props.sparkInstance || state.spark.get(`spark`);
const getSparkState = (state) => state.spark.get(`status`);
const getConversation = (state) => state.conversation;
const getAvatars = (state) => state.avatar;
const getUsers = (state) => state.user;
const getMercury = (state) => state.mercury;


const getCall = createSelector(
  [getConversation, getMedia],
  (conversation, media) => media.getIn([`calls`, conversation.get(`locusUrl`)])
);


export const getMeetWidgetProps = createSelector(
  [
    getSparkState,
    getSparkInstance,
    getAvatars,
    getConversation,
    getMercury,
    getMedia,
    getUsers,
    getWidget,
    getCall
  ],
  (sparkState, sparkInstance, avatars, conversation, mercury, media, users, widgetMeet, call) => { // eslint-disable-line max-params
    let avatarImage, displayName;
    if (conversation.get(`id`)) {
      avatarImage = conversation.get(`avatar`);
      displayName = conversation.get(`displayName`);
      const currentUserEmail = users.get(`currentUser`).email;

      // Need better way to store this in a single place
      if (conversation.get(`tags`).includes(`ONE_ON_ONE`)) {
        const toUser = conversation.get(`participants`)
          .filter((p) => p.get(`emailAddress`) !== currentUserEmail).first();
        displayName = toUser.get(`displayName`);
        avatarImage = avatars.getIn([`items`, toUser.get(`id`)]);
      }
    }

    return { // eslint-disable-line max-params
      sparkInstance,
      sparkState: sparkState.toJS(),
      avatarImage,
      locusUrl: conversation.get(`locusUrl`),
      conversation,
      displayName,
      mercury,
      media,
      widgetMeet,
      users,
      call
    };
  }
);
