import {combineReducers} from 'redux';
import {Record} from 'immutable';
import media from '@ciscospark/redux-module-media';
import {reducer as notifications} from '@ciscospark/react-container-notifications';
import avatar from '@ciscospark/redux-module-avatar';
import mercury from '@ciscospark/redux-module-mercury';
import spaces from '@ciscospark/redux-module-spaces';
import activities from '@ciscospark/redux-module-activities';

import {
  STORE_MEET_DETAILS,
  UPDATE_LOCAL_VIDEO_POSITION,
  UPDATE_WIDGET_STATUS
} from './actions';

const Status = Record({
  hasOpenWithCall: false,
  hasInitiatedCall: false // local user has clicked call button
});

const VideoPosition = Record({
  x: 0,
  y: 0
});

/**
 * Note: We are storing the call object because services can take a long time to
 * return with a full locus object. If the call object exists in this store, it
 * will be used as a fallback if no others exist in the media store.
 */

const InitialState = Record({
  toType: '', // valid types: userId, spaceId, email, sip, phoneNumber
  toValue: '',
  callId: '', // id of call object in media store.
  call: null,
  spaceId: '',
  userId: '',
  localVideoPosition: new VideoPosition(),
  status: new Status()
});

export const initialState = new InitialState();

export function reducer(state = initialState, action) {
  switch (action.type) {
    case STORE_MEET_DETAILS:
      return state.merge(action.payload);
    case UPDATE_LOCAL_VIDEO_POSITION:
      return state.set('localVideoPosition', action.payload.position);
    case UPDATE_WIDGET_STATUS:
      return state.mergeIn(['status'], action.payload.status);

    default:
      return state;
  }
}

export const reducers = {
  media,
  avatar,
  activities,
  mercury,
  notifications,
  spaces,
  widgetMeet: reducer
};

export default combineReducers(reducers);
