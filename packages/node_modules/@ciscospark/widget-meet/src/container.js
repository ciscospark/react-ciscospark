import React, {PropTypes, Component} from 'react';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import classNames from 'classnames';
import autobind from 'autobind-decorator';
import {intlShape, injectIntl} from 'react-intl';

import {
  acceptIncomingCall,
  callUser,
  declineIncomingCall,
  listenForIncomingCalls,
  hangupCall,
  checkWebRTCSupport
} from '@ciscospark/redux-module-media';
import LoadingScreen from '@ciscospark/react-component-loading-screen';
import SparkLogo from '@ciscospark/react-component-spark-logo';
import {
  NOTIFICATION_TYPE_OTHER,
  createNotification
} from '@ciscospark/react-container-notifications';
import Ringtone, {
  RINGTONE_TYPE_RINGBACK,
  RINGTONE_TYPE_INCOMING
} from '@ciscospark/react-component-ringtone';
import {connectToMercury} from '@ciscospark/redux-module-mercury';
import IncomingCall from '@ciscospark/react-component-incoming-call';

import InactiveCall from './components/call-inactive';
import ActiveCall from './components/call-active';
import messages from './messages';
import {
  updateLocalVideoPosition,
  updateLocalVideoState
} from './actions';
import styles from './styles.css';
import {getMeetWidgetProps} from './selector';

import {
  eventNames as defaultEventNames,
  constructCallEventData
} from './events';

export class MeetWidget extends Component {

  componentDidMount() {
    const {
      media,
      sparkInstance,
      startCall
    } = this.props;

    this.eventNames = Object.assign({}, defaultEventNames, this.props.eventNames);

    if (!media.getIn([`webRTC`, `hasCheckedSupport`])) {
      this.props.checkWebRTCSupport(sparkInstance);
    }
    if (media.getIn([`webRTC`, `isSupported`])) {
      if (startCall) {
        this.handleCall();
      }

      this.setup(this.props);
    }
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.media.getIn([`webRTC`, `isSupported`])) {
      this.setup(nextProps);

      const {
        users,
        conversation,
        call,
        displayName
      } = nextProps;

      const currentUser = users.get(`currentUser`);
      const spaceId = conversation.get(`id`);
      const activeCall = call;
      const prevActiveCall = this.props.call;
      // Check if this is a new call
      if (activeCall && !prevActiveCall) {
        // Is this an incoming call?
        if (activeCall.getIn([`callState`, `direction`]) === `in`) {
          this.incomingCallNotification(activeCall, displayName);
        }
        // Emit the event
        this.handleEvent(
          this.eventNames.CALLS_CREATED,
          constructCallEventData(activeCall.get(`instance`), currentUser, spaceId)
        );
      }

      if (activeCall && activeCall.getIn([`callState`, `connected`])
        && prevActiveCall && !prevActiveCall.getIn([`callState`, `connected`])) {
        // New call is connected, emit event
        this.handleEvent(
          this.eventNames.CALLS_CONNECTED,
          constructCallEventData(activeCall.get(`instance`), currentUser, spaceId)
        );
      }
    }
  }

  shouldComponentUpdate(nextProps) {
    const props = this.props;
    return nextProps.media !== props.media
      || nextProps.avatarImage !== props.avatarImage
      || nextProps.widgetMeet !== props.widgetMeet;
  }

  @autobind
  setup(props) {
    const {
      locusUrl,
      media,
      mercury,
      sparkInstance
    } = props;

    if (!media.getIn([`status`, `isListening`]) && locusUrl) {
      props.listenForIncomingCalls(sparkInstance, locusUrl);
    }

    // Setup Web Sockets
    if (!mercury.getIn([`status`, `hasConnected`])
      && !mercury.getIn([`status`, `isConnecting`])
      && !mercury.getIn([`status`, `isConnected`])
      && sparkInstance.internal.device.registered) {
      props.connectToMercury(sparkInstance);
    }
  }


  /**
   * Event handler in case one isn't provided
   * @param {string} name
   * @param {object} data
   * @returns {undfined}
   */
  @autobind
  handleEvent(name, data) {
    const {onEvent} = this.props;
    if (typeof onEvent === `function`) {
      this.props.onEvent(name, data);
    }
  }

  @autobind
  handleCall() {
    const props = this.props;
    const {
      toPersonEmail,
      toPersonId,
      sparkInstance,
      conversation,
      locusUrl,
      users
    } = this.props;
    const currentUser = users.get(`currentUser`);
    props.callUser({
      userIdOrEmail: toPersonId || toPersonEmail,
      locusUrl
    }, sparkInstance)
      .then((call) => {
        // Emit Event
        this.handleEvent(
          this.eventNames.CALLS_CREATED,
          constructCallEventData(call, currentUser, conversation.get(`id`))
        );
      });
  }

  @autobind
  handleHangup() {
    const props = this.props;
    const {
      call,
      conversation,
      users
    } = props;
    const callInstance = call.get(`instance`);
    const currentUser = users.get(`currentUser`);

    props.hangupCall(callInstance).then(() => {
      this.handleEvent(
        this.eventNames.CALLS_DISCONNECTED,
        constructCallEventData(callInstance, currentUser, conversation.get(`id`))
      );
    });
  }

  @autobind
  handleStartSendingAudio() {
    this.props.call.get(`instance`).startSendingAudio();
  }

  @autobind
  handleStartSendingVideo() {
    this.props.call.get(`instance`).startSendingVideo();
  }

  @autobind
  handleStopSendingAudio() {
    this.props.call.get(`instance`).stopSendingAudio();
  }

  @autobind
  handleStopSendingVideo() {
    this.props.call.get(`instance`).stopSendingVideo();
  }

  @autobind
  handleAnswer() {
    const {call} = this.props;
    const incomingCall = call.get(`instance`);
    this.props.acceptIncomingCall(incomingCall);
  }

  @autobind
  handleDecline() {
    const {call} = this.props;
    const incomingCall = call.get(`instance`);
    this.props.declineIncomingCall(incomingCall);
  }

  @autobind
  handleLocalVideoDragStop(e, data) {
    const {node, x, y} = data;
    const closest = this.findClosestPosition(node, {x, y});
    this.props.updateLocalVideoPosition(closest);
  }

  findClosestPosition(node, position) {
    const parent = node.offsetParent;
    const {x, y} = position;
    const nodeHeight = node.offsetHeight;
    const nodeWidth = node.offsetWidth;
    const parentHeight = parent.offsetHeight;
    const parentWidth = parent.offsetWidth;

    const x2 = (parentWidth - nodeWidth) / 2;
    const x3 = parentWidth - nodeWidth;
    const y2 = (parentHeight - nodeHeight) / 2;

    const snapTransform = [
      {x: -x3, y: 0}, {x: -x2, y: 0}, {x: 0, y: 0},
      {x: -x3, y: y2}, {x: 0, y: y2}
    ];

    const distances = snapTransform.map((val) => {
      const dx = x - val.x;
      const dy = y - val.y;
      return Math.sqrt(dx * dx + dy * dy);
    });

    return snapTransform[distances.indexOf(Math.min(...distances))];
  }

  incomingCallNotification(incomingCall, fromPersonName) {
    const {
      intl,
      avatarImage
    } = this.props;
    const {formatMessage} = intl;
    const details = {
      username: fromPersonName,
      message: formatMessage(messages.incomingCallMessage),
      avatar: avatarImage
    };
    this.props.createNotification(incomingCall.locusUrl, NOTIFICATION_TYPE_OTHER, details);
  }

  render() { // eslint-disable-line complexity
    const {
      intl,
      media,
      call,
      avatarImage,
      displayName,
      widgetMeet
    } = this.props;
    const {formatMessage} = intl;
    const isWebRTCSupported = media.getIn([`webRTC`, `isSupported`]);

    if (isWebRTCSupported && (avatarImage || displayName)) {
      // If we have a call object
      if (call) {
        // Is the call active?
        const {
          direction,
          connected,
          ringing,
          initiated,
          joined,
          joinedOnThisDevice
        } = call.get(`callState`).toJS();

        const isActive = connected && joinedOnThisDevice || direction === `out`;
        const isIncoming = direction === `in` && initiated && !joined;

        if (isActive) {
          const {
            handleHangup,
            handleLocalVideoDragStop,
            handleStartSendingAudio,
            handleStartSendingVideo,
            handleStopSendingAudio,
            handleStopSendingVideo
          } = this;

          const callState = call.get(`callState`).toJS();
          const {
            remoteMediaStream,
            localMediaStream
          } = callState;

          return (
            <div className={classNames(styles.meetWidgetContainer, `meet-widget-container`)}>
              <ActiveCall
                avatarImage={avatarImage}
                callState={callState}
                displayName={displayName}
                localMediaStream={localMediaStream}
                localVideoPosition={widgetMeet.get(`localVideoPosition`)}
                onHangupClick={handleHangup}
                onLocalVideoDragStop={handleLocalVideoDragStop}
                onStartSendingAudio={handleStartSendingAudio}
                onStartSendingVideo={handleStartSendingVideo}
                onStopSendingAudio={handleStopSendingAudio}
                onStopSendingVideo={handleStopSendingVideo}
                remoteMediaStream={remoteMediaStream}
              />
              <Ringtone play={ringing} type={RINGTONE_TYPE_RINGBACK} />
            </div>
          );
        }

        // Is this an incoming call?
        if (isIncoming) {
          const {
            handleAnswer,
            handleDecline
          } = this;

          return (
            <div className={classNames(styles.meetWidgetContainer, `meet-widget-container`)}>
              <IncomingCall
                answerButtonLabel={formatMessage(messages.answerButtonLabel)}
                avatarImage={avatarImage}
                declineButtonLabel={formatMessage(messages.declineButtonLabel)}
                displayName={displayName}
                incomingCallMessage={formatMessage(messages.incomingCallMessage)}
                onAnswerClick={handleAnswer}
                onDeclineClick={handleDecline}
              />
              <Ringtone play type={RINGTONE_TYPE_INCOMING} />
            </div>
          );
        }
      }


      return (
        <div className={classNames(styles.meetWidgetContainer, `meet-widget-container`)}>
          <InactiveCall
            avatarImage={avatarImage}
            callButtonLabel={formatMessage(messages.callButtonLabel)}
            displayName={displayName}
            onCallClick={this.handleCall}
          />
        </div>
      );
    }

    if (isWebRTCSupported === false) {
      return (
        <div className={classNames(styles.meetWidgetContainer, styles.noWebRtc, `meet-widget-container`)}>
          <div className={styles.noWebRtcLogo}><SparkLogo /></div>
          <div className={styles.noWebRtcMessage}>
            <p>{formatMessage(messages.noWebRTCBrowserSupportMessage)}</p>
            <p>{formatMessage(messages.useSupportedBrowserMessage)}</p>
          </div>
        </div>
      );
    }

    return <LoadingScreen />;
  }
}

const injectedPropTypes = {
  intl: intlShape.isRequired,
  avatarImage: PropTypes.string,
  displayname: PropTypes.string,
  conversation: PropTypes.object.isRequired,
  call: PropTypes.object,
  media: PropTypes.object.isRequired,
  users: PropTypes.object.isRequired,
  sparkInstance: PropTypes.object.isRequired,
  widgetMeet: PropTypes.object.isRequired,
  acceptIncomingCall: PropTypes.func.isRequired,
  connectToMercury: PropTypes.func.isRequired,
  callUser: PropTypes.func.isRequired,
  createNotification: PropTypes.func.isRequired,
  declineIncomingCall: PropTypes.func.isRequired,
  hangupCall: PropTypes.func.isRequired,
  listenForIncomingCalls: PropTypes.func.isRequired
};

export const ownPropTypes = {
  muteNotifications: PropTypes.bool,
  onEvent: PropTypes.func,
  startCall: PropTypes.bool,
  spaceId: PropTypes.string,
  toPersonEmail: PropTypes.string,
  toPersonId: PropTypes.string,
  eventNames: PropTypes.object
};

MeetWidget.propTypes = {
  ...ownPropTypes,
  ...injectedPropTypes
};

export default connect(
  getMeetWidgetProps,
  (dispatch) => bindActionCreators({
    acceptIncomingCall,
    callUser,
    connectToMercury,
    createNotification,
    declineIncomingCall,
    hangupCall,
    listenForIncomingCalls,
    updateLocalVideoPosition,
    updateLocalVideoState,
    checkWebRTCSupport
  }, dispatch)
)(injectIntl(MeetWidget));
