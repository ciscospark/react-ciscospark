import React from 'react';
import PropTypes from 'prop-types';
import Draggable from 'react-draggable';
import classNames from 'classnames';

import ButtonControls from '@ciscospark/react-component-button-controls';
import {ICON_TYPE_VIDEO_CROSS_OUTLINE, ICON_TYPE_MUTE_OUTLINE, ICON_TYPE_EXIT} from '@ciscospark/react-component-icon';
import Video from '@ciscospark/react-component-video';
import Avatar from '@ciscospark/react-component-avatar';

import styles from './styles.css';

// eslint-disable-next-line complexity
export default function ActiveCall({
  callState,
  localVideoPosition,
  onHangupClick,
  onLocalVideoDragStop,
  onStartSendingAudio,
  onStartSendingVideo,
  onStopSendingAudio,
  onStopSendingVideo,
  localMediaStream,
  remoteMediaStream,
  avatarImage,
  displayName
}) {
  const connectedClass = remoteMediaStream && remoteMediaStream.active && styles.callConnected;
  const {
    sendingAudio,
    sendingVideo,
    connected
  } = callState;

  const buttons = [
    {
      accessibilityLabel: `Mute Audio`,
      iconType: ICON_TYPE_MUTE_OUTLINE,
      buttonClassName: classNames(styles.audioButton, sendingAudio === false && connected ? styles.audioStartSending : styles.audioStopSending),
      onClick: sendingAudio ? onStopSendingAudio : onStartSendingAudio
    },
    {
      accessibilityLabel: `Mute Video`,
      iconType: ICON_TYPE_VIDEO_CROSS_OUTLINE,
      buttonClassName: classNames(styles.videoButton, sendingVideo === false && connected ? styles.videoStartSending : styles.videoStopSending),
      onClick: sendingVideo ? onStopSendingVideo : onStartSendingVideo
    },
    {
      accessibilityLabel: `Hangup`,
      iconType: ICON_TYPE_EXIT,
      buttonClassName: styles.hangupButton,
      onClick: onHangupClick
    }
  ];

  let remoteView = ( // eslint-disable-line no-extra-parens
    <div className={classNames(styles.avatarView, `remote-avatar-view`)}>
      <Avatar image={avatarImage} name={displayName} />
    </div>
  );

  if (remoteMediaStream && remoteMediaStream.active) {
    if (callState.remoteVideoMuted) {
      remoteView = <Video srcObject={remoteMediaStream} videoMuted />;
    }
    else {
      remoteView = <Video srcObject={remoteMediaStream} />;
    }
  }

  return (
    <div className={classNames(styles.callContainer, connectedClass, `call-container`)}>
      <div className={classNames(styles.remoteVideo, `remote-video`)}>
        { remoteView }
      </div>
      {
        localMediaStream && localMediaStream.active && (sendingVideo || sendingAudio) &&
        <Draggable
          bounds="parent"
          defaultClassNameDragging={styles.reactDraggableDragging}
          onStop={onLocalVideoDragStop}
          position={localVideoPosition}
        >
          <div className={classNames(styles.localVideo, `local-video`)}>
            <Video audioMuted srcObject={localMediaStream} />
          </div>
        </Draggable>
      }
      {
        localMediaStream && localMediaStream.active &&
        <div className={classNames(styles.callControls, `call-controls`)}>
          <ButtonControls buttons={buttons} showLabels={false} />
        </div>
      }
    </div>
  );
}

ActiveCall.propTypes = {
  avatarImage: PropTypes.string,
  callState: PropTypes.object,
  displayName: PropTypes.string,
  localMediaStream: PropTypes.object,
  localVideoPosition: PropTypes.object,
  onHangupClick: PropTypes.func.isRequired,
  onLocalVideoDragStop: PropTypes.func,
  onStartSendingAudio: PropTypes.func.isRequired,
  onStartSendingVideo: PropTypes.func.isRequired,
  onStopSendingAudio: PropTypes.func.isRequired,
  onStopSendingVideo: PropTypes.func.isRequired,
  remoteMediaStream: PropTypes.object
};
