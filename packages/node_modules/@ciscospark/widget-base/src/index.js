import uuid from 'uuid';
import Events from 'ampersand-events';

// Inject widget into browser globals
if (!window.ciscospark) {
  window.ciscospark = {};
}
if (!window.ciscospark.widgetStore) {
  window.ciscospark.widgetStore = {};
}
if (!window.ciscospark.widgetFn) {
  window.ciscospark.widgetFn = {};
}

export default function setupWidgets() {
  if (!window.ciscospark.widget || typeof window.ciscospark.widget !== `function`) {
    window.ciscospark.widget = function widget(el) {

      /**
       * Base Widget
       * @param {object} widgetEl HTML element where widget mounts
       * @returns {object} this
       */
      function W(widgetEl) {
        this.el = widgetEl;

        /**
         * Handle React Events
         *
         * @param {string} name of event
         * @param {object} data
         * @returns {CustomEvent} event
         */
        this.handleEvent = (name, data) => {
          const detail = {
            resource: name.split(`:`)[0],
            event: name.split(`:`)[1],
            actorId: data.actor.id,
            data
          };

          // Dispatch DOM event
          const event = new CustomEvent(name, {
            detail
          });
          this.el.dispatchEvent(event);

          // Trigger ampersand events
          this.trigger(name, detail);

          // Trigger onEvent callback
          if (this.options.onEvent) {
            return this.options.onEvent(name, detail);
          }

          return this;
        };

        return this;
      }

      // Attach widget functions to prototype
      W.prototype = window.ciscospark.widgetFn;

      // Hook in ampersand-events
      Object.assign(W.prototype, Events);

      /**
       * Creates a new widget object and stores it
       * @param  {object} widgetEl HTML element where a widget is mounted
       * @returns {object} widgetObject
       */
      function createNewWidget(widgetEl) {
        const widgetObj = new W(widgetEl);
        const id = uuid.v4();
        // Store ID as attribute on dom element
        widgetEl.setAttribute(`data-uuid`, id);
        window.ciscospark.widgetStore[id] = widgetObj;
        return widgetObj;
      }

      /**
       * Retrieves a Widget from global widget store
       * @param  {object} widgetEl HTML element where a widget is mounted
       * @returns {object} widgetObject
       */
      function getWidget(widgetEl) {
        // Check if element exists and is HTML Element
        if (widgetEl && widgetEl.nodeType === 1) {
          // Get ID as attribute on dom element
          const id = widgetEl.getAttribute(`data-uuid`);
          // Add class
          widgetEl.classList.add(`ciscospark-widget`);
          // Get widget from store if it exists
          const widgetObj = window.ciscospark.widgetStore[id];
          if (widgetObj) {
            return widgetObj;
          }
          // Otherwise create new widget store
          return createNewWidget(widgetEl);
        }
        console.warning(`WARNING: ciscospark.widget: No HTML element provided.`); // eslint-disable-line no-console
        return false;
      }

      return getWidget(el);
    };
  }
}

export function attachWidgetInit(name, widgetInit, widgetRemove) {
  window.ciscospark.widgetFn[name] = function(options) { // eslint-disable-line func-names
    this.options = options;
    const widgetOptions = Object.assign({}, options, {
      onEvent: this.handleEvent
    });
    this.widgetOptions = widgetOptions;
    widgetInit(this.el, widgetOptions);

    // Attach remove method
    this.remove = (callback) => new Promise((resolve) => {
      const id = this.el.getAttribute(`data-uuid`);
      const removed = widgetRemove(this.el);
      Reflect.deleteProperty(window.ciscospark.widgetStore, id);
      if (typeof callback === `function`) {
        return callback(removed);
      }
      return resolve(removed);
    });

    return this;
  };
  setupWidgets();
}
