/* eslint-disable react/no-set-state,react/forbid-component-props,react/jsx-no-literals */
import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {autobind} from 'core-decorators';
import TextField from 'material-ui/TextField';
import RaisedButton from 'material-ui/RaisedButton';
import {Card, CardActions, CardTitle, CardText} from 'material-ui/Card';

class TokenInput extends Component {
  constructor(props) {
    super(props);
    this.state = {
      tokenSaved: !!props.token,
      userAccessToken: props.token
    };
  }

  shouldComponentUpdate(nextProps, nextState) {
    return nextState !== this.state;
  }

  @autobind
  handleClearToken() {
    this.setState({userAccessToken: ``, tokenSaved: false});
    this.props.onLogin();
  }

  @autobind
  handleSaveToken() {
    this.setState({tokenSaved: true});
    this.props.onLogin(this.state.userAccessToken);
  }

  @autobind
  handleAccessTokenChange(e) {
    return this.setState({userAccessToken: e.target.value});
  }

  render() {
    return (
      <div>
        <Card initiallyExpanded style={{margin: `10px`}}>
          <CardTitle
            actAsExpander
            showExpandableButton
            subtitle="Spark Widgets require an access token to identify the current user."
            title="Cisco Spark Access Token"
          />
          {!this.state.tokenSaved &&
          <CardText expandable>
            <p>You can get an access token from <a href="http://developer.ciscospark.com">{`developer.ciscospark.com`}</a></p>
            <TextField
              aria-label="Access Token"
              floatingLabelFixed
              floatingLabelText="Access Token"
              hintText="Your Access Token"
              id="accessTokenInput"
              onChange={this.handleAccessTokenChange}
              value={this.state.userAccessToken}
            />
          </CardText>
          }
          <CardActions expandable>
            {!this.state.tokenSaved &&
            <RaisedButton
              aria-label="Save Token"
              disabled={!this.state.userAccessToken}
              id="accessTokenSaveButton"
              label={`Save Token`}
              onClick={this.handleSaveToken}
              primary
            />
            }
            {this.state.tokenSaved &&
            <RaisedButton
              aria-label="Clear Token"
              label={`Token Saved, Clear?`}
              onClick={this.handleClearToken}
              secondary
            />
            }
          </CardActions>
        </Card>
      </div>
    );
  }
}

TokenInput.propTypes = {
  onLogin: PropTypes.func.isRequired,
  token: PropTypes.string
};

export default TokenInput;
