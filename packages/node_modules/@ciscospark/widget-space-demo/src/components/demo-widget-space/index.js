/* global ciscospark */
import React, {Component} from 'react';
import classNames from 'classnames';
import {Cookies, withCookies} from 'react-cookie';
import {instanceOf} from 'prop-types';
import {autobind} from 'core-decorators';

import {Tabs, Tab} from 'material-ui/Tabs';
import RaisedButton from 'material-ui/RaisedButton';
import AppBar from 'material-ui/AppBar';
import Toggle from 'material-ui/Toggle';
import {RadioButtonGroup, RadioButton} from 'material-ui/RadioButton';
import {Card, CardActions, CardTitle, CardText} from 'material-ui/Card';
import Checkbox from 'material-ui/Checkbox';

import SyntaxHighlighter from 'react-syntax-highlighter/prism';
import {coy} from 'react-syntax-highlighter/styles/prism';

import TokenInput from '../token-input';

import styles from './styles.css';

const MODE_ONE_ON_ONE = 'email';
const MODE_SPACE = 'spaceId';

const widgetElementId = 'my-ciscospark-widget';

class DemoWidgetSpace extends Component {
  constructor(props) {
    super(props);
    const {cookies} = this.props;
    const toPersonEmail = cookies.get('toPersonEmail') || '';
    const spaceId = cookies.get('spaceId') || '';
    let mode;
    if (spaceId) {
      mode = MODE_SPACE;
    }
    else if (toPersonEmail) {
      mode = MODE_ONE_ON_ONE;
    }
    this.state = {
      accessToken: cookies.get('accessToken') || '',
      activities: {
        files: true,
        meet: true,
        message: true,
        people: true
      },
      displayToken: false,
      mode,
      running: false,
      toPersonEmail,
      spaceId
    };
  }

  shouldComponentUpdate() {
    return true;
  }

  @autobind
  handleSubmit(e) {
    e.preventDefault();
    const {cookies} = this.props;
    cookies.set('accessToken', this.state.accessToken);
    if (this.state.mode === MODE_ONE_ON_ONE) {
      cookies.set('toPersonEmail', this.state.toPersonEmail);
    }
    else {
      cookies.set('spaceId', this.state.spaceId);
    }
    const destinationId = this.state.mode === MODE_ONE_ON_ONE ? this.state.toPersonEmail : this.state.spaceId;
    const widgetEl = document.getElementById(widgetElementId);
    ciscospark.widget(widgetEl).spaceWidget({
      accessToken: this.state.accessToken,
      onEvent: (eventName, detail) => {
        window.ciscoSparkEvents.push({eventName, detail});
      },
      destinationId,
      destinationType: this.state.mode,
      spaceActivities: this.state.activities
    });

    this.setState({running: true});
  }

  @autobind
  handleRemove() {
    const widgetEl = document.getElementById(widgetElementId);
    ciscospark.widget(widgetEl).remove();
    this.setState({running: false});
  }

  @autobind
  handleAccessTokenChange(accessToken) {
    return this.setState({accessToken});
  }

  @autobind
  handleDisplayAccessTokenChange(e, displayToken) {
    return this.setState({displayToken});
  }

  @autobind
  handleEmailChange(e) {
    return this.setState({toPersonEmail: e.target.value});
  }

  @autobind
  handleModeChange(e, value) {
    return this.setState({mode: value});
  }

  @autobind
  handleActivitiesChange(event, isInputChecked) {
    const {activities} = this.state;
    activities[event.target.value] = isInputChecked;
    return this.setState({activities});
  }

  @autobind
  handleSpaceChange(e) {
    return this.setState({spaceId: e.target.value});
  }

  generateExampleCode() {
    const {
      accessToken, activities, displayToken, spaceId, toPersonEmail
    } = this.state;
    const displayedAccessToken = displayToken ? accessToken : 'YOUR_ACCESS_TOKEN';
    const globalActivityTypesField = `activities: ${JSON.stringify(activities)}`;
    let globalDestinationIdField, globalDestinationTypeField, inlineDestinationIdField, inlineDestinationTypeField;
    if (this.state.mode === MODE_ONE_ON_ONE) {
      inlineDestinationIdField = `data-destination-id="${toPersonEmail || 'TO_PERSON_EMAIL'}"`;
      inlineDestinationTypeField = 'data-destination-type="email"';
      globalDestinationIdField = `destinationId: '${toPersonEmail || 'TO_PERSON_EMAIL'}'`;
      globalDestinationTypeField = 'destinationType: "email"';
    }
    else {
      globalDestinationIdField = `destinationId: '${spaceId || 'SPACE_ID'}'`;
      globalDestinationTypeField = 'destinationType: "spaceId"';
      inlineDestinationIdField = `data-destination-id="${spaceId || 'SPACE_ID'}"`;
      inlineDestinationTypeField = 'data-destination-type="spaceId"';
    }

    const inlineCode = `<div
  data-toggle="ciscospark-space"
  data-access-token="${displayedAccessToken}"
  ${inlineDestinationIdField}
  ${inlineDestinationTypeField}
/>`;
    const globalCode = `<div id="my-ciscospark-widget" />
<script>
  var widgetEl = document.getElementById('my-ciscospark-widget');
  // Init a new widget
  ciscospark.widget(widgetEl).spaceWidget({
    accessToken: '${displayedAccessToken}',
    ${globalDestinationIdField},
    ${globalDestinationTypeField},
    ${globalActivityTypesField}
  });
</script>`;
    return {
      globalCode,
      inlineCode
    };
  }

  render() {
    const hasToPerson = this.state.mode === MODE_ONE_ON_ONE && this.state.toPersonEmail;
    const hasToSpace = this.state.mode === MODE_SPACE && this.state.spaceId;
    const loadButtonEnabled = this.state.accessToken && (hasToPerson || hasToSpace);
    const {globalCode, inlineCode} = this.generateExampleCode(this.state);
    const componentContainerClassNames = [
      styles.widgetComponentContainer
    ];
    if (!this.state.running) {
      componentContainerClassNames.push(styles.hidden);
    }
    // eslint-disable-reason should not apply to jsx/html markup
    /* eslint-disable max-len */
    return (
      <div>
        <AppBar title="Cisco Spark Space Widget" />
        <div className={classNames('ciscospark-demo-wrapper', styles.demoWrapper)}>
          <div className={classNames(componentContainerClassNames)}>
            <div id={widgetElementId} />
          </div>
          <Card initiallyExpanded style={{margin: '10px'}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              subtitle="The Spark Space widget allows developers to easily incorporate Cisco Spark Space messaging into an application."
              title="Cisco Spark Space Widget Demo"
            />
            <CardText expandable>
              This widget handles coordination between your application and the Spark APIs, and provides components of the Spark space experience without having to build all of the front end UI yourself.
              <br />
              Our widget is built using <a href="https://github.com/facebook/react">React</a>, <a href="https://github.com/reactjs/redux">Redux</a>, and the <a href="https://github.com/webex/spark-js-sdk">Spark Javascript SDK </a>.
            </CardText>
          </Card>
          <TokenInput onLogin={this.handleAccessTokenChange} token={this.state.accessToken} />
          <Card initiallyExpanded style={{margin: '10px'}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              subtitle="Cisco Spark Space Widget can open to a space or person."
              title="Choose Widget Destination"
            />
            <CardText expandable>
              <h3> Widget Destination Type </h3>
              <div className={classNames(styles.select)}>
                <RadioButtonGroup
                  aria-label="Widget 'To' Type"
                  name="toType"
                  onChange={this.handleModeChange}
                  valueSelected={this.state.mode}
                >
                  <RadioButton
                    aria-label="To Space"
                    label="To Space"
                    value={MODE_SPACE}
                  />
                  <RadioButton
                    aria-label="To Person"
                    label="To Person"
                    value={MODE_ONE_ON_ONE}
                  />
                </RadioButtonGroup>
              </div>

              <div>
                <h3> Widget Activities </h3>
                <Checkbox
                  checked={this.state.activities.files}
                  label="Files"
                  onCheck={this.handleActivitiesChange}
                  value="files"
                />
                <Checkbox
                  checked={this.state.activities.meet}
                  label="Meet"
                  onCheck={this.handleActivitiesChange}
                  value="meet"
                />
                <Checkbox
                  checked={this.state.activities.message}
                  label="Message"
                  onCheck={this.handleActivitiesChange}
                  value="message"
                />
                <Checkbox
                  checked={this.state.activities.people}
                  label="People"
                  onCheck={this.handleActivitiesChange}
                  value="people"
                />
              </div>
              <div>
                {
                  this.state.mode === MODE_SPACE &&
                  <div>
                    <input
                      aria-label="To Space ID"
                      className={styles.textInput}
                      id="toSpaceId"
                      onChange={this.handleSpaceChange}
                      placeholder="Spark Space Id"
                      value={this.state.spaceId}
                    />
                  </div>
                }
                {
                  this.state.mode === MODE_ONE_ON_ONE &&
                  <div>
                    <input
                      aria-label="To User Email"
                      className={styles.textInput}
                      id="toUserEmail"
                      onChange={this.handleEmailChange}
                      placeholder="Spark User Email (For 1:1)"
                      value={this.state.toPersonEmail}
                    />
                  </div>
                }
              </div>
            </CardText>
            <CardActions expandable>
              <RaisedButton
                aria-label="Open Widget"
                disabled={!loadButtonEnabled}
                id="openWidgetButton"
                label="Open Embedded Widget"
                onClick={this.handleSubmit}
                primary
              />
              <RaisedButton
                aria-label="Remove Widget"
                disabled={!this.state.running}
                id="removeWidgetButton"
                label="Remove Embedded Widget"
                onClick={this.handleRemove}
                primary
              />
            </CardActions>
          </Card>
          <Card initiallyExpanded style={{margin: '10px'}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              subtitle="Cisco Spark Space Widget can be implemented multiple ways."
              title="Widget Example Code"
            />
            <CardText expandable>
              <div className={classNames(styles.example)}>
                <Tabs>
                  <Tab label="Inline Mode">
                    <div className={classNames('ciscospark-example-code', styles.exampleCode)}>
                      <SyntaxHighlighter language="jsx" style={coy}>
                        {inlineCode}
                      </SyntaxHighlighter>
                    </div>
                  </Tab>
                  <Tab label="Global Mode">
                    <div className={classNames('ciscospark-example-code', styles.exampleCode)}>
                      <SyntaxHighlighter language="jsx" style={coy}>
                        {globalCode}
                      </SyntaxHighlighter>
                    </div>
                  </Tab>
                </Tabs>
                <div className={classNames('ciscospark-toggle', styles.toggle)}>
                  <div>
                    <Toggle
                      label="Display Access Token"
                      labelPosition="right"
                      onToggle={this.handleDisplayAccessTokenChange}
                    />
                  </div>
                </div>
              </div>
            </CardText>
          </Card>
        </div>
      </div>
    );
  }
}

DemoWidgetSpace.propTypes = {
  cookies: instanceOf(Cookies).isRequired
};

DemoWidgetSpace.title = 'Widget Space';
DemoWidgetSpace.path = '/widget-space-demo';

export default withCookies(DemoWidgetSpace);
