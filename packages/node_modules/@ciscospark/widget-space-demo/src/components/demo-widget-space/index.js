/* eslint-disable react/no-set-state,react/forbid-component-props,react/jsx-no-literals */
import React, {Component} from 'react';
import classNames from 'classnames';
import cookie from 'react-cookie';
import autobind from 'autobind-decorator';

import TextField from 'material-ui/TextField';
import {Tabs, Tab} from 'material-ui/Tabs';
import RaisedButton from 'material-ui/RaisedButton';
import AppBar from 'material-ui/AppBar';
import Toggle from 'material-ui/Toggle';
import SelectField from 'material-ui/SelectField';
import MenuItem from 'material-ui/MenuItem';
import {Card, CardActions, CardTitle, CardText} from 'material-ui/Card';

import Highlight from 'react-highlight';
import 'highlight.js/styles/default.css';

import WidgetSpace from '@ciscospark/widget-space';

import TokenInput from '../token-input';

import styles from './styles.css';

const MODE_ONE_ON_ONE = `MODE_ONE_ON_ONE`;
const MODE_SPACE = `MODE_SPACE`;


class DemoWidgetSpace extends Component {
  constructor(props) {
    super(props);
    const hasToken = !!cookie.load(`accessToken`);
    const accessToken = cookie.load(`accessToken`) || ``;
    const toPersonEmail = cookie.load(`toPersonEmail`) || ``;
    const spaceId = cookie.load(`spaceId`) || ``;
    let mode;
    if (spaceId) {
      mode = MODE_SPACE;
    }
    else if (toPersonEmail) {
      mode = MODE_ONE_ON_ONE;
    }
    this.state = {
      authenticate: false,
      displayToken: false,
      hasToken,
      mode,
      accessToken,
      toPersonEmail,
      spaceId,
      running: false
    };
  }

  shouldComponentUpdate() {
    return true;
  }

  @autobind
  handleSubmit(e) {
    e.preventDefault();
    cookie.save(`accessToken`, this.state.accessToken);
    if (this.state.mode === MODE_ONE_ON_ONE) {
      cookie.save(`toPersonEmail`, this.state.toPersonEmail);
    }
    else {
      cookie.save(`spaceId`, this.state.spaceId);
    }
    this.setState({running: true});
  }

  @autobind
  handleAccessTokenChange(accessToken) {
    return this.setState({accessToken, hasToken: !!accessToken});
  }

  @autobind
  handleDisplayAccessTokenChange(e, displayToken) {
    return this.setState({displayToken});
  }

  @autobind
  handleEmailChange(e) {
    return this.setState({toPersonEmail: e.target.value});
  }

  @autobind
  handleModeChange(e, index, value) {
    return this.setState({mode: value});
  }

  @autobind
  handleSpaceChange(e) {
    return this.setState({spaceId: e.target.value});
  }

  createWidget(e) {
    e.preventDefault();
    return this.setState({running: true});
  }

  // eslint-disable-next-line complexity
  generateExampleCode(state) {
    const {accessToken, displayToken, spaceId, toPersonEmail} = state;
    const displayedAccessToken = displayToken ? accessToken : `YOUR_ACCESS_TOKEN`;
    let globalToField, inlineToField, reactToField;
    if (this.state.mode === MODE_ONE_ON_ONE) {
      inlineToField = `data-to-person-email="${toPersonEmail ? toPersonEmail : `TO_PERSON_EMAIL`}"`;
      reactToField = `toPersonEmail="${toPersonEmail ? toPersonEmail : `TO_PERSON_EMAIL`}"`;
      globalToField = `toPersonEmail: '${toPersonEmail ? toPersonEmail : `TO_PERSON_EMAIL`}'`;
    }
    else {
      globalToField = `spaceId: '${spaceId ? spaceId : `SPACE_ID`}'`;
      inlineToField = `data-space-id="${spaceId ? spaceId : `SPACE_ID`}"`;
      reactToField = `spaceId="${spaceId ? spaceId : `SPACE_ID`}"`;
    }

    const reactCode = `import SpaceWidget from '@ciscospark/widget-space';

<SpaceWidget accessToken="${displayedAccessToken}" ${reactToField} />`;
    const inlineCode = `<div data-toggle="ciscospark-space" data-access-token="${displayedAccessToken}" ${inlineToField} />`;
    const globalCode = `<div id="my-ciscospark-widget" />
<script>
  var widgetEl = document.getElementById('my-ciscospark-widget');
  // Init a new widget
  ciscospark.widget(widgetEl).spaceWidget({
    accessToken: '${displayedAccessToken}',
    ${globalToField}
  });
</script>`;
    return {
      globalCode,
      inlineCode,
      reactCode
    };
  }

  render() {
    const hasToPerson = this.state.mode === MODE_ONE_ON_ONE && this.state.toPersonEmail;
    const hasToSpace = this.state.mode === MODE_SPACE && this.state.spaceId;
    const toPerson = this.state.mode === MODE_ONE_ON_ONE ? this.state.toPersonEmail : ``;
    const toSpace = this.state.mode === MODE_SPACE ? this.state.spaceId : ``;
    const loadButtonEnabled = this.state.accessToken && (hasToPerson || hasToSpace);
    const {globalCode, inlineCode, reactCode} = this.generateExampleCode(this.state);
    if (this.state.running) {
      return (
        <div>
          <AppBar title="Cisco Spark Space Widget" />
          <div className={classNames(`ciscospark-widget-component-container`, styles.widgetComponentContainer)}>
            <WidgetSpace
              accessToken={this.state.accessToken}
              spaceId={toSpace}
              toPersonEmail={toPerson}
            />
          </div>
        </div>
      );
    }
    return (
      <div>
        <AppBar title="Cisco Spark Space Widget" />
        <div className={classNames(`ciscospark-demo-wrapper`, styles.demoWrapper)}>
          <Card initiallyExpanded style={{margin: `10px`}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              subtitle="The Spark Space widget allows developers to easily incorporate Cisco Spark Space messaging into an application."
              title="Cisco Spark Space Widget Demo"
            />
            <CardText expandable>
              This widget handles coordination between your application and the Spark APIs, and provides components of the Spark space experience without having to build all of the front end UI yourself.
              <br />
              Our widget is built using <a href="https://github.com/facebook/react">React</a>, <a href="https://github.com/reactjs/redux">Redux</a>, and the <a href="https://github.com/ciscospark/spark-js-sdk">Spark Javascript SDK </a>.
            </CardText>
          </Card>
          <TokenInput onLogin={this.handleAccessTokenChange} token={this.state.accessToken} />
          <Card initiallyExpanded style={{margin: `10px`}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              subtitle="Cisco Spark Space Widget can open to a space or person."
              title="Choose Widget Destination"
            />
            <CardText expandable>
              <div className={classNames(styles.select)}>
                <SelectField
                  floatingLabelFixed
                  floatingLabelText="Widget 'To' Type"
                  onChange={this.handleModeChange}
                  value={this.state.mode}
                >
                  <MenuItem primaryText="" value={null} />
                  <MenuItem primaryText="To Space" value={MODE_SPACE} />
                  <MenuItem primaryText="To Person" value={MODE_ONE_ON_ONE} />
                </SelectField>
              </div>
              {this.state.mode === MODE_SPACE &&
              <div>
                <TextField
                  floatingLabelFixed
                  floatingLabelText="To Room/Space Id"
                  hintText="Spark Space Id"
                  onChange={this.handleSpaceChange}
                  value={this.state.spaceId}
                />
              </div>
              }
              {this.state.mode === MODE_ONE_ON_ONE &&
              <div>
                <TextField
                  floatingLabelFixed
                  floatingLabelText="To User Email"
                  hintText="Spark User Email (For 1:1)"
                  onChange={this.handleEmailChange}
                  value={this.state.toPersonEmail}
                />
              </div>
              }
            </CardText>
            <CardActions expandable>
              <RaisedButton
                disabled={!loadButtonEnabled}
                label={`Open Embedded Widget`}
                onClick={this.handleSubmit}
                primary
              />
            </CardActions>
          </Card>
          <Card initiallyExpanded style={{margin: `10px`}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              subtitle="Cisco Spark Space Widget can be implemented multiple ways."
              title="Widget Example Code"
            />
            <CardText expandable>
              <div className={classNames(styles.example)}>
                <Tabs>
                  <Tab label={`React Component`}>
                    <div className={classNames(`ciscospark-example-code`, styles.exampleCode)}>
                      <Highlight>
                        {reactCode}
                      </Highlight>
                    </div>
                  </Tab>
                  <Tab label={`Inline Mode`}>
                    <div className={classNames(`ciscospark-example-code`, styles.exampleCode)}>
                      <Highlight>
                        {inlineCode}
                      </Highlight>
                    </div>
                  </Tab>
                  <Tab label={`Global Mode`}>
                    <div className={classNames(`ciscospark-example-code`, styles.exampleCode)}>
                      <Highlight>
                        {globalCode}
                      </Highlight>
                    </div>
                  </Tab>
                </Tabs>
                <div className={classNames(`ciscospark-toggle`, styles.toggle)}>
                  <div>
                    <Toggle
                      label="Display Access Token"
                      labelPosition="right"
                      onToggle={this.handleDisplayAccessTokenChange}
                    />
                  </div>
                </div>
              </div>
            </CardText>
          </Card>
        </div>
      </div>
    );
  }
}

DemoWidgetSpace.title = `Widget Space`;
DemoWidgetSpace.path = `/widget-space-demo`;

export default DemoWidgetSpace;
